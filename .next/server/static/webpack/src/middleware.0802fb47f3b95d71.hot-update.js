"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/lib/permissions-server.ts":
/*!***************************************!*\
  !*** ./src/lib/permissions-server.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllPages: () => (/* binding */ getAllPages),\n/* harmony export */   getAllUserPermissions: () => (/* binding */ getAllUserPermissions),\n/* harmony export */   getAllUsersWithPermissions: () => (/* binding */ getAllUsersWithPermissions),\n/* harmony export */   getUserPermissionsFromDB: () => (/* binding */ getUserPermissionsFromDB),\n/* harmony export */   hasPagePermission: () => (/* binding */ hasPagePermission),\n/* harmony export */   updateUserPermission: () => (/* binding */ updateUserPermission)\n/* harmony export */ });\n/* harmony import */ var _supabase_ssr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/ssr */ \"(middleware)/./node_modules/@supabase/ssr/dist/module/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n// Server-side Permission System Utilities\n// For use in middleware and API routes only\n\n\n/**\n * Get user permissions from database (server-side only)\n */ async function getUserPermissionsFromDB(userId) {\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://xgkaviefifbllbmfbyfe.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhna2F2aWVmaWZibGxibWZieWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNDYxNTEsImV4cCI6MjA3MjcyMjE1MX0.EQFv5-iHscXMhU73oV7f90xmB8g8gr3YJ_-4ROQJ-AY\", {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            },\n            setAll (cookiesToSet) {\n                cookiesToSet.forEach(({ name, value, options })=>cookieStore.set(name, value, options));\n            }\n        }\n    });\n    const { data, error } = await supabase.rpc('get_user_permissions', {\n        user_uuid: userId\n    });\n    if (error) {\n        console.error('Error fetching user permissions:', error);\n        // Fail-closed: return empty permissions (deny access)\n        return [];\n    }\n    return data || [];\n}\n/**\n * Check if user has permission to access a specific page (server-side)\n */ async function hasPagePermission(userId, pagePath, sessionPermissions) {\n    try {\n        // Handle dynamic routes: /orders/[id] should check /orders\n        const basePath = pagePath.split('/').slice(0, 3).join('/'); // e.g., /orders/123 -> /orders\n        const checkPath = basePath.length > 1 ? basePath : pagePath; // If basePath is just '/', use original path\n        // If permissions are provided (from session cache), use them\n        if (sessionPermissions) {\n            const permission = sessionPermissions.find((p)=>p.page_path === checkPath);\n            return permission?.can_access ?? false;\n        }\n        // Fallback to database check\n        const permissions = await getUserPermissionsFromDB(userId);\n        const permission = permissions.find((p)=>p.page_path === checkPath);\n        return permission?.can_access ?? false;\n    } catch (error) {\n        console.error('Error checking page permission:', error);\n        // Fail-closed: deny access on error\n        return false;\n    }\n}\n/**\n * Get all permissions for a user (server-side)\n */ async function getAllUserPermissions(userId) {\n    return await getUserPermissionsFromDB(userId);\n}\n/**\n * Update user permission in database (server-side)\n */ async function updateUserPermission(userId, pagePath, canAccess) {\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://xgkaviefifbllbmfbyfe.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhna2F2aWVmaWZibGxibWZieWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNDYxNTEsImV4cCI6MjA3MjcyMjE1MX0.EQFv5-iHscXMhU73oV7f90xmB8g8gr3YJ_-4ROQJ-AY\", {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            }\n        }\n    });\n    // First get the page ID\n    const { data: page, error: pageError } = await supabase.from('pages').select('id').eq('path', pagePath).eq('is_active', true).single();\n    if (pageError || !page) {\n        console.error('Error finding page:', pageError);\n        return false;\n    }\n    // Update or insert permission\n    const { error } = await supabase.from('user_permissions').upsert({\n        user_id: userId,\n        page_id: page.id,\n        can_access: canAccess\n    }, {\n        onConflict: 'user_id,page_id'\n    });\n    if (error) {\n        console.error('Error updating user permission:', error);\n        return false;\n    }\n    return true;\n}\n/**\n * Get all users with their permissions (server-side)\n */ async function getAllUsersWithPermissions() {\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://xgkaviefifbllbmfbyfe.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhna2F2aWVmaWZibGxibWZieWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNDYxNTEsImV4cCI6MjA3MjcyMjE1MX0.EQFv5-iHscXMhU73oV7f90xmB8g8gr3YJ_-4ROQJ-AY\", {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            }\n        }\n    });\n    // Get all users from the public users table\n    const { data: users, error: usersError } = await supabase.from('users').select('id, email, full_name, created_at, last_sign_in_at').order('created_at', {\n        ascending: false\n    });\n    if (usersError) {\n        console.error('Error fetching users:', usersError);\n        return [];\n    }\n    return users || [];\n}\n/**\n * Get all pages for permission management (server-side)\n */ async function getAllPages() {\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    const supabase = (0,_supabase_ssr__WEBPACK_IMPORTED_MODULE_0__.createServerClient)(\"https://xgkaviefifbllbmfbyfe.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhna2F2aWVmaWZibGxibWZieWZlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxNDYxNTEsImV4cCI6MjA3MjcyMjE1MX0.EQFv5-iHscXMhU73oV7f90xmB8g8gr3YJ_-4ROQJ-AY\", {\n        cookies: {\n            get (name) {\n                return cookieStore.get(name)?.value;\n            }\n        }\n    });\n    const { data: pages, error } = await supabase.from('pages').select('*').eq('is_active', true).order('category', {\n        ascending: true\n    }).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching pages:', error);\n        return [];\n    }\n    return pages || [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/lib/permissions-server.ts\n");

/***/ })

});