"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_app_api_quotes_id_fees_route_ts";
exports.ids = ["_rsc_src_app_api_quotes_id_fees_route_ts"];
exports.modules = {

/***/ "(rsc)/./src/app/api/quotes/[id]/fees/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/quotes/[id]/fees/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   recalculateQuoteTotals: () => (/* binding */ recalculateQuoteTotals)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://xgkaviefifbllbmfbyfe.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseServiceKey);\n// GET all fees for a quote\nasync function GET(request, { params }) {\n    try {\n        const { id } = await params;\n        const { data: fees, error } = await supabase.from('quote_fees').select(`\n        *,\n        feetypes (\n          id,\n          name\n        ),\n        currencies (\n          id,\n          name\n        )\n      `).eq('quote_id', id).is('deleted_at', null).order('created_at', {\n            ascending: true\n        });\n        if (error) {\n            console.error('Error fetching quote fees:', error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error.message\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(fees || []);\n    } catch (error) {\n        console.error('Error in GET /api/quotes/[id]/fees:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n// POST - Add a fee to a quote\nasync function POST(request, { params }) {\n    try {\n        const { id: quoteId } = await params;\n        const body = await request.json();\n        const { feetype_id, quantity = 1, unit_price_net, comment = '' } = body;\n        if (!feetype_id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'feetype_id is required'\n            }, {\n                status: 400\n            });\n        }\n        if (quantity < 1) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'quantity must be at least 1'\n            }, {\n                status: 400\n            });\n        }\n        // Fetch fee type details\n        const { data: feeType, error: feeError } = await supabase.from('feetypes').select(`\n        *,\n        vat (kulcs),\n        currencies (id, name)\n      `).eq('id', feetype_id).is('deleted_at', null).single();\n        if (feeError || !feeType) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Fee type not found'\n            }, {\n                status: 404\n            });\n        }\n        // Use provided unit price or default from fee type\n        const finalUnitPrice = unit_price_net !== undefined ? unit_price_net : feeType.net_price;\n        // Calculate totals with quantity\n        const vatRate = (feeType.vat?.kulcs || 0) / 100;\n        const totalNet = finalUnitPrice * quantity;\n        const totalVat = totalNet * vatRate;\n        const totalGross = totalNet + totalVat;\n        // Insert fee\n        const { data: newFee, error: insertError } = await supabase.from('quote_fees').insert({\n            quote_id: quoteId,\n            feetype_id: feetype_id,\n            fee_name: feeType.name,\n            quantity: quantity,\n            unit_price_net: finalUnitPrice,\n            vat_rate: vatRate,\n            vat_amount: totalVat,\n            gross_price: totalGross,\n            currency_id: feeType.currency_id,\n            comment: comment\n        }).select().single();\n        if (insertError) {\n            console.error('Error inserting fee:', insertError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: insertError.message\n            }, {\n                status: 500\n            });\n        }\n        // Recalculate quote totals\n        await recalculateQuoteTotals(quoteId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(newFee, {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Error in POST /api/quotes/[id]/fees:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to recalculate quote totals\nasync function recalculateQuoteTotals(quoteId) {\n    // Get all fees\n    const { data: fees } = await supabase.from('quote_fees').select('unit_price_net, quantity, vat_rate, vat_amount, gross_price').eq('quote_id', quoteId).is('deleted_at', null);\n    // Get all accessories\n    const { data: accessories } = await supabase.from('quote_accessories').select('total_net, total_vat, total_gross').eq('quote_id', quoteId).is('deleted_at', null);\n    // Calculate totals (fees with quantity support)\n    const feesTotalNet = fees?.reduce((sum, f)=>{\n        const totalNet = Number(f.unit_price_net) * Number(f.quantity || 1);\n        return sum + totalNet;\n    }, 0) || 0;\n    const feesTotalVat = fees?.reduce((sum, f)=>{\n        const totalNet = Number(f.unit_price_net) * Number(f.quantity || 1);\n        const totalVat = totalNet * Number(f.vat_rate);\n        return sum + totalVat;\n    }, 0) || 0;\n    const feesTotalGross = feesTotalNet + feesTotalVat;\n    const accessoriesTotalNet = accessories?.reduce((sum, a)=>sum + Number(a.total_net), 0) || 0;\n    const accessoriesTotalVat = accessories?.reduce((sum, a)=>sum + Number(a.total_vat), 0) || 0;\n    const accessoriesTotalGross = accessories?.reduce((sum, a)=>sum + Number(a.total_gross), 0) || 0;\n    // Get current quote to calculate final total with discount\n    const { data: quote } = await supabase.from('quotes').select('total_net, total_vat, total_gross, discount_percent').eq('id', quoteId).single();\n    if (quote) {\n        const discountPercent = Number(quote.discount_percent) / 100;\n        // Calculate subtotal (before discount) - only positive values\n        const materialsGross = Number(quote.total_gross);\n        const feesGrossPositive = Math.max(0, feesTotalGross) // Only positive fees get discount\n        ;\n        const accessoriesGrossPositive = Math.max(0, accessoriesTotalGross) // Only positive accessories get discount\n        ;\n        const subtotalBeforeDiscount = materialsGross + feesGrossPositive + accessoriesGrossPositive;\n        // Calculate discount amount (only on positive values)\n        const discountAmount = subtotalBeforeDiscount * discountPercent;\n        // Add negative fees/accessories (no discount on these)\n        const feesNegative = Math.min(0, feesTotalGross);\n        const accessoriesNegative = Math.min(0, accessoriesTotalGross);\n        // Final total = (positive values with discount) + (negative values without discount)\n        const finalTotalGross = subtotalBeforeDiscount - discountAmount + feesNegative + accessoriesNegative;\n        // Update quote\n        await supabase.from('quotes').update({\n            fees_total_net: feesTotalNet,\n            fees_total_vat: feesTotalVat,\n            fees_total_gross: feesTotalGross,\n            accessories_total_net: accessoriesTotalNet,\n            accessories_total_vat: accessoriesTotalVat,\n            accessories_total_gross: accessoriesTotalGross,\n            final_total_after_discount: finalTotalGross\n        }).eq('id', quoteId);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/quotes/[id]/fees/route.ts\n");

/***/ })

};
;