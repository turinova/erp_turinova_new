/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/shoporder/search/route";
exports.ids = ["app/api/shoporder/search/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fshoporder%2Fsearch%2Froute&page=%2Fapi%2Fshoporder%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fshoporder%2Fsearch%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fshoporder%2Fsearch%2Froute&page=%2Fapi%2Fshoporder%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fshoporder%2Fsearch%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Volumes_T7_erp_turinova_new_src_app_api_shoporder_search_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/shoporder/search/route.ts */ \"(rsc)/./src/app/api/shoporder/search/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/shoporder/search/route\",\n        pathname: \"/api/shoporder/search\",\n        filename: \"route\",\n        bundlePath: \"app/api/shoporder/search/route\"\n    },\n    resolvedPagePath: \"/Volumes/T7/erp_turinova_new/src/app/api/shoporder/search/route.ts\",\n    nextConfigOutput,\n    userland: _Volumes_T7_erp_turinova_new_src_app_api_shoporder_search_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZzaG9wb3JkZXIlMkZzZWFyY2glMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnNob3BvcmRlciUyRnNlYXJjaCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnNob3BvcmRlciUyRnNlYXJjaCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNrQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1ZvbHVtZXMvVDcvZXJwX3R1cmlub3ZhX25ldy9zcmMvYXBwL2FwaS9zaG9wb3JkZXIvc2VhcmNoL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zaG9wb3JkZXIvc2VhcmNoL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc2hvcG9yZGVyL3NlYXJjaFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvc2hvcG9yZGVyL3NlYXJjaC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Wb2x1bWVzL1Q3L2VycF90dXJpbm92YV9uZXcvc3JjL2FwcC9hcGkvc2hvcG9yZGVyL3NlYXJjaC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fshoporder%2Fsearch%2Froute&page=%2Fapi%2Fshoporder%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fshoporder%2Fsearch%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/shoporder/search/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/shoporder/search/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../lib/supabase-server */ \"(rsc)/./src/lib/supabase-server.ts\");\n\n\n// GET /api/shoporder/search - Search materials and linear materials for shop order\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get('q');\n        if (!search || search.length < 2) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                materials: [],\n                linearMaterials: []\n            });\n        }\n        console.log(`[SHOP ORDER] Searching for: \"${search}\"`);\n        const startTime = performance.now();\n        // Search materials\n        const { data: materialsData, error: materialsError } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('materials').select(`\n        id,\n        name,\n        length_mm,\n        width_mm,\n        thickness_mm,\n        base_price,\n        multiplier,\n        price_per_sqm,\n        partners_id,\n        units_id,\n        currency_id,\n        vat_id,\n        brands:brand_id(name),\n        partners:partners_id(name),\n        units:units_id(name, shortform),\n        currencies:currency_id(name),\n        vat:vat_id(name, kulcs)\n      `).is('deleted_at', null).eq('active', true).ilike('name', `%${search}%`).limit(20);\n        if (materialsError) {\n            console.error('Error searching materials:', materialsError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to search materials'\n            }, {\n                status: 500\n            });\n        }\n        // Search linear materials\n        const { data: linearMaterialsData, error: linearMaterialsError } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('linear_materials').select(`\n        id,\n        name,\n        width,\n        length,\n        thickness,\n        type,\n        base_price,\n        multiplier,\n        price_per_m,\n        partners_id,\n        units_id,\n        currency_id,\n        vat_id,\n        brands:brand_id(name),\n        partners:partners_id(name),\n        units:units_id(name, shortform),\n        currencies:currency_id(name),\n        vat:vat_id(name, kulcs)\n      `).is('deleted_at', null).eq('active', true).ilike('name', `%${search}%`).limit(20);\n        // Search accessories\n        const { data: accessoriesData, error: accessoriesError } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('accessories').select(`\n        id,\n        name,\n        sku,\n        base_price,\n        multiplier,\n        net_price,\n        partners_id,\n        units_id,\n        currency_id,\n        vat_id,\n        partners:partners_id(name),\n        units:units_id(name, shortform),\n        currencies:currency_id(name),\n        vat:vat_id(name, kulcs)\n      `).is('deleted_at', null).or(`name.ilike.%${search}%,sku.ilike.%${search}%`).limit(20);\n        if (accessoriesError) {\n            console.error('Error searching accessories:', accessoriesError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to search accessories'\n            }, {\n                status: 500\n            });\n        }\n        // Get machine codes for materials\n        const materialIds = materialsData?.map((m)=>m.id) || [];\n        const { data: materialMachineCodes } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('machine_material_map').select('material_id, machine_code').in('material_id', materialIds).eq('machine_type', 'Korpus');\n        // Get machine codes for linear materials\n        const linearMaterialIds = linearMaterialsData?.map((lm)=>lm.id) || [];\n        const { data: linearMaterialMachineCodes } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('machine_linear_material_map').select('linear_material_id, machine_code').in('linear_material_id', linearMaterialIds).eq('machine_type', 'Korpus');\n        // Create machine code maps\n        const materialMachineCodeMap = new Map(materialMachineCodes?.map((mc)=>[\n                mc.material_id,\n                mc.machine_code\n            ]) || []);\n        const linearMaterialMachineCodeMap = new Map(linearMaterialMachineCodes?.map((mc)=>[\n                mc.linear_material_id,\n                mc.machine_code\n            ]) || []);\n        // Transform materials data\n        const materials = materialsData?.map((material)=>({\n                id: material.id,\n                name: material.name,\n                sku: materialMachineCodeMap.get(material.id) || '',\n                type: 'Bútorlap',\n                base_price: material.base_price || 0,\n                multiplier: material.multiplier || 1.38,\n                net_price: material.price_per_sqm || 0,\n                gross_price: Math.round((material.price_per_sqm || 0) * (1 + (material.vat?.kulcs || 0) / 100)),\n                partners_id: material.partners_id,\n                units_id: material.units_id,\n                currency_id: material.currency_id,\n                vat_id: material.vat_id,\n                partner_name: material.partners?.name || '',\n                unit_name: material.units?.name || '',\n                unit_shortform: material.units?.shortform || '',\n                currency_name: material.currencies?.name || '',\n                vat_percent: material.vat?.kulcs || 0,\n                vat_amount: Math.round((material.price_per_sqm || 0) * (material.vat?.kulcs || 0) / 100),\n                brand_name: material.brands?.name || '',\n                dimensions: `${material.length_mm}x${material.width_mm}x${material.thickness_mm}mm`,\n                source: 'materials'\n            })) || [];\n        // Transform linear materials data\n        const linearMaterials = linearMaterialsData?.map((linearMaterial)=>({\n                id: linearMaterial.id,\n                name: linearMaterial.name,\n                sku: linearMaterialMachineCodeMap.get(linearMaterial.id) || '',\n                type: linearMaterial.type || 'Lineáris anyag',\n                base_price: linearMaterial.base_price || 0,\n                multiplier: linearMaterial.multiplier || 1.38,\n                net_price: linearMaterial.price_per_m || 0,\n                gross_price: Math.round((linearMaterial.price_per_m || 0) * (1 + (linearMaterial.vat?.kulcs || 0) / 100)),\n                partners_id: linearMaterial.partners_id,\n                units_id: linearMaterial.units_id,\n                currency_id: linearMaterial.currency_id,\n                vat_id: linearMaterial.vat_id,\n                partner_name: linearMaterial.partners?.name || '',\n                unit_name: linearMaterial.units?.name || '',\n                unit_shortform: linearMaterial.units?.shortform || '',\n                currency_name: linearMaterial.currencies?.name || '',\n                vat_percent: linearMaterial.vat?.kulcs || 0,\n                vat_amount: Math.round((linearMaterial.price_per_m || 0) * (linearMaterial.vat?.kulcs || 0) / 100),\n                brand_name: linearMaterial.brands?.name || '',\n                dimensions: `${linearMaterial.width}x${linearMaterial.length}x${linearMaterial.thickness}mm`,\n                source: 'linear_materials'\n            })) || [];\n        // Transform accessories data\n        const accessories = accessoriesData?.map((accessory)=>({\n                id: accessory.id,\n                name: accessory.name,\n                sku: accessory.sku,\n                type: 'Termék',\n                base_price: accessory.base_price || 0,\n                multiplier: accessory.multiplier || 1.38,\n                net_price: accessory.net_price || 0,\n                gross_price: Math.round((accessory.net_price || 0) * (1 + (accessory.vat?.kulcs || 0) / 100)),\n                partners_id: accessory.partners_id,\n                units_id: accessory.units_id,\n                currency_id: accessory.currency_id,\n                vat_id: accessory.vat_id,\n                partner_name: accessory.partners?.name || '',\n                unit_name: accessory.units?.name || '',\n                unit_shortform: accessory.units?.shortform || '',\n                currency_name: accessory.currencies?.name || '',\n                vat_percent: accessory.vat?.kulcs || 0,\n                vat_amount: Math.round((accessory.net_price || 0) * (accessory.vat?.kulcs || 0) / 100),\n                brand_name: '',\n                dimensions: '',\n                source: 'accessories'\n            })) || [];\n        const totalTime = performance.now() - startTime;\n        console.log(`[SHOP ORDER] Search completed in ${totalTime.toFixed(2)}ms - Found ${materials.length} materials, ${linearMaterials.length} linear materials, ${accessories.length} accessories`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            materials,\n            linearMaterials,\n            accessories,\n            totalCount: materials.length + linearMaterials.length + accessories.length\n        });\n    } catch (error) {\n        console.error('Error in shop order search:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/shoporder/search/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase-server.ts":
/*!************************************!*\
  !*** ./src/lib/supabase-server.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccessoriesWithPagination: () => (/* binding */ getAccessoriesWithPagination),\n/* harmony export */   getAccessoryById: () => (/* binding */ getAccessoryById),\n/* harmony export */   getAllAccessories: () => (/* binding */ getAllAccessories),\n/* harmony export */   getAllBrands: () => (/* binding */ getAllBrands),\n/* harmony export */   getAllBrandsForEdgeMaterials: () => (/* binding */ getAllBrandsForEdgeMaterials),\n/* harmony export */   getAllBrandsForLinearMaterials: () => (/* binding */ getAllBrandsForLinearMaterials),\n/* harmony export */   getAllBrandsForMaterials: () => (/* binding */ getAllBrandsForMaterials),\n/* harmony export */   getAllCompanies: () => (/* binding */ getAllCompanies),\n/* harmony export */   getAllCurrencies: () => (/* binding */ getAllCurrencies),\n/* harmony export */   getAllCurrenciesForLinearMaterials: () => (/* binding */ getAllCurrenciesForLinearMaterials),\n/* harmony export */   getAllCurrenciesForPartners: () => (/* binding */ getAllCurrenciesForPartners),\n/* harmony export */   getAllCustomers: () => (/* binding */ getAllCustomers),\n/* harmony export */   getAllEdgeMaterials: () => (/* binding */ getAllEdgeMaterials),\n/* harmony export */   getAllFeeTypes: () => (/* binding */ getAllFeeTypes),\n/* harmony export */   getAllLinearMaterials: () => (/* binding */ getAllLinearMaterials),\n/* harmony export */   getAllMaterials: () => (/* binding */ getAllMaterials),\n/* harmony export */   getAllMediaFiles: () => (/* binding */ getAllMediaFiles),\n/* harmony export */   getAllPartners: () => (/* binding */ getAllPartners),\n/* harmony export */   getAllProductionMachines: () => (/* binding */ getAllProductionMachines),\n/* harmony export */   getAllShopOrderItems: () => (/* binding */ getAllShopOrderItems),\n/* harmony export */   getAllShopOrders: () => (/* binding */ getAllShopOrders),\n/* harmony export */   getAllUnits: () => (/* binding */ getAllUnits),\n/* harmony export */   getAllVatRates: () => (/* binding */ getAllVatRates),\n/* harmony export */   getAllVatRatesForEdgeMaterials: () => (/* binding */ getAllVatRatesForEdgeMaterials),\n/* harmony export */   getAllVatRatesForLinearMaterials: () => (/* binding */ getAllVatRatesForLinearMaterials),\n/* harmony export */   getAllVatRatesForPartners: () => (/* binding */ getAllVatRatesForPartners),\n/* harmony export */   getAllWorkers: () => (/* binding */ getAllWorkers),\n/* harmony export */   getBrandById: () => (/* binding */ getBrandById),\n/* harmony export */   getCompanyById: () => (/* binding */ getCompanyById),\n/* harmony export */   getCurrencyById: () => (/* binding */ getCurrencyById),\n/* harmony export */   getCustomerById: () => (/* binding */ getCustomerById),\n/* harmony export */   getCuttingFee: () => (/* binding */ getCuttingFee),\n/* harmony export */   getEdgeMaterialById: () => (/* binding */ getEdgeMaterialById),\n/* harmony export */   getFeeTypeById: () => (/* binding */ getFeeTypeById),\n/* harmony export */   getLinearMaterialById: () => (/* binding */ getLinearMaterialById),\n/* harmony export */   getMaterialById: () => (/* binding */ getMaterialById),\n/* harmony export */   getMaterialPriceHistory: () => (/* binding */ getMaterialPriceHistory),\n/* harmony export */   getOrdersWithPagination: () => (/* binding */ getOrdersWithPagination),\n/* harmony export */   getPartnerById: () => (/* binding */ getPartnerById),\n/* harmony export */   getProductionMachineById: () => (/* binding */ getProductionMachineById),\n/* harmony export */   getQuoteById: () => (/* binding */ getQuoteById),\n/* harmony export */   getQuotesWithPagination: () => (/* binding */ getQuotesWithPagination),\n/* harmony export */   getShopOrderById: () => (/* binding */ getShopOrderById),\n/* harmony export */   getTenantCompany: () => (/* binding */ getTenantCompany),\n/* harmony export */   getUnitById: () => (/* binding */ getUnitById),\n/* harmony export */   getVatById: () => (/* binding */ getVatById),\n/* harmony export */   getWorkerById: () => (/* binding */ getWorkerById),\n/* harmony export */   supabaseServer: () => (/* binding */ supabaseServer)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Performance timing utilities\nconst isDev = \"development\" !== 'production';\nfunction logTiming(operation, startTime, additionalInfo) {\n    if (isDev) {\n        const duration = performance.now() - startTime;\n        console.log(`[PERF] ${operation}: ${duration.toFixed(2)}ms${additionalInfo ? ` (${additionalInfo})` : ''}`);\n    }\n}\n// Helper function to check if Supabase is configured\nfunction checkSupabaseConfig() {\n    if (!supabaseServer) {\n        console.warn('Supabase not configured for server-side operations');\n        return false;\n    }\n    return true;\n}\n// Server-side Supabase client with service role key for SSR\nconst supabaseUrl = \"https://xgkaviefifbllbmfbyfe.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Check if Supabase is configured\nconst isSupabaseConfigured = supabaseUrl && supabaseServiceKey;\nif (!isSupabaseConfigured) {\n    console.warn('Supabase not configured for server-side operations. Some features may not work.');\n}\n// Create a mock Supabase client for build time\nconst createMockSupabaseClient = ()=>({\n        from: ()=>({\n                select: ()=>({\n                        eq: ()=>({\n                                is: ()=>({\n                                        single: ()=>({\n                                                data: null,\n                                                error: null\n                                            })\n                                    })\n                            }),\n                        is: ()=>({\n                                order: ()=>({\n                                        data: [],\n                                        error: null\n                                    })\n                            })\n                    })\n            })\n    });\nconst supabaseServer = isSupabaseConfigured ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false,\n        detectSessionInUrl: false // No URL session detection on server\n    },\n    global: {\n        headers: {\n            'X-Client-Info': 'nextjs-server'\n        }\n    },\n    realtime: {\n        enabled: false\n    }\n}) : createMockSupabaseClient();\n// Server-side optimized query functions\nasync function getBrandById(id) {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching brand:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllBrands() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Brands DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching brands:', error);\n        return [];\n    }\n    logTiming('Brands Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Materials SSR functions\nasync function getMaterialById(id) {\n    // Fetch material from materials table with pricing data\n    const { data: materialData, error } = await supabaseServer.from('materials').select(`\n      id,\n      name,\n      length_mm,\n      width_mm,\n      thickness_mm,\n      grain_direction,\n      on_stock,\n      active,\n      image_url,\n      brand_id,\n      base_price,\n      multiplier,\n      price_per_sqm,\n      partners_id,\n      units_id,\n      currency_id,\n      vat_id,\n      created_at,\n      updated_at,\n      brands(id, name),\n      currencies(id, name),\n      vat(id, name, kulcs)\n    `).eq('id', id).single();\n    if (error) {\n        console.error('Error fetching material:', error);\n        return null;\n    }\n    // Fetch settings from material_settings\n    const { data: settingsData } = await supabaseServer.from('material_settings').select('kerf_mm, trim_top_mm, trim_right_mm, trim_bottom_mm, trim_left_mm, rotatable, waste_multi, usage_limit').eq('material_id', id).single();\n    // Fetch machine code from machine_material_map\n    const { data: machineData } = await supabaseServer.from('machine_material_map').select('machine_code').eq('material_id', id).eq('machine_type', 'Korpus').single();\n    // Transform the data to match the expected format\n    return {\n        id: materialData.id,\n        name: materialData.name || `Material ${materialData.id}`,\n        length_mm: materialData.length_mm || 2800,\n        width_mm: materialData.width_mm || 2070,\n        thickness_mm: materialData.thickness_mm || 18,\n        grain_direction: Boolean(materialData.grain_direction),\n        on_stock: materialData.on_stock !== undefined ? Boolean(materialData.on_stock) : true,\n        active: materialData.active !== undefined ? Boolean(materialData.active) : true,\n        image_url: materialData.image_url || null,\n        brand_id: materialData.brand_id || '',\n        brand_name: materialData.brands?.name || 'Unknown',\n        kerf_mm: settingsData?.kerf_mm || 3,\n        trim_top_mm: settingsData?.trim_top_mm || 0,\n        trim_right_mm: settingsData?.trim_right_mm || 0,\n        trim_bottom_mm: settingsData?.trim_bottom_mm || 0,\n        trim_left_mm: settingsData?.trim_left_mm || 0,\n        rotatable: settingsData?.rotatable !== false,\n        waste_multi: settingsData?.waste_multi || 1.0,\n        usage_limit: settingsData?.usage_limit || 0.65,\n        machine_code: machineData?.machine_code || '',\n        base_price: materialData.base_price || 0,\n        multiplier: materialData.multiplier || 1.38,\n        price_per_sqm: materialData.price_per_sqm || 0,\n        partners_id: materialData.partners_id || null,\n        units_id: materialData.units_id || null,\n        currency_id: materialData.currency_id || null,\n        vat_id: materialData.vat_id || null,\n        currencies: materialData.currencies || null,\n        vat: materialData.vat || null,\n        created_at: materialData.created_at,\n        updated_at: materialData.updated_at\n    };\n}\nasync function getAllMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('materials_with_settings').select(`\n      id, \n      material_name, \n      length_mm, \n      width_mm, \n      thickness_mm, \n      grain_direction, \n      on_stock,\n      image_url, \n      brand_name,\n      kerf_mm, \n      trim_top_mm, \n      trim_right_mm, \n      trim_bottom_mm, \n      trim_left_mm, \n      rotatable, \n      waste_multi, \n      usage_limit,\n      created_at, \n      updated_at\n    `).order('material_name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching materials:', error);\n        return [];\n    }\n    // Fetch pricing data from materials table\n    const materialIds = (data || []).map((m)=>m.id);\n    const { data: pricingData } = await supabaseServer.from('materials').select(`\n      id,\n      price_per_sqm,\n      active,\n      vat(kulcs),\n      currencies(name)\n    `).in('id', materialIds);\n    // Create pricing map for quick lookup\n    const pricingMap = new Map((pricingData || []).map((p)=>[\n            p.id,\n            {\n                price_per_sqm: p.price_per_sqm || 0,\n                vat_percent: p.vat?.kulcs || 0,\n                currency: p.currencies?.name || 'HUF',\n                active: p.active !== undefined ? p.active : true\n            }\n        ]));\n    // Transform the data to match the expected format\n    const transformedData = (data || []).map((material)=>{\n        const pricing = pricingMap.get(material.id) || {\n            price_per_sqm: 0,\n            vat_percent: 0,\n            currency: 'HUF',\n            active: true\n        };\n        return {\n            id: material.id,\n            name: material.material_name || `Material ${material.id}`,\n            length_mm: material.length_mm || 2800,\n            width_mm: material.width_mm || 2070,\n            thickness_mm: material.thickness_mm || 18,\n            grain_direction: Boolean(material.grain_direction),\n            on_stock: material.on_stock !== undefined ? Boolean(material.on_stock) : true,\n            active: pricing.active !== undefined ? Boolean(pricing.active) : true,\n            image_url: material.image_url || null,\n            brand_id: '',\n            brand_name: material.brand_name || 'Unknown',\n            kerf_mm: material.kerf_mm || 3,\n            trim_top_mm: material.trim_top_mm || 0,\n            trim_right_mm: material.trim_right_mm || 0,\n            trim_bottom_mm: material.trim_bottom_mm || 0,\n            trim_left_mm: material.trim_left_mm || 0,\n            rotatable: material.rotatable !== false,\n            waste_multi: material.waste_multi || 1.0,\n            usage_limit: material.usage_limit !== undefined && material.usage_limit !== null ? material.usage_limit : 0.65,\n            machine_code: '',\n            price_per_sqm: pricing.price_per_sqm,\n            vat_percent: pricing.vat_percent,\n            currency: pricing.currency,\n            created_at: material.created_at,\n            updated_at: material.updated_at\n        };\n    });\n    logTiming('Materials Total', startTime, `transformed ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getAllBrandsForMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Units SSR functions\nasync function getUnitById(id) {\n    const { data, error } = await supabaseServer.from('units').select('id, name, shortform, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching unit:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllUnits() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('units').select('id, name, shortform, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Units DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching units:', error);\n        return [];\n    }\n    logTiming('Units Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Production Machines SSR functions\nasync function getAllProductionMachines() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('production_machines').select('id, machine_name, comment, usage_limit_per_day, created_at, updated_at').is('deleted_at', null).order('machine_name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Production Machines DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching production machines:', error);\n        return [];\n    }\n    logTiming('Production Machines Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getProductionMachineById(id) {\n    const { data, error } = await supabaseServer.from('production_machines').select('id, machine_name, comment, usage_limit_per_day, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching production machine:', error);\n        return null;\n    }\n    return data;\n}\n// Fee Types SSR functions\nasync function getAllFeeTypes() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('feetypes').select(`\n      id, \n      name, \n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Fee Types DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching fee types:', error);\n        return [];\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((feeType)=>({\n            ...feeType,\n            vat_name: feeType.vat?.name || '',\n            vat_percent: feeType.vat?.kulcs || 0,\n            currency_name: feeType.currencies?.name || '',\n            vat_amount: feeType.net_price * (feeType.vat?.kulcs || 0) / 100,\n            gross_price: feeType.net_price + feeType.net_price * (feeType.vat?.kulcs || 0) / 100\n        })) || [];\n    logTiming('Fee Types Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getFeeTypeById(id) {\n    const { data, error } = await supabaseServer.from('feetypes').select(`\n      id, \n      name, \n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching fee type:', error);\n        return null;\n    }\n    // Transform the data to include calculated fields\n    const transformedData = {\n        ...data,\n        vat_name: data.vat?.name || '',\n        vat_percent: data.vat?.kulcs || 0,\n        currency_name: data.currencies?.name || '',\n        vat_amount: data.net_price * (data.vat?.kulcs || 0) / 100,\n        gross_price: data.net_price + data.net_price * (data.vat?.kulcs || 0) / 100\n    };\n    return transformedData;\n}\n// Currencies SSR functions\nasync function getCurrencyById(id) {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching currency:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCurrencies() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Currencies DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching currencies:', error);\n        return [];\n    }\n    logTiming('Currencies Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// VAT SSR functions\nasync function getVatById(id) {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching VAT rate:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllVatRates() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('VAT DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching VAT rates:', error);\n        return [];\n    }\n    logTiming('VAT Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Cutting Fees SSR functions\nasync function getCuttingFee() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('cutting_fees').select(`\n      id,\n      fee_per_meter,\n      panthelyfuras_fee_per_hole,\n      duplungolas_fee_per_sqm,\n      szogvagas_fee_per_panel,\n      currency_id,\n      vat_id,\n      currencies (\n        id,\n        name\n      ),\n      vat (\n        id,\n        kulcs\n      ),\n      created_at,\n      updated_at\n    `).limit(1).single();\n    const queryTime = performance.now();\n    logTiming('Cutting Fee DB Query', startTime, `fetched ${data ? 1 : 0} records`);\n    if (error) {\n        console.error('Error fetching cutting fee:', error);\n        return null;\n    }\n    logTiming('Cutting Fee Total', startTime, `returned ${data ? 1 : 0} records`);\n    return data || null;\n}\nasync function getMaterialPriceHistory(materialId) {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('material_price_history').select('id, old_price_per_sqm, new_price_per_sqm, changed_at, changed_by').eq('material_id', materialId).order('changed_at', {\n        ascending: false\n    }).limit(10);\n    const queryTime = performance.now();\n    logTiming('Price History DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching price history:', error);\n        return [];\n    }\n    // Enrich with user emails using admin API\n    const enrichedData = await Promise.all((data || []).map(async (h)=>{\n        let userEmail = null;\n        if (h.changed_by) {\n            try {\n                const { data: userData } = await supabaseServer.auth.admin.getUserById(h.changed_by);\n                if (userData?.user) {\n                    userEmail = userData.user.email;\n                }\n            } catch (err) {\n                console.error('Error fetching user for price history:', err);\n            }\n        }\n        return {\n            ...h,\n            changed_by_user: userEmail\n        };\n    }));\n    logTiming('Price History Total', startTime, `returned ${enrichedData?.length || 0} records`);\n    return enrichedData || [];\n}\n// Customers SSR functions\nasync function getCustomerById(id) {\n    const { data, error } = await supabaseServer.from('customers').select(`\n      id,\n      name,\n      email,\n      mobile,\n      discount_percent,\n      sms_notification,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching customer:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCustomers() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('customers').select(`\n      id,\n      name,\n      email,\n      mobile,\n      discount_percent,\n      sms_notification,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Customers DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching customers:', error);\n        return [];\n    }\n    logTiming('Customers Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Edge Materials SSR functions\nasync function getEdgeMaterialById(id) {\n    const { data, error } = await supabaseServer.from('edge_materials').select(`\n      id,\n      brand_id,\n      type,\n      thickness,\n      width,\n      decor,\n      price,\n      vat_id,\n      active,\n      ráhagyás,\n      favourite_priority,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching edge material:', error);\n        return null;\n    }\n    // Fetch machine code from machine_edge_material_map\n    const { data: machineData } = await supabaseServer.from('machine_edge_material_map').select('machine_code').eq('edge_material_id', id).eq('machine_type', 'Korpus').single();\n    return {\n        ...data,\n        machine_code: machineData?.machine_code || ''\n    };\n}\nasync function getAllEdgeMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('edge_materials').select(`\n      id,\n      brand_id,\n      type,\n      thickness,\n      width,\n      decor,\n      price,\n      vat_id,\n      active,\n      ráhagyás,\n      favourite_priority,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).is('deleted_at', null).order('type', {\n        ascending: true\n    }).order('decor', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Edge Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching edge materials:', error);\n        return [];\n    }\n    logTiming('Edge Materials Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getAllBrandsForEdgeMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for edge materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllVatRatesForEdgeMaterials() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for edge materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Linear Materials SSR functions\nasync function getAllLinearMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('linear_materials').select(`\n      id,\n      brand_id,\n      name,\n      width,\n      length,\n      thickness,\n      type,\n      image_url,\n      price_per_m,\n      currency_id,\n      vat_id,\n      on_stock,\n      active,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      currencies (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Linear Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching linear materials:', error);\n        return [];\n    }\n    // Fetch machine codes for all linear materials\n    const linearMaterialIds = data?.map((lm)=>lm.id) || [];\n    const { data: machineCodes } = await supabaseServer.from('machine_linear_material_map').select('linear_material_id, machine_code').in('linear_material_id', linearMaterialIds).eq('machine_type', 'Korpus');\n    const machineCodeMap = new Map(machineCodes?.map((mc)=>[\n            mc.linear_material_id,\n            mc.machine_code\n        ]) || []);\n    // Transform data to include machine codes\n    const transformedData = data?.map((lm)=>({\n            ...lm,\n            machine_code: machineCodeMap.get(lm.id) || '',\n            brand_name: lm.brands?.name || '',\n            currency_code: lm.currencies?.name || '',\n            currency_name: lm.currencies?.name || '',\n            vat_name: lm.vat?.name || '',\n            vat_percent: lm.vat?.kulcs || 0\n        })) || [];\n    logTiming('Linear Materials Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getLinearMaterialById(id) {\n    const { data, error } = await supabaseServer.from('linear_materials').select(`\n      id,\n      brand_id,\n      name,\n      width,\n      length,\n      thickness,\n      type,\n      image_url,\n      base_price,\n      multiplier,\n      price_per_m,\n      partners_id,\n      units_id,\n      currency_id,\n      vat_id,\n      on_stock,\n      active,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      currencies (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching linear material:', error);\n        return null;\n    }\n    // Fetch machine code\n    const { data: machineData } = await supabaseServer.from('machine_linear_material_map').select('machine_code').eq('linear_material_id', id).eq('machine_type', 'Korpus').single();\n    return {\n        ...data,\n        machine_code: machineData?.machine_code || ''\n    };\n}\nasync function getAllBrandsForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllVatRatesForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllCurrenciesForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching currencies for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Companies SSR functions\n// Partners SSR functions\nasync function getPartnerById(id) {\n    const { data, error } = await supabaseServer.from('partners').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      mobile,\n      email,\n      tax_number,\n      company_registration_number,\n      bank_account,\n      notes,\n      status,\n      contact_person,\n      vat_id,\n      currency_id,\n      payment_terms,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching partner:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllPartners() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('partners').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      mobile,\n      email,\n      tax_number,\n      company_registration_number,\n      bank_account,\n      notes,\n      status,\n      contact_person,\n      vat_id,\n      currency_id,\n      payment_terms,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Partners DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching partners:', error);\n        return [];\n    }\n    logTiming('Partners Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getAllVatRatesForPartners() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for partners:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllCurrenciesForPartners() {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching currencies for partners:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getCompanyById(id) {\n    const { data, error } = await supabaseServer.from('tenant_company').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      phone_number,\n      email,\n      website,\n      tax_number,\n      company_registration_number,\n      vat_id,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching company:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCompanies() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('tenant_company').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      phone_number,\n      email,\n      website,\n      tax_number,\n      company_registration_number,\n      vat_id,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Companies DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching companies:', error);\n        return [];\n    }\n    logTiming('Companies Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Get tenant company (for default email in customer auto-creation and quote display)\nasync function getTenantCompany() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('tenant_company').select('id, name, country, postal_code, city, address, phone_number, email, website, tax_number, company_registration_number, vat_id').is('deleted_at', null).limit(1).single();\n    const queryTime = performance.now();\n    logTiming('Tenant Company DB Query', startTime, `fetched ${data ? 1 : 0} records`);\n    if (error) {\n        console.error('Error fetching tenant company:', error);\n        return null;\n    }\n    logTiming('Tenant Company Total', startTime, `returned ${data ? 1 : 0} records`);\n    return data;\n}\n// Media files SSR function\nasync function getAllMediaFiles() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('media_files').select('*').order('created_at', {\n        ascending: false\n    }).limit(1000);\n    const queryTime = performance.now();\n    logTiming('Media Files DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching media files:', error);\n        return [];\n    }\n    // Transform to match expected format\n    const transformedFiles = data?.map((file)=>({\n            id: file.id,\n            name: file.original_filename,\n            storedName: file.stored_filename,\n            path: file.storage_path,\n            fullUrl: file.full_url,\n            size: file.size,\n            created_at: file.created_at,\n            updated_at: file.updated_at\n        })) || [];\n    logTiming('Media Files Total', startTime, `returned ${transformedFiles.length} records`);\n    return transformedFiles;\n}\n// Get single quote by ID with all data (for editing)\nasync function getQuoteById(quoteId) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching quote ${quoteId} - OPTIMIZED`);\n    try {\n        // OPTIMIZATION: Fetch all data in parallel instead of sequential\n        const parallelStartTime = performance.now();\n        const [quoteResult, panelsResult, pricingResult, feesResult, accessoriesResult, tenantCompany, paymentsResult] = await Promise.all([\n            // 1. Quote with customer data and production machine\n            supabaseServer.from('quotes').select(`\n          id,\n          quote_number,\n          order_number,\n          status,\n          payment_status,\n          customer_id,\n          discount_percent,\n          production_machine_id,\n          production_date,\n          barcode,\n          total_net,\n          total_vat,\n          total_gross,\n          final_total_after_discount,\n          fees_total_net,\n          fees_total_vat,\n          fees_total_gross,\n          accessories_total_net,\n          accessories_total_vat,\n          accessories_total_gross,\n          created_at,\n          updated_at,\n          customers(\n            id,\n            name,\n            email,\n            mobile,\n            discount_percent,\n            billing_name,\n            billing_country,\n            billing_city,\n            billing_postal_code,\n            billing_street,\n            billing_house_number,\n            billing_tax_number,\n            billing_company_reg_number\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `).eq('id', quoteId).is('deleted_at', null).single(),\n            // 2. Panels with materials\n            supabaseServer.from('quote_panels').select(`\n          id,\n          material_id,\n          width_mm,\n          height_mm,\n          quantity,\n          label,\n          edge_material_a_id,\n          edge_material_b_id,\n          edge_material_c_id,\n          edge_material_d_id,\n          panthelyfuras_quantity,\n          panthelyfuras_oldal,\n          duplungolas,\n          szogvagas,\n          materials(id, name, brand_id, length_mm, width_mm, brands(name))\n        `).eq('quote_id', quoteId).order('created_at', {\n                ascending: true\n            }),\n            // 3. Pricing with breakdowns\n            supabaseServer.from('quote_materials_pricing').select(`\n          id, material_id, material_name, board_width_mm, board_length_mm, thickness_mm, grain_direction,\n          on_stock, boards_used, usage_percentage, pricing_method, charged_sqm,\n          price_per_sqm, vat_rate, currency, usage_limit, waste_multi,\n          material_net, material_vat, material_gross,\n          edge_materials_net, edge_materials_vat, edge_materials_gross,\n          cutting_length_m, cutting_net, cutting_vat, cutting_gross,\n          services_net, services_vat, services_gross,\n          total_net, total_vat, total_gross,\n          materials(id, name, brands(name)),\n          quote_edge_materials_breakdown(\n            id, edge_material_id, edge_material_name, total_length_m, price_per_m,\n            net_price, vat_amount, gross_price\n          ),\n          quote_services_breakdown(\n            id, service_type, quantity, unit_price, net_price, vat_amount, gross_price\n          )\n        `).eq('quote_id', quoteId).order('created_at', {\n                ascending: true\n            }),\n            // 4. Fees\n            supabaseServer.from('quote_fees').select(`\n          id, fee_name, quantity, unit_price_net, vat_rate, vat_amount, gross_price, currency_id, comment,\n          created_at,\n          feetypes(id, name),\n          currencies(id, name)\n        `).eq('quote_id', quoteId).is('deleted_at', null).order('created_at', {\n                ascending: true\n            }),\n            // 5. Accessories\n            supabaseServer.from('quote_accessories').select(`\n          id, accessory_name, sku, quantity, unit_price_net, vat_rate, unit_name, currency_id,\n          total_net, total_vat, total_gross, created_at,\n          accessories(id, name, sku),\n          units(id, name, shortform),\n          currencies(id, name)\n        `).eq('quote_id', quoteId).is('deleted_at', null).order('created_at', {\n                ascending: true\n            }),\n            // 6. Tenant company\n            getTenantCompany(),\n            // 7. Payments (for orders)\n            supabaseServer.from('quote_payments').select('*').eq('quote_id', quoteId).is('deleted_at', null).order('payment_date', {\n                ascending: false\n            })\n        ]);\n        logTiming('Parallel Queries Complete', parallelStartTime, 'all 7 queries executed in parallel');\n        // Extract data and errors from results\n        const { data: quote, error: quoteError } = quoteResult;\n        const { data: panels, error: panelsError } = panelsResult;\n        const { data: pricingData, error: pricingError } = pricingResult;\n        const { data: fees, error: feesError } = feesResult;\n        const { data: accessories, error: accessoriesError } = accessoriesResult;\n        const { data: payments, error: paymentsError } = paymentsResult;\n        // Handle errors\n        if (quoteError) {\n            console.error('[SSR] Error fetching quote:', quoteError);\n            logTiming('Quote Fetch Failed', startTime);\n            return null;\n        }\n        if (!quote) {\n            console.error('[SSR] Quote not found:', quoteId);\n            logTiming('Quote Not Found', startTime);\n            return null;\n        }\n        if (panelsError) {\n            console.error('[SSR] Error fetching panels:', panelsError);\n        }\n        if (pricingError) {\n            console.error('[SSR] Error fetching pricing:', pricingError);\n            console.log('[SSR] Continuing without pricing data...');\n        }\n        if (feesError) {\n            console.error('[SSR] Error fetching fees:', feesError);\n        }\n        if (accessoriesError) {\n            console.error('[SSR] Error fetching accessories:', accessoriesError);\n        }\n        // Log individual query results for debugging\n        console.log(`[PERF] Quote data: ${quote ? 'OK' : 'MISSING'}`);\n        console.log(`[PERF] Panels: ${panels?.length || 0} records`);\n        console.log(`[PERF] Pricing: ${pricingData?.length || 0} records`);\n        console.log(`[PERF] Fees: ${fees?.length || 0} records`);\n        console.log(`[PERF] Accessories: ${accessories?.length || 0} records`);\n        console.log(`[PERF] Payments: ${payments?.length || 0} records`);\n        console.log(`[PERF] Company: ${tenantCompany ? 'OK' : 'MISSING'}`);\n        // Fetch machine codes for panels (for cutting list)\n        const materialIds = panels?.map((p)=>p.material_id) || [];\n        const edgeMaterialIds = panels?.flatMap((p)=>[\n                p.edge_material_a_id,\n                p.edge_material_b_id,\n                p.edge_material_c_id,\n                p.edge_material_d_id\n            ].filter(Boolean)) || [];\n        const machineCodesStartTime = performance.now();\n        const [materialMaps, edgeMaterialMaps] = await Promise.all([\n            materialIds.length > 0 ? supabaseServer.from('machine_material_map').select('material_id, machine_code').in('material_id', materialIds).eq('machine_type', 'Korpus') : Promise.resolve({\n                data: []\n            }),\n            edgeMaterialIds.length > 0 ? supabaseServer.from('machine_edge_material_map').select('edge_material_id, machine_code').in('edge_material_id', edgeMaterialIds).eq('machine_type', 'Korpus') : Promise.resolve({\n                data: []\n            })\n        ]);\n        logTiming('Machine Codes Fetch', machineCodesStartTime, `fetched ${materialMaps.data?.length || 0} material codes, ${edgeMaterialMaps.data?.length || 0} edge codes`);\n        // Create lookup maps for machine codes\n        const materialCodeMap = new Map(materialMaps.data?.map((m)=>[\n                m.material_id,\n                m.machine_code\n            ]) || []);\n        const edgeCodeMap = new Map(edgeMaterialMaps.data?.map((e)=>[\n                e.edge_material_id,\n                e.machine_code\n            ]) || []);\n        // Enrich panels with machine codes for cutting list\n        const enrichedPanels = panels?.map((panel)=>({\n                ...panel,\n                material_machine_code: materialCodeMap.get(panel.material_id) || '',\n                edge_a_code: panel.edge_material_a_id ? edgeCodeMap.get(panel.edge_material_a_id) || null : null,\n                edge_b_code: panel.edge_material_b_id ? edgeCodeMap.get(panel.edge_material_b_id) || null : null,\n                edge_c_code: panel.edge_material_c_id ? edgeCodeMap.get(panel.edge_material_c_id) || null : null,\n                edge_d_code: panel.edge_material_d_id ? edgeCodeMap.get(panel.edge_material_d_id) || null : null\n            })) || [];\n        // Transform the response to include all necessary data\n        const transformedQuote = {\n            id: quote.id,\n            quote_number: quote.quote_number,\n            order_number: quote.order_number || null,\n            status: quote.status,\n            payment_status: quote.payment_status || 'not_paid',\n            customer_id: quote.customer_id,\n            discount_percent: quote.discount_percent,\n            production_machine_id: quote.production_machine_id || null,\n            production_date: quote.production_date || null,\n            barcode: quote.barcode || null,\n            production_machine: quote.production_machines || null,\n            customer: quote.customers,\n            panels: enrichedPanels,\n            pricing: pricingData || [],\n            fees: fees || [],\n            accessories: accessories || [],\n            payments: payments || [],\n            tenant_company: tenantCompany,\n            totals: {\n                total_net: quote.total_net,\n                total_vat: quote.total_vat,\n                total_gross: quote.total_gross,\n                final_total_after_discount: quote.final_total_after_discount,\n                fees_total_net: quote.fees_total_net || 0,\n                fees_total_vat: quote.fees_total_vat || 0,\n                fees_total_gross: quote.fees_total_gross || 0,\n                accessories_total_net: quote.accessories_total_net || 0,\n                accessories_total_vat: quote.accessories_total_vat || 0,\n                accessories_total_gross: quote.accessories_total_gross || 0\n            },\n            created_at: quote.created_at,\n            updated_at: quote.updated_at\n        };\n        logTiming('Quote Fetch Total', startTime, `returned quote ${quote.quote_number} with ${panels?.length || 0} panels`);\n        console.log(`[SSR] Quote fetched successfully: ${quote.quote_number} (OPTIMIZED)`);\n        return transformedQuote;\n    } catch (error) {\n        console.error('[SSR] Error fetching quote:', error);\n        logTiming('Quote Fetch Error', startTime);\n        return null;\n    }\n}\n// Get quotes with pagination (for quotes list page)\nasync function getQuotesWithPagination(page = 1, limit = 20, searchTerm) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching quotes page ${page}, limit ${limit}, search: \"${searchTerm || 'none'}\"`);\n    try {\n        const offset = (page - 1) * limit;\n        // Build query with search if provided\n        let query = supabaseServer.from('quotes').select(`\n        id,\n        quote_number,\n        status,\n        final_total_after_discount,\n        updated_at,\n        customers!inner(\n          id,\n          name\n        )\n      `, {\n            count: 'exact'\n        }).eq('status', 'draft') // Only show draft quotes, not orders\n        .is('deleted_at', null).order('updated_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        // Apply search filter if provided\n        if (searchTerm && searchTerm.trim()) {\n            query = query.ilike('customers.name', `%${searchTerm.trim()}%`);\n        }\n        const { data: quotes, error: quotesError, count } = await query;\n        if (quotesError) {\n            console.error('[SSR] Error fetching quotes:', quotesError);\n            logTiming('Quotes Fetch Failed', startTime);\n            return {\n                quotes: [],\n                totalCount: 0,\n                totalPages: 0\n            };\n        }\n        // Transform the data to flatten customer name\n        const transformedQuotes = quotes?.map((quote)=>({\n                id: quote.id,\n                quote_number: quote.quote_number,\n                status: quote.status,\n                customer_name: quote.customers?.name || 'Unknown Customer',\n                final_total_after_discount: quote.final_total_after_discount,\n                updated_at: quote.updated_at\n            })) || [];\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        logTiming('Quotes Fetch Total', startTime, `returned ${transformedQuotes.length} quotes (page ${page}/${totalPages})`);\n        console.log(`[SSR] Quotes fetched successfully: ${transformedQuotes.length} quotes, total: ${totalCount}`);\n        return {\n            quotes: transformedQuotes,\n            totalCount,\n            totalPages,\n            currentPage: page\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching quotes:', error);\n        logTiming('Quotes Fetch Error', startTime);\n        return {\n            quotes: [],\n            totalCount: 0,\n            totalPages: 0\n        };\n    }\n}\n// Get orders with pagination (for orders list page)\nasync function getOrdersWithPagination(page = 1, limit = 20, searchTerm) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching orders page ${page}, limit ${limit}, search: \"${searchTerm || 'none'}\"`);\n    try {\n        const offset = (page - 1) * limit;\n        // If search term is provided, we need to find orders that match either customer name or material names\n        if (searchTerm && searchTerm.trim()) {\n            const trimmedSearch = searchTerm.trim();\n            // First, find materials that match the search term\n            console.log(`[SSR] Searching materials for: \"${trimmedSearch}\"`);\n            const { data: matchingMaterials, error: materialsError } = await supabaseServer.from('materials').select('id').ilike('name', `%${trimmedSearch}%`);\n            if (materialsError) {\n                console.error('[SSR] Error searching materials:', materialsError);\n            }\n            const materialIds = matchingMaterials?.map((m)=>m.id) || [];\n            console.log(`[SSR] Found ${materialIds.length} matching materials`);\n            // Then find quote IDs that have panels using these materials\n            let materialMatchIds = [];\n            if (materialIds.length > 0) {\n                console.log(`[SSR] Searching quote_panels for material IDs: ${materialIds.join(', ')}`);\n                const { data: materialMatches, error: panelsError } = await supabaseServer.from('quote_panels').select('quote_id').in('material_id', materialIds);\n                if (panelsError) {\n                    console.error('[SSR] Error searching quote_panels:', panelsError);\n                }\n                materialMatchIds = materialMatches?.map((m)=>m.quote_id) || [];\n                console.log(`[SSR] Found ${materialMatchIds.length} matching quote panels`);\n            }\n            // Build query with OR condition for customer name OR material matches\n            console.log(`[SSR] Building query with materialMatchIds: ${materialMatchIds.length} matches`);\n            let query = supabaseServer.from('quotes').select(`\n          id,\n          order_number,\n          status,\n          payment_status,\n          final_total_after_discount,\n          updated_at,\n          production_machine_id,\n          production_date,\n          barcode,\n          customers!inner(\n            id,\n            name,\n            mobile,\n            email\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `, {\n                count: 'exact'\n            }).in('status', [\n                'ordered',\n                'in_production',\n                'ready',\n                'finished',\n                'cancelled'\n            ]).is('deleted_at', null).order('updated_at', {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            // Execute two separate queries and combine results\n            console.log(`[SSR] Executing separate queries for customer and material matches...`);\n            // Query 1: Customer name matches\n            const customerQuery = supabaseServer.from('quotes').select(`\n          id,\n          order_number,\n          status,\n          payment_status,\n          final_total_after_discount,\n          updated_at,\n          production_machine_id,\n          production_date,\n          barcode,\n          customers!inner(\n            id,\n            name,\n            mobile,\n            email\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `, {\n                count: 'exact'\n            }).in('status', [\n                'ordered',\n                'in_production',\n                'ready',\n                'finished',\n                'cancelled'\n            ]).is('deleted_at', null).ilike('customers.name', `%${trimmedSearch}%`).order('updated_at', {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            // Query 2: Material matches (if any)\n            let materialQuery = null;\n            if (materialMatchIds.length > 0) {\n                materialQuery = supabaseServer.from('quotes').select(`\n            id,\n            order_number,\n            status,\n            payment_status,\n            final_total_after_discount,\n            updated_at,\n            production_machine_id,\n            production_date,\n            barcode,\n            customers!inner(\n              id,\n              name,\n              mobile,\n              email\n            ),\n            production_machines(\n              id,\n              machine_name\n            )\n          `, {\n                    count: 'exact'\n                }).in('status', [\n                    'ordered',\n                    'in_production',\n                    'ready',\n                    'finished',\n                    'cancelled'\n                ]).is('deleted_at', null).in('id', materialMatchIds).order('updated_at', {\n                    ascending: false\n                }).range(offset, offset + limit - 1);\n            }\n            // Execute both queries\n            const [customerResult, materialResult] = await Promise.all([\n                customerQuery,\n                materialQuery || Promise.resolve({\n                    data: [],\n                    error: null,\n                    count: 0\n                })\n            ]);\n            const { data: customerOrders, error: customerError, count: customerCount } = customerResult;\n            const { data: materialOrders, error: materialError, count: materialCount } = materialResult;\n            if (customerError) {\n                console.error('[SSR] Error fetching customer orders:', customerError);\n                logTiming('Orders Fetch Failed', startTime);\n                return {\n                    orders: [],\n                    totalCount: 0,\n                    totalPages: 0,\n                    currentPage: page\n                };\n            }\n            if (materialError) {\n                console.error('[SSR] Error fetching material orders:', materialError);\n                logTiming('Orders Fetch Failed', startTime);\n                return {\n                    orders: [],\n                    totalCount: 0,\n                    totalPages: 0,\n                    currentPage: page\n                };\n            }\n            // Combine and deduplicate results\n            const allOrders = [\n                ...customerOrders || [],\n                ...materialOrders || []\n            ];\n            const uniqueOrders = allOrders.filter((order, index, self)=>index === self.findIndex((o)=>o.id === order.id));\n            // Sort by updated_at descending\n            uniqueOrders.sort((a, b)=>new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n            // Apply pagination to combined results\n            const paginatedOrders = uniqueOrders.slice(0, limit);\n            const totalCount = uniqueOrders.length;\n            const totalPages = Math.ceil(totalCount / limit);\n            console.log(`[SSR] Combined results: ${uniqueOrders.length} total, ${paginatedOrders.length} on page`);\n            // Use the combined results as orders\n            const orders = paginatedOrders;\n            // Get payment totals for all orders (for payment modal)\n            const { data: paymentTotals } = await supabaseServer.from('quote_payments').select('quote_id, amount').in('quote_id', orders?.map((o)=>o.id) || []);\n            const totalPaidByOrder = (paymentTotals || []).reduce((acc, p)=>{\n                acc[p.quote_id] = (acc[p.quote_id] || 0) + p.amount;\n                return acc;\n            }, {});\n            // Transform the data\n            const transformedOrders = orders?.map((order)=>({\n                    id: order.id,\n                    order_number: order.order_number || 'N/A',\n                    status: order.status,\n                    payment_status: order.payment_status || 'not_paid',\n                    customer_name: order.customers?.name || 'Unknown Customer',\n                    customer_mobile: order.customers?.mobile || '',\n                    customer_email: order.customers?.email || '',\n                    final_total: order.final_total_after_discount || 0,\n                    total_paid: totalPaidByOrder[order.id] || 0,\n                    remaining_balance: (order.final_total_after_discount || 0) - (totalPaidByOrder[order.id] || 0),\n                    updated_at: order.updated_at,\n                    production_machine_id: order.production_machine_id || null,\n                    production_machine_name: order.production_machines?.machine_name || null,\n                    production_date: order.production_date || null,\n                    barcode: order.barcode || ''\n                })) || [];\n            return {\n                orders: transformedOrders,\n                totalCount,\n                totalPages,\n                currentPage: page\n            };\n        }\n        // No search term - regular query\n        let query = supabaseServer.from('quotes').select(`\n        id,\n        order_number,\n        status,\n        payment_status,\n        final_total_after_discount,\n        updated_at,\n        production_machine_id,\n        production_date,\n        barcode,\n        customers!inner(\n          id,\n          name,\n          mobile,\n          email\n        ),\n        production_machines(\n          id,\n          machine_name\n        )\n      `, {\n            count: 'exact'\n        }).in('status', [\n            'ordered',\n            'in_production',\n            'ready',\n            'finished',\n            'cancelled'\n        ]) // Show all order statuses including cancelled\n        .is('deleted_at', null).order('updated_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        const { data: orders, error: ordersError, count } = await query;\n        if (ordersError) {\n            console.error('[SSR] Error fetching orders:', ordersError);\n            console.error('[SSR] Error details:', JSON.stringify(ordersError, null, 2));\n            logTiming('Orders Fetch Failed', startTime);\n            return {\n                orders: [],\n                totalCount: 0,\n                totalPages: 0,\n                currentPage: page\n            };\n        }\n        // Get payment totals for all orders (for payment modal)\n        const { data: paymentTotals } = await supabaseServer.from('quote_payments').select('quote_id, amount').in('quote_id', orders?.map((o)=>o.id) || []);\n        const totalPaidByOrder = (paymentTotals || []).reduce((acc, p)=>{\n            acc[p.quote_id] = (acc[p.quote_id] || 0) + p.amount;\n            return acc;\n        }, {});\n        // Transform the data\n        const transformedOrders = orders?.map((order)=>({\n                id: order.id,\n                order_number: order.order_number || 'N/A',\n                status: order.status,\n                payment_status: order.payment_status || 'not_paid',\n                customer_name: order.customers?.name || 'Unknown Customer',\n                customer_mobile: order.customers?.mobile || '',\n                customer_email: order.customers?.email || '',\n                final_total: order.final_total_after_discount || 0,\n                total_paid: totalPaidByOrder[order.id] || 0,\n                remaining_balance: (order.final_total_after_discount || 0) - (totalPaidByOrder[order.id] || 0),\n                updated_at: order.updated_at,\n                production_machine_id: order.production_machine_id || null,\n                production_machine_name: order.production_machines?.machine_name || null,\n                production_date: order.production_date || null,\n                barcode: order.barcode || ''\n            })) || [];\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        logTiming('Orders Fetch Total', startTime, `returned ${transformedOrders.length} orders (page ${page}/${totalPages})`);\n        console.log(`[SSR] Orders fetched successfully: ${transformedOrders.length} orders, total: ${totalCount}`);\n        return {\n            orders: transformedOrders,\n            totalCount,\n            totalPages,\n            currentPage: page\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching orders:', error);\n        console.error('[SSR] Error details:', JSON.stringify(error, null, 2));\n        console.error('[SSR] Error message:', error instanceof Error ? error.message : 'Unknown error');\n        console.error('[SSR] Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n        logTiming('Orders Fetch Error', startTime);\n        return {\n            orders: [],\n            totalCount: 0,\n            totalPages: 0,\n            currentPage: page\n        };\n    }\n}\n// Accessories SSR functions\nasync function getAllAccessories() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Accessories DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching accessories:', error);\n        return [];\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((accessory)=>({\n            ...accessory,\n            vat_name: accessory.vat?.name || '',\n            vat_percent: accessory.vat?.kulcs || 0,\n            currency_name: accessory.currencies?.name || '',\n            unit_name: accessory.units?.name || '',\n            unit_shortform: accessory.units?.shortform || '',\n            partner_name: accessory.partners?.name || '',\n            vat_amount: accessory.net_price * (accessory.vat?.kulcs || 0) / 100,\n            gross_price: accessory.net_price + accessory.net_price * (accessory.vat?.kulcs || 0) / 100\n        })) || [];\n    logTiming('Accessories Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\n// Get accessories with pagination\nasync function getAccessoriesWithPagination(page = 1, limit = 100) {\n    const startTime = performance.now();\n    const offset = (page - 1) * limit;\n    // Get total count\n    const { count } = await supabaseServer.from('accessories').select('*', {\n        count: 'exact',\n        head: true\n    }).is('deleted_at', null);\n    // Get paginated data\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    }).range(offset, offset + limit - 1);\n    const queryTime = performance.now();\n    logTiming('Accessories Paginated DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching accessories:', error);\n        return {\n            accessories: [],\n            totalCount: 0,\n            totalPages: 0,\n            currentPage: page\n        };\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((accessory)=>({\n            ...accessory,\n            vat_name: accessory.vat?.name || '',\n            vat_percent: accessory.vat?.kulcs || 0,\n            currency_name: accessory.currencies?.name || '',\n            unit_name: accessory.units?.name || '',\n            unit_shortform: accessory.units?.shortform || '',\n            partner_name: accessory.partners?.name || '',\n            vat_amount: accessory.net_price * (accessory.vat?.kulcs || 0) / 100,\n            gross_price: accessory.net_price + accessory.net_price * (accessory.vat?.kulcs || 0) / 100\n        })) || [];\n    const totalCount = count || 0;\n    const totalPages = Math.ceil(totalCount / limit);\n    logTiming('Accessories Paginated Total', startTime, `returned ${transformedData.length} of ${totalCount} records`);\n    return {\n        accessories: transformedData,\n        totalCount,\n        totalPages,\n        currentPage: page\n    };\n}\nasync function getAccessoryById(id) {\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching accessory:', error);\n        return null;\n    }\n    // Transform the data to include calculated fields\n    const transformedData = {\n        ...data,\n        vat_name: data.vat?.name || '',\n        vat_percent: data.vat?.kulcs || 0,\n        currency_name: data.currencies?.name || '',\n        unit_name: data.units?.name || '',\n        unit_shortform: data.units?.shortform || '',\n        partner_name: data.partners?.name || '',\n        vat_amount: data.net_price * (data.vat?.kulcs || 0) / 100,\n        gross_price: data.net_price + data.net_price * (data.vat?.kulcs || 0) / 100\n    };\n    return transformedData;\n}\n// Workers functions\nasync function getAllWorkers() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('workers').select('id, name, nickname, mobile, color, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Workers DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching workers:', error);\n        return [];\n    }\n    logTiming('Workers Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getWorkerById(id) {\n    const { data, error } = await supabaseServer.from('workers').select('id, name, nickname, mobile, color, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching worker:', error);\n        return null;\n    }\n    return data;\n}\n// Shop Orders functions\nasync function getAllShopOrders() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('shop_orders').select(`\n      id,\n      order_number,\n      worker_id,\n      customer_name,\n      customer_email,\n      customer_mobile,\n      customer_discount,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      status,\n      created_at,\n      updated_at,\n      workers(name, nickname),\n      shop_order_items(\n        id,\n        product_name,\n        sku,\n        type,\n        quantity,\n        status,\n        base_price,\n        multiplier,\n        vat_id,\n        currency_id,\n        units(name, shortform),\n        partners(name)\n      )\n    `).is('deleted_at', null).order('created_at', {\n        ascending: false\n    });\n    const queryTime = performance.now();\n    logTiming('getAllShopOrders Query', startTime, `Found ${data?.length || 0} orders`);\n    if (error) {\n        console.error('Error fetching shop orders:', error);\n        return [];\n    }\n    // Transform data for better performance\n    const transformedOrders = data?.map((order)=>({\n            id: order.id,\n            order_number: order.order_number,\n            worker_id: order.worker_id,\n            worker_name: order.workers?.name || '',\n            worker_nickname: order.workers?.nickname || '',\n            customer_name: order.customer_name,\n            customer_email: order.customer_email,\n            customer_mobile: order.customer_mobile,\n            customer_discount: order.customer_discount,\n            billing_name: order.billing_name,\n            billing_country: order.billing_country,\n            billing_city: order.billing_city,\n            billing_postal_code: order.billing_postal_code,\n            billing_street: order.billing_street,\n            billing_house_number: order.billing_house_number,\n            billing_tax_number: order.billing_tax_number,\n            billing_company_reg_number: order.billing_company_reg_number,\n            status: order.status,\n            created_at: order.created_at,\n            updated_at: order.updated_at,\n            items_count: order.shop_order_items?.length || 0,\n            items: order.shop_order_items?.map((item)=>({\n                    id: item.id,\n                    product_name: item.product_name,\n                    sku: item.sku,\n                    type: item.type,\n                    quantity: item.quantity,\n                    status: item.status,\n                    base_price: item.base_price,\n                    multiplier: item.multiplier,\n                    vat_id: item.vat_id,\n                    currency_id: item.currency_id,\n                    unit_name: item.units?.name || '',\n                    unit_shortform: item.units?.shortform || '',\n                    partner_name: item.partners?.name || ''\n                })) || []\n        })) || [];\n    logTiming('getAllShopOrders Total', startTime, `Transformed ${transformedOrders.length} orders`);\n    return transformedOrders;\n}\n// Get single shop order by ID with all data (for detail page)\nasync function getShopOrderById(orderId) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching shop order ${orderId}`);\n    try {\n        // Fetch all data in parallel\n        const parallelStartTime = performance.now();\n        const [orderResult, tenantCompany] = await Promise.all([\n            // 1. Shop order with worker data\n            supabaseServer.from('shop_orders').select(`\n          id,\n          order_number,\n          worker_id,\n          customer_name,\n          customer_email,\n          customer_mobile,\n          customer_discount,\n          billing_name,\n          billing_country,\n          billing_city,\n          billing_postal_code,\n          billing_street,\n          billing_house_number,\n          billing_tax_number,\n          billing_company_reg_number,\n          status,\n          created_at,\n          updated_at,\n          workers(\n            id,\n            name,\n            nickname,\n            mobile,\n            color\n          )\n        `).eq('id', orderId).is('deleted_at', null).single(),\n            // 2. Tenant company\n            getTenantCompany()\n        ]);\n        // 3. Shop order items with related data\n        const { data: itemsData, error: itemsError } = await supabaseServer.from('shop_order_items').select(`\n        id,\n        product_name,\n        sku,\n        type,\n        base_price,\n        multiplier,\n        quantity,\n        megjegyzes,\n        status,\n        created_at,\n        units(\n          id,\n          name,\n          shortform\n        ),\n        partners(\n          id,\n          name\n        ),\n        vat(\n          id,\n          kulcs\n        ),\n        currencies(\n          id,\n          name\n        )\n      `).eq('order_id', orderId).is('deleted_at', null).order('created_at', {\n            ascending: true\n        });\n        logTiming('Parallel Queries Complete', parallelStartTime, 'all queries executed in parallel');\n        // Extract data and errors from results\n        const { data: order, error: orderError } = orderResult;\n        // Handle errors\n        if (orderError) {\n            console.error('[SSR] Error fetching shop order:', orderError);\n            logTiming('Shop Order Fetch Failed', startTime);\n            return null;\n        }\n        if (itemsError) {\n            console.error('[SSR] Error fetching shop order items:', itemsError);\n            logTiming('Shop Order Items Fetch Failed', startTime);\n            return null;\n        }\n        if (!order) {\n            console.error('[SSR] Shop order not found:', orderId);\n            logTiming('Shop Order Not Found', startTime);\n            return null;\n        }\n        // Calculate totals\n        const items = itemsData || [];\n        const totals = items.reduce((acc, item)=>{\n            const netPrice = item.base_price * item.multiplier;\n            const grossPrice = netPrice * (1 + (item.vat?.kulcs || 0) / 100);\n            const itemTotal = grossPrice * item.quantity;\n            const discountAmount = itemTotal * (order.customer_discount / 100);\n            acc.total_net += netPrice * item.quantity;\n            acc.total_gross += itemTotal;\n            acc.final_total += itemTotal - discountAmount;\n            acc.discount_amount += discountAmount;\n            return acc;\n        }, {\n            total_net: 0,\n            total_gross: 0,\n            final_total: 0,\n            discount_amount: 0\n        });\n        // Transform the response\n        const transformedOrder = {\n            id: order.id,\n            order_number: order.order_number,\n            worker_id: order.worker_id,\n            worker: order.workers,\n            customer_name: order.customer_name,\n            customer_email: order.customer_email,\n            customer_mobile: order.customer_mobile,\n            customer_discount: order.customer_discount,\n            billing_name: order.billing_name,\n            billing_country: order.billing_country,\n            billing_city: order.billing_city,\n            billing_postal_code: order.billing_postal_code,\n            billing_street: order.billing_street,\n            billing_house_number: order.billing_house_number,\n            billing_tax_number: order.billing_tax_number,\n            billing_company_reg_number: order.billing_company_reg_number,\n            status: order.status,\n            items: items,\n            tenant_company: tenantCompany,\n            totals: totals,\n            created_at: order.created_at,\n            updated_at: order.updated_at\n        };\n        logTiming('Shop Order Fetch Total', startTime, `returned order ${order.order_number} with ${items.length} items`);\n        console.log(`[SSR] Shop order fetched successfully: ${order.order_number}`);\n        return transformedOrder;\n    } catch (error) {\n        console.error('[SSR] Error fetching shop order:', error);\n        logTiming('Shop Order Fetch Error', startTime);\n        return null;\n    }\n}\n// Fetch all shop order items for supplier orders page\nasync function getAllShopOrderItems(page = 1, limit = 50, search = '', status = '', partnerId = '') {\n    if (!checkSupabaseConfig()) return {\n        items: [],\n        totalCount: 0,\n        totalPages: 0\n    };\n    const startTime = performance.now();\n    const offset = (page - 1) * limit;\n    try {\n        console.log(`[SSR] Fetching shop order items page ${page}, limit ${limit}, search: \"${search}\", status: \"${status}\", partner: \"${partnerId}\"`);\n        // Build the query with joins to get all related data\n        let query = supabaseServer.from('shop_order_items').select(`\n        id,\n        product_name,\n        sku,\n        quantity,\n        base_price,\n        multiplier,\n        megjegyzes,\n        status,\n        created_at,\n        updated_at,\n        order_id,\n        units_id,\n        partner_id,\n        vat_id,\n        shop_orders!inner (\n          id,\n          customer_name,\n          order_number\n        ),\n        units (\n          id,\n          name,\n          shortform\n        ),\n        partners (\n          id,\n          name\n        ),\n        vat (\n          id,\n          name,\n          kulcs\n        )\n      `, {\n            count: 'exact'\n        }).is('shop_orders.deleted_at', null);\n        // Apply filters\n        if (search && search.length >= 2) {\n            query = query.or(`product_name.ilike.%${search}%,sku.ilike.%${search}%,shop_orders.customer_name.ilike.%${search}%`);\n        }\n        if (status) {\n            query = query.eq('status', status);\n        }\n        if (partnerId) {\n            query = query.eq('partner_id', partnerId);\n        }\n        const { data, error, count } = await query.order('created_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        logTiming('Shop Order Items DB Query', startTime, `Found ${data?.length || 0} items`);\n        if (error) {\n            console.error('[SSR] Error fetching shop order items:', error);\n            return {\n                items: [],\n                totalCount: 0,\n                totalPages: 0\n            };\n        }\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        // Transform the data to include calculated fields\n        const items = data?.map((item)=>{\n            const grossUnitPrice = Math.round((item.base_price || 0) * (item.multiplier || 1) * (1 + (item.vat?.kulcs || 0) / 100));\n            return {\n                id: item.id,\n                product_name: item.product_name,\n                sku: item.sku,\n                quantity: item.quantity,\n                megjegyzes: item.megjegyzes,\n                status: item.status,\n                created_at: item.created_at,\n                updated_at: item.updated_at,\n                order_id: item.order_id,\n                customer_name: item.shop_orders?.customer_name,\n                order_number: item.shop_orders?.order_number,\n                unit_name: item.units?.name,\n                unit_shortform: item.units?.shortform,\n                partner_name: item.partners?.name,\n                partner_id: item.partner_id,\n                vat_name: item.vat?.name,\n                vat_percent: item.vat?.kulcs,\n                base_price: item.base_price,\n                multiplier: item.multiplier,\n                gross_unit_price: grossUnitPrice,\n                gross_total: Math.round(grossUnitPrice * item.quantity)\n            };\n        }) || [];\n        logTiming('Shop Order Items Total', startTime, `Transformed ${items.length} items`);\n        console.log(`[SSR] Shop order items fetched successfully: ${items.length} items, total: ${totalCount}`);\n        return {\n            items,\n            totalCount,\n            totalPages,\n            currentPage: page,\n            limit\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching shop order items:', error);\n        logTiming('Shop Order Items Fetch Error', startTime);\n        return {\n            items: [],\n            totalCount: 0,\n            totalPages: 0\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dXJjZXMiOlsiL1ZvbHVtZXMvVDcvZXJwX3R1cmlub3ZhX25ldy9zcmMvbGliL3N1cGFiYXNlLXNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXG5cbi8vIFBlcmZvcm1hbmNlIHRpbWluZyB1dGlsaXRpZXNcbmNvbnN0IGlzRGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuXG5mdW5jdGlvbiBsb2dUaW1pbmcob3BlcmF0aW9uOiBzdHJpbmcsIHN0YXJ0VGltZTogbnVtYmVyLCBhZGRpdGlvbmFsSW5mbz86IHN0cmluZykge1xuICBpZiAoaXNEZXYpIHtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lXG4gICAgY29uc29sZS5sb2coYFtQRVJGXSAke29wZXJhdGlvbn06ICR7ZHVyYXRpb24udG9GaXhlZCgyKX1tcyR7YWRkaXRpb25hbEluZm8gPyBgICgke2FkZGl0aW9uYWxJbmZvfSlgIDogJyd9YClcbiAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgU3VwYWJhc2UgaXMgY29uZmlndXJlZFxuZnVuY3Rpb24gY2hlY2tTdXBhYmFzZUNvbmZpZygpIHtcbiAgaWYgKCFzdXBhYmFzZVNlcnZlcikge1xuICAgIGNvbnNvbGUud2FybignU3VwYWJhc2Ugbm90IGNvbmZpZ3VyZWQgZm9yIHNlcnZlci1zaWRlIG9wZXJhdGlvbnMnKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8vIFNlcnZlci1zaWRlIFN1cGFiYXNlIGNsaWVudCB3aXRoIHNlcnZpY2Ugcm9sZSBrZXkgZm9yIFNTUlxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkxcbmNvbnN0IHN1cGFiYXNlU2VydmljZUtleSA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVlcblxuLy8gQ2hlY2sgaWYgU3VwYWJhc2UgaXMgY29uZmlndXJlZFxuY29uc3QgaXNTdXBhYmFzZUNvbmZpZ3VyZWQgPSBzdXBhYmFzZVVybCAmJiBzdXBhYmFzZVNlcnZpY2VLZXlcblxuaWYgKCFpc1N1cGFiYXNlQ29uZmlndXJlZCkge1xuICBjb25zb2xlLndhcm4oJ1N1cGFiYXNlIG5vdCBjb25maWd1cmVkIGZvciBzZXJ2ZXItc2lkZSBvcGVyYXRpb25zLiBTb21lIGZlYXR1cmVzIG1heSBub3Qgd29yay4nKVxufVxuXG4vLyBDcmVhdGUgYSBtb2NrIFN1cGFiYXNlIGNsaWVudCBmb3IgYnVpbGQgdGltZVxuY29uc3QgY3JlYXRlTW9ja1N1cGFiYXNlQ2xpZW50ID0gKCkgPT4gKHtcbiAgZnJvbTogKCkgPT4gKHtcbiAgICBzZWxlY3Q6ICgpID0+ICh7XG4gICAgICBlcTogKCkgPT4gKHtcbiAgICAgICAgaXM6ICgpID0+ICh7XG4gICAgICAgICAgc2luZ2xlOiAoKSA9PiAoeyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9KVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBpczogKCkgPT4gKHtcbiAgICAgICAgb3JkZXI6ICgpID0+ICh7IGRhdGE6IFtdLCBlcnJvcjogbnVsbCB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlU2VydmVyID0gaXNTdXBhYmFzZUNvbmZpZ3VyZWQgPyBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwhLCBzdXBhYmFzZVNlcnZpY2VLZXkhLCB7XG4gIGF1dGg6IHtcbiAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2UsIC8vIERvbid0IHBlcnNpc3Qgc2Vzc2lvbiBvbiBzZXJ2ZXJcbiAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSwgLy8gTm8gdG9rZW4gcmVmcmVzaCBuZWVkZWQgb24gc2VydmVyXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiBmYWxzZSAvLyBObyBVUkwgc2Vzc2lvbiBkZXRlY3Rpb24gb24gc2VydmVyXG4gIH0sXG4gIGdsb2JhbDoge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICdYLUNsaWVudC1JbmZvJzogJ25leHRqcy1zZXJ2ZXInLFxuICAgIH0sXG4gIH0sXG4gIHJlYWx0aW1lOiB7XG4gICAgZW5hYmxlZDogZmFsc2UsIC8vIERpc2FibGUgcmVhbHRpbWUgZm9yIHNlcnZlci1zaWRlIHBlcmZvcm1hbmNlXG4gIH0sXG59KSA6IGNyZWF0ZU1vY2tTdXBhYmFzZUNsaWVudCgpXG5cbi8vIFNlcnZlci1zaWRlIG9wdGltaXplZCBxdWVyeSBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRCcmFuZEJ5SWQoaWQ6IHN0cmluZykge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdicmFuZHMnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBjb21tZW50LCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0JylcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAuc2luZ2xlKClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBicmFuZDonLCBlcnJvcilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGRhdGFcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbEJyYW5kcygpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ2JyYW5kcycpXG4gICAgLnNlbGVjdCgnaWQsIG5hbWUsIGNvbW1lbnQsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ0JyYW5kcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYnJhbmRzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgbG9nVGltaW5nKCdCcmFuZHMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuLy8gTWF0ZXJpYWxzIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYXRlcmlhbEJ5SWQoaWQ6IHN0cmluZykge1xuICAvLyBGZXRjaCBtYXRlcmlhbCBmcm9tIG1hdGVyaWFscyB0YWJsZSB3aXRoIHByaWNpbmcgZGF0YVxuICBjb25zdCB7IGRhdGE6IG1hdGVyaWFsRGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hdGVyaWFscycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBsZW5ndGhfbW0sXG4gICAgICB3aWR0aF9tbSxcbiAgICAgIHRoaWNrbmVzc19tbSxcbiAgICAgIGdyYWluX2RpcmVjdGlvbixcbiAgICAgIG9uX3N0b2NrLFxuICAgICAgYWN0aXZlLFxuICAgICAgaW1hZ2VfdXJsLFxuICAgICAgYnJhbmRfaWQsXG4gICAgICBiYXNlX3ByaWNlLFxuICAgICAgbXVsdGlwbGllcixcbiAgICAgIHByaWNlX3Blcl9zcW0sXG4gICAgICBwYXJ0bmVyc19pZCxcbiAgICAgIHVuaXRzX2lkLFxuICAgICAgY3VycmVuY3lfaWQsXG4gICAgICB2YXRfaWQsXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdCxcbiAgICAgIGJyYW5kcyhpZCwgbmFtZSksXG4gICAgICBjdXJyZW5jaWVzKGlkLCBuYW1lKSxcbiAgICAgIHZhdChpZCwgbmFtZSwga3VsY3MpXG4gICAgYClcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWF0ZXJpYWw6JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIEZldGNoIHNldHRpbmdzIGZyb20gbWF0ZXJpYWxfc2V0dGluZ3NcbiAgY29uc3QgeyBkYXRhOiBzZXR0aW5nc0RhdGEgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hdGVyaWFsX3NldHRpbmdzJylcbiAgICAuc2VsZWN0KCdrZXJmX21tLCB0cmltX3RvcF9tbSwgdHJpbV9yaWdodF9tbSwgdHJpbV9ib3R0b21fbW0sIHRyaW1fbGVmdF9tbSwgcm90YXRhYmxlLCB3YXN0ZV9tdWx0aSwgdXNhZ2VfbGltaXQnKVxuICAgIC5lcSgnbWF0ZXJpYWxfaWQnLCBpZClcbiAgICAuc2luZ2xlKClcblxuICAvLyBGZXRjaCBtYWNoaW5lIGNvZGUgZnJvbSBtYWNoaW5lX21hdGVyaWFsX21hcFxuICBjb25zdCB7IGRhdGE6IG1hY2hpbmVEYXRhIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdtYWNoaW5lX21hdGVyaWFsX21hcCcpXG4gICAgLnNlbGVjdCgnbWFjaGluZV9jb2RlJylcbiAgICAuZXEoJ21hdGVyaWFsX2lkJywgaWQpXG4gICAgLmVxKCdtYWNoaW5lX3R5cGUnLCAnS29ycHVzJylcbiAgICAuc2luZ2xlKClcblxuICAvLyBUcmFuc2Zvcm0gdGhlIGRhdGEgdG8gbWF0Y2ggdGhlIGV4cGVjdGVkIGZvcm1hdFxuICByZXR1cm4ge1xuICAgIGlkOiBtYXRlcmlhbERhdGEuaWQsXG4gICAgbmFtZTogbWF0ZXJpYWxEYXRhLm5hbWUgfHwgYE1hdGVyaWFsICR7bWF0ZXJpYWxEYXRhLmlkfWAsXG4gICAgbGVuZ3RoX21tOiBtYXRlcmlhbERhdGEubGVuZ3RoX21tIHx8IDI4MDAsXG4gICAgd2lkdGhfbW06IG1hdGVyaWFsRGF0YS53aWR0aF9tbSB8fCAyMDcwLFxuICAgIHRoaWNrbmVzc19tbTogbWF0ZXJpYWxEYXRhLnRoaWNrbmVzc19tbSB8fCAxOCxcbiAgICBncmFpbl9kaXJlY3Rpb246IEJvb2xlYW4obWF0ZXJpYWxEYXRhLmdyYWluX2RpcmVjdGlvbiksXG4gICAgb25fc3RvY2s6IG1hdGVyaWFsRGF0YS5vbl9zdG9jayAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXRlcmlhbERhdGEub25fc3RvY2spIDogdHJ1ZSxcbiAgICBhY3RpdmU6IG1hdGVyaWFsRGF0YS5hY3RpdmUgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWF0ZXJpYWxEYXRhLmFjdGl2ZSkgOiB0cnVlLFxuICAgIGltYWdlX3VybDogbWF0ZXJpYWxEYXRhLmltYWdlX3VybCB8fCBudWxsLFxuICAgIGJyYW5kX2lkOiBtYXRlcmlhbERhdGEuYnJhbmRfaWQgfHwgJycsXG4gICAgYnJhbmRfbmFtZTogbWF0ZXJpYWxEYXRhLmJyYW5kcz8ubmFtZSB8fCAnVW5rbm93bicsXG4gICAga2VyZl9tbTogc2V0dGluZ3NEYXRhPy5rZXJmX21tIHx8IDMsXG4gICAgdHJpbV90b3BfbW06IHNldHRpbmdzRGF0YT8udHJpbV90b3BfbW0gfHwgMCxcbiAgICB0cmltX3JpZ2h0X21tOiBzZXR0aW5nc0RhdGE/LnRyaW1fcmlnaHRfbW0gfHwgMCxcbiAgICB0cmltX2JvdHRvbV9tbTogc2V0dGluZ3NEYXRhPy50cmltX2JvdHRvbV9tbSB8fCAwLFxuICAgIHRyaW1fbGVmdF9tbTogc2V0dGluZ3NEYXRhPy50cmltX2xlZnRfbW0gfHwgMCxcbiAgICByb3RhdGFibGU6IHNldHRpbmdzRGF0YT8ucm90YXRhYmxlICE9PSBmYWxzZSxcbiAgICB3YXN0ZV9tdWx0aTogc2V0dGluZ3NEYXRhPy53YXN0ZV9tdWx0aSB8fCAxLjAsXG4gICAgdXNhZ2VfbGltaXQ6IHNldHRpbmdzRGF0YT8udXNhZ2VfbGltaXQgfHwgMC42NSxcbiAgICBtYWNoaW5lX2NvZGU6IG1hY2hpbmVEYXRhPy5tYWNoaW5lX2NvZGUgfHwgJycsXG4gICAgYmFzZV9wcmljZTogbWF0ZXJpYWxEYXRhLmJhc2VfcHJpY2UgfHwgMCxcbiAgICBtdWx0aXBsaWVyOiBtYXRlcmlhbERhdGEubXVsdGlwbGllciB8fCAxLjM4LFxuICAgIHByaWNlX3Blcl9zcW06IG1hdGVyaWFsRGF0YS5wcmljZV9wZXJfc3FtIHx8IDAsXG4gICAgcGFydG5lcnNfaWQ6IG1hdGVyaWFsRGF0YS5wYXJ0bmVyc19pZCB8fCBudWxsLFxuICAgIHVuaXRzX2lkOiBtYXRlcmlhbERhdGEudW5pdHNfaWQgfHwgbnVsbCxcbiAgICBjdXJyZW5jeV9pZDogbWF0ZXJpYWxEYXRhLmN1cnJlbmN5X2lkIHx8IG51bGwsXG4gICAgdmF0X2lkOiBtYXRlcmlhbERhdGEudmF0X2lkIHx8IG51bGwsXG4gICAgY3VycmVuY2llczogbWF0ZXJpYWxEYXRhLmN1cnJlbmNpZXMgfHwgbnVsbCxcbiAgICB2YXQ6IG1hdGVyaWFsRGF0YS52YXQgfHwgbnVsbCxcbiAgICBjcmVhdGVkX2F0OiBtYXRlcmlhbERhdGEuY3JlYXRlZF9hdCxcbiAgICB1cGRhdGVkX2F0OiBtYXRlcmlhbERhdGEudXBkYXRlZF9hdFxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxNYXRlcmlhbHMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdtYXRlcmlhbHNfd2l0aF9zZXR0aW5ncycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCwgXG4gICAgICBtYXRlcmlhbF9uYW1lLCBcbiAgICAgIGxlbmd0aF9tbSwgXG4gICAgICB3aWR0aF9tbSwgXG4gICAgICB0aGlja25lc3NfbW0sIFxuICAgICAgZ3JhaW5fZGlyZWN0aW9uLCBcbiAgICAgIG9uX3N0b2NrLFxuICAgICAgaW1hZ2VfdXJsLCBcbiAgICAgIGJyYW5kX25hbWUsXG4gICAgICBrZXJmX21tLCBcbiAgICAgIHRyaW1fdG9wX21tLCBcbiAgICAgIHRyaW1fcmlnaHRfbW0sIFxuICAgICAgdHJpbV9ib3R0b21fbW0sIFxuICAgICAgdHJpbV9sZWZ0X21tLCBcbiAgICAgIHJvdGF0YWJsZSwgXG4gICAgICB3YXN0ZV9tdWx0aSwgXG4gICAgICB1c2FnZV9saW1pdCxcbiAgICAgIGNyZWF0ZWRfYXQsIFxuICAgICAgdXBkYXRlZF9hdFxuICAgIGApXG4gICAgLm9yZGVyKCdtYXRlcmlhbF9uYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ01hdGVyaWFscyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWF0ZXJpYWxzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLy8gRmV0Y2ggcHJpY2luZyBkYXRhIGZyb20gbWF0ZXJpYWxzIHRhYmxlXG4gIGNvbnN0IG1hdGVyaWFsSWRzID0gKGRhdGEgfHwgW10pLm1hcChtID0+IG0uaWQpXG4gIGNvbnN0IHsgZGF0YTogcHJpY2luZ0RhdGEgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hdGVyaWFscycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCxcbiAgICAgIHByaWNlX3Blcl9zcW0sXG4gICAgICBhY3RpdmUsXG4gICAgICB2YXQoa3VsY3MpLFxuICAgICAgY3VycmVuY2llcyhuYW1lKVxuICAgIGApXG4gICAgLmluKCdpZCcsIG1hdGVyaWFsSWRzKVxuXG4gIC8vIENyZWF0ZSBwcmljaW5nIG1hcCBmb3IgcXVpY2sgbG9va3VwXG4gIGNvbnN0IHByaWNpbmdNYXAgPSBuZXcgTWFwKFxuICAgIChwcmljaW5nRGF0YSB8fCBbXSkubWFwKHAgPT4gW1xuICAgICAgcC5pZCwgXG4gICAgICB7IFxuICAgICAgICBwcmljZV9wZXJfc3FtOiBwLnByaWNlX3Blcl9zcW0gfHwgMCwgXG4gICAgICAgIHZhdF9wZXJjZW50OiBwLnZhdD8ua3VsY3MgfHwgMCxcbiAgICAgICAgY3VycmVuY3k6IHAuY3VycmVuY2llcz8ubmFtZSB8fCAnSFVGJyxcbiAgICAgICAgYWN0aXZlOiBwLmFjdGl2ZSAhPT0gdW5kZWZpbmVkID8gcC5hY3RpdmUgOiB0cnVlXG4gICAgICB9XG4gICAgXSlcbiAgKVxuXG4gIC8vIFRyYW5zZm9ybSB0aGUgZGF0YSB0byBtYXRjaCB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IChkYXRhIHx8IFtdKS5tYXAobWF0ZXJpYWwgPT4ge1xuICAgIGNvbnN0IHByaWNpbmcgPSBwcmljaW5nTWFwLmdldChtYXRlcmlhbC5pZCkgfHwgeyBwcmljZV9wZXJfc3FtOiAwLCB2YXRfcGVyY2VudDogMCwgY3VycmVuY3k6ICdIVUYnLCBhY3RpdmU6IHRydWUgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBpZDogbWF0ZXJpYWwuaWQsXG4gICAgICBuYW1lOiBtYXRlcmlhbC5tYXRlcmlhbF9uYW1lIHx8IGBNYXRlcmlhbCAke21hdGVyaWFsLmlkfWAsXG4gICAgICBsZW5ndGhfbW06IG1hdGVyaWFsLmxlbmd0aF9tbSB8fCAyODAwLFxuICAgICAgd2lkdGhfbW06IG1hdGVyaWFsLndpZHRoX21tIHx8IDIwNzAsXG4gICAgICB0aGlja25lc3NfbW06IG1hdGVyaWFsLnRoaWNrbmVzc19tbSB8fCAxOCxcbiAgICAgIGdyYWluX2RpcmVjdGlvbjogQm9vbGVhbihtYXRlcmlhbC5ncmFpbl9kaXJlY3Rpb24pLFxuICAgICAgb25fc3RvY2s6IG1hdGVyaWFsLm9uX3N0b2NrICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hdGVyaWFsLm9uX3N0b2NrKSA6IHRydWUsXG4gICAgICBhY3RpdmU6IHByaWNpbmcuYWN0aXZlICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKHByaWNpbmcuYWN0aXZlKSA6IHRydWUsXG4gICAgICBpbWFnZV91cmw6IG1hdGVyaWFsLmltYWdlX3VybCB8fCBudWxsLFxuICAgICAgYnJhbmRfaWQ6ICcnLCAvLyBGb3IgbGlzdCB2aWV3LCB3ZSBkb24ndCBuZWVkIGJyYW5kX2lkXG4gICAgICBicmFuZF9uYW1lOiBtYXRlcmlhbC5icmFuZF9uYW1lIHx8ICdVbmtub3duJyxcbiAgICAgIGtlcmZfbW06IG1hdGVyaWFsLmtlcmZfbW0gfHwgMyxcbiAgICAgIHRyaW1fdG9wX21tOiBtYXRlcmlhbC50cmltX3RvcF9tbSB8fCAwLFxuICAgICAgdHJpbV9yaWdodF9tbTogbWF0ZXJpYWwudHJpbV9yaWdodF9tbSB8fCAwLFxuICAgICAgdHJpbV9ib3R0b21fbW06IG1hdGVyaWFsLnRyaW1fYm90dG9tX21tIHx8IDAsXG4gICAgICB0cmltX2xlZnRfbW06IG1hdGVyaWFsLnRyaW1fbGVmdF9tbSB8fCAwLFxuICAgICAgcm90YXRhYmxlOiBtYXRlcmlhbC5yb3RhdGFibGUgIT09IGZhbHNlLFxuICAgICAgd2FzdGVfbXVsdGk6IG1hdGVyaWFsLndhc3RlX211bHRpIHx8IDEuMCxcbiAgICAgIHVzYWdlX2xpbWl0OiBtYXRlcmlhbC51c2FnZV9saW1pdCAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLnVzYWdlX2xpbWl0ICE9PSBudWxsID8gbWF0ZXJpYWwudXNhZ2VfbGltaXQgOiAwLjY1LFxuICAgICAgbWFjaGluZV9jb2RlOiAnJywgLy8gRm9yIGxpc3Qgdmlldywgd2UgZG9uJ3QgbmVlZCBtYWNoaW5lX2NvZGVcbiAgICAgIHByaWNlX3Blcl9zcW06IHByaWNpbmcucHJpY2VfcGVyX3NxbSxcbiAgICAgIHZhdF9wZXJjZW50OiBwcmljaW5nLnZhdF9wZXJjZW50LFxuICAgICAgY3VycmVuY3k6IHByaWNpbmcuY3VycmVuY3ksXG4gICAgICBjcmVhdGVkX2F0OiBtYXRlcmlhbC5jcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdDogbWF0ZXJpYWwudXBkYXRlZF9hdFxuICAgIH1cbiAgfSlcblxuICBsb2dUaW1pbmcoJ01hdGVyaWFscyBUb3RhbCcsIHN0YXJ0VGltZSwgYHRyYW5zZm9ybWVkICR7dHJhbnNmb3JtZWREYXRhLmxlbmd0aH0gcmVjb3Jkc2ApXG4gIHJldHVybiB0cmFuc2Zvcm1lZERhdGFcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbEJyYW5kc0Zvck1hdGVyaWFscygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnYnJhbmRzJylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwgY29tbWVudCwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGJyYW5kcyBmb3IgbWF0ZXJpYWxzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuLy8gVW5pdHMgU1NSIGZ1bmN0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVuaXRCeUlkKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgndW5pdHMnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBzaG9ydGZvcm0sIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5lcSgnaWQnLCBpZClcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5zaW5nbGUoKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHVuaXQ6JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxVbml0cygpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3VuaXRzJylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwgc2hvcnRmb3JtLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0JylcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5vcmRlcignbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG5cbiAgY29uc3QgcXVlcnlUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgbG9nVGltaW5nKCdVbml0cyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdW5pdHM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBsb2dUaW1pbmcoJ1VuaXRzIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG4gIHJldHVybiBkYXRhIHx8IFtdXG59XG5cbi8vIFByb2R1Y3Rpb24gTWFjaGluZXMgU1NSIGZ1bmN0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbFByb2R1Y3Rpb25NYWNoaW5lcygpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3Byb2R1Y3Rpb25fbWFjaGluZXMnKVxuICAgIC5zZWxlY3QoJ2lkLCBtYWNoaW5lX25hbWUsIGNvbW1lbnQsIHVzYWdlX2xpbWl0X3Blcl9kYXksIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCdtYWNoaW5lX25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnUHJvZHVjdGlvbiBNYWNoaW5lcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdGlvbiBtYWNoaW5lczonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGxvZ1RpbWluZygnUHJvZHVjdGlvbiBNYWNoaW5lcyBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvZHVjdGlvbk1hY2hpbmVCeUlkKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgncHJvZHVjdGlvbl9tYWNoaW5lcycpXG4gICAgLnNlbGVjdCgnaWQsIG1hY2hpbmVfbmFtZSwgY29tbWVudCwgdXNhZ2VfbGltaXRfcGVyX2RheSwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmVxKCdpZCcsIGlkKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJvZHVjdGlvbiBtYWNoaW5lOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG4vLyBGZWUgVHlwZXMgU1NSIGZ1bmN0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbEZlZVR5cGVzKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnZmVldHlwZXMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsIFxuICAgICAgbmFtZSwgXG4gICAgICBuZXRfcHJpY2UsIFxuICAgICAgY3JlYXRlZF9hdCwgXG4gICAgICB1cGRhdGVkX2F0LFxuICAgICAgdmF0X2lkLFxuICAgICAgY3VycmVuY3lfaWQsXG4gICAgICB2YXQgKFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAga3VsY3NcbiAgICAgICksXG4gICAgICBjdXJyZW5jaWVzIChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWVcbiAgICAgIClcbiAgICBgKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ0ZlZSBUeXBlcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZmVlIHR5cGVzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIGluY2x1ZGUgY2FsY3VsYXRlZCBmaWVsZHNcbiAgY29uc3QgdHJhbnNmb3JtZWREYXRhID0gZGF0YT8ubWFwKGZlZVR5cGUgPT4gKHtcbiAgICAuLi5mZWVUeXBlLFxuICAgIHZhdF9uYW1lOiBmZWVUeXBlLnZhdD8ubmFtZSB8fCAnJyxcbiAgICB2YXRfcGVyY2VudDogZmVlVHlwZS52YXQ/Lmt1bGNzIHx8IDAsXG4gICAgY3VycmVuY3lfbmFtZTogZmVlVHlwZS5jdXJyZW5jaWVzPy5uYW1lIHx8ICcnLFxuICAgIHZhdF9hbW91bnQ6IChmZWVUeXBlLm5ldF9wcmljZSAqIChmZWVUeXBlLnZhdD8ua3VsY3MgfHwgMCkpIC8gMTAwLFxuICAgIGdyb3NzX3ByaWNlOiBmZWVUeXBlLm5ldF9wcmljZSArICgoZmVlVHlwZS5uZXRfcHJpY2UgKiAoZmVlVHlwZS52YXQ/Lmt1bGNzIHx8IDApKSAvIDEwMClcbiAgfSkpIHx8IFtdXG5cbiAgbG9nVGltaW5nKCdGZWUgVHlwZXMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke3RyYW5zZm9ybWVkRGF0YS5sZW5ndGh9IHJlY29yZHNgKVxuICByZXR1cm4gdHJhbnNmb3JtZWREYXRhXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGZWVUeXBlQnlJZChpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ2ZlZXR5cGVzJylcbiAgICAuc2VsZWN0KGBcbiAgICAgIGlkLCBcbiAgICAgIG5hbWUsIFxuICAgICAgbmV0X3ByaWNlLCBcbiAgICAgIGNyZWF0ZWRfYXQsIFxuICAgICAgdXBkYXRlZF9hdCxcbiAgICAgIHZhdF9pZCxcbiAgICAgIGN1cnJlbmN5X2lkLFxuICAgICAgdmF0IChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGt1bGNzXG4gICAgICApLFxuICAgICAgY3VycmVuY2llcyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lXG4gICAgICApXG4gICAgYClcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAuc2luZ2xlKClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBmZWUgdHlwZTonLCBlcnJvcilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIGluY2x1ZGUgY2FsY3VsYXRlZCBmaWVsZHNcbiAgY29uc3QgdHJhbnNmb3JtZWREYXRhID0ge1xuICAgIC4uLmRhdGEsXG4gICAgdmF0X25hbWU6IGRhdGEudmF0Py5uYW1lIHx8ICcnLFxuICAgIHZhdF9wZXJjZW50OiBkYXRhLnZhdD8ua3VsY3MgfHwgMCxcbiAgICBjdXJyZW5jeV9uYW1lOiBkYXRhLmN1cnJlbmNpZXM/Lm5hbWUgfHwgJycsXG4gICAgdmF0X2Ftb3VudDogKGRhdGEubmV0X3ByaWNlICogKGRhdGEudmF0Py5rdWxjcyB8fCAwKSkgLyAxMDAsXG4gICAgZ3Jvc3NfcHJpY2U6IGRhdGEubmV0X3ByaWNlICsgKChkYXRhLm5ldF9wcmljZSAqIChkYXRhLnZhdD8ua3VsY3MgfHwgMCkpIC8gMTAwKVxuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybWVkRGF0YVxufVxuXG4vLyBDdXJyZW5jaWVzIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW5jeUJ5SWQoaWQ6IHN0cmluZykge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdjdXJyZW5jaWVzJylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwgcmF0ZSwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmVxKCdpZCcsIGlkKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY3VycmVuY3k6JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxDdXJyZW5jaWVzKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnY3VycmVuY2llcycpXG4gICAgLnNlbGVjdCgnaWQsIG5hbWUsIHJhdGUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ0N1cnJlbmNpZXMgREIgUXVlcnknLCBzdGFydFRpbWUsIGBmZXRjaGVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGN1cnJlbmNpZXM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBsb2dUaW1pbmcoJ0N1cnJlbmNpZXMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuLy8gVkFUIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWYXRCeUlkKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgndmF0JylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwga3VsY3MsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5lcSgnaWQnLCBpZClcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5zaW5nbGUoKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIFZBVCByYXRlOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVmF0UmF0ZXMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCd2YXQnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBrdWxjcywgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnVkFUIERCIFF1ZXJ5Jywgc3RhcnRUaW1lLCBgZmV0Y2hlZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBWQVQgcmF0ZXM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBsb2dUaW1pbmcoJ1ZBVCBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG4vLyBDdXR0aW5nIEZlZXMgU1NSIGZ1bmN0aW9uc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEN1dHRpbmdGZWUoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdjdXR0aW5nX2ZlZXMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsXG4gICAgICBmZWVfcGVyX21ldGVyLFxuICAgICAgcGFudGhlbHlmdXJhc19mZWVfcGVyX2hvbGUsXG4gICAgICBkdXBsdW5nb2xhc19mZWVfcGVyX3NxbSxcbiAgICAgIHN6b2d2YWdhc19mZWVfcGVyX3BhbmVsLFxuICAgICAgY3VycmVuY3lfaWQsXG4gICAgICB2YXRfaWQsXG4gICAgICBjdXJyZW5jaWVzIChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWVcbiAgICAgICksXG4gICAgICB2YXQgKFxuICAgICAgICBpZCxcbiAgICAgICAga3VsY3NcbiAgICAgICksXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdFxuICAgIGApXG4gICAgLmxpbWl0KDEpXG4gICAgLnNpbmdsZSgpXG5cbiAgY29uc3QgcXVlcnlUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgbG9nVGltaW5nKCdDdXR0aW5nIEZlZSBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhID8gMSA6IDB9IHJlY29yZHNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGN1dHRpbmcgZmVlOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBsb2dUaW1pbmcoJ0N1dHRpbmcgRmVlIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgJHtkYXRhID8gMSA6IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBudWxsXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNYXRlcmlhbFByaWNlSGlzdG9yeShtYXRlcmlhbElkOiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hdGVyaWFsX3ByaWNlX2hpc3RvcnknKVxuICAgIC5zZWxlY3QoJ2lkLCBvbGRfcHJpY2VfcGVyX3NxbSwgbmV3X3ByaWNlX3Blcl9zcW0sIGNoYW5nZWRfYXQsIGNoYW5nZWRfYnknKVxuICAgIC5lcSgnbWF0ZXJpYWxfaWQnLCBtYXRlcmlhbElkKVxuICAgIC5vcmRlcignY2hhbmdlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgIC5saW1pdCgxMClcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ1ByaWNlIEhpc3RvcnkgREIgUXVlcnknLCBzdGFydFRpbWUsIGBmZXRjaGVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByaWNlIGhpc3Rvcnk6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvLyBFbnJpY2ggd2l0aCB1c2VyIGVtYWlscyB1c2luZyBhZG1pbiBBUElcbiAgY29uc3QgZW5yaWNoZWREYXRhID0gYXdhaXQgUHJvbWlzZS5hbGwoKGRhdGEgfHwgW10pLm1hcChhc3luYyAoaDogYW55KSA9PiB7XG4gICAgbGV0IHVzZXJFbWFpbCA9IG51bGxcbiAgICBpZiAoaC5jaGFuZ2VkX2J5KSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGE6IHVzZXJEYXRhIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlci5hdXRoLmFkbWluLmdldFVzZXJCeUlkKGguY2hhbmdlZF9ieSlcbiAgICAgICAgaWYgKHVzZXJEYXRhPy51c2VyKSB7XG4gICAgICAgICAgdXNlckVtYWlsID0gdXNlckRhdGEudXNlci5lbWFpbFxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBmb3IgcHJpY2UgaGlzdG9yeTonLCBlcnIpXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAuLi5oLFxuICAgICAgY2hhbmdlZF9ieV91c2VyOiB1c2VyRW1haWxcbiAgICB9XG4gIH0pKVxuXG4gIGxvZ1RpbWluZygnUHJpY2UgSGlzdG9yeSBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZW5yaWNoZWREYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG4gIHJldHVybiBlbnJpY2hlZERhdGEgfHwgW11cbn1cblxuLy8gQ3VzdG9tZXJzIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXN0b21lckJ5SWQoaWQ6IHN0cmluZykge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdjdXN0b21lcnMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsXG4gICAgICBuYW1lLFxuICAgICAgZW1haWwsXG4gICAgICBtb2JpbGUsXG4gICAgICBkaXNjb3VudF9wZXJjZW50LFxuICAgICAgc21zX25vdGlmaWNhdGlvbixcbiAgICAgIGJpbGxpbmdfbmFtZSxcbiAgICAgIGJpbGxpbmdfY291bnRyeSxcbiAgICAgIGJpbGxpbmdfY2l0eSxcbiAgICAgIGJpbGxpbmdfcG9zdGFsX2NvZGUsXG4gICAgICBiaWxsaW5nX3N0cmVldCxcbiAgICAgIGJpbGxpbmdfaG91c2VfbnVtYmVyLFxuICAgICAgYmlsbGluZ190YXhfbnVtYmVyLFxuICAgICAgYmlsbGluZ19jb21wYW55X3JlZ19udW1iZXIsXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdFxuICAgIGApXG4gICAgLmVxKCdpZCcsIGlkKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY3VzdG9tZXI6JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxDdXN0b21lcnMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdjdXN0b21lcnMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsXG4gICAgICBuYW1lLFxuICAgICAgZW1haWwsXG4gICAgICBtb2JpbGUsXG4gICAgICBkaXNjb3VudF9wZXJjZW50LFxuICAgICAgc21zX25vdGlmaWNhdGlvbixcbiAgICAgIGJpbGxpbmdfbmFtZSxcbiAgICAgIGJpbGxpbmdfY291bnRyeSxcbiAgICAgIGJpbGxpbmdfY2l0eSxcbiAgICAgIGJpbGxpbmdfcG9zdGFsX2NvZGUsXG4gICAgICBiaWxsaW5nX3N0cmVldCxcbiAgICAgIGJpbGxpbmdfaG91c2VfbnVtYmVyLFxuICAgICAgYmlsbGluZ190YXhfbnVtYmVyLFxuICAgICAgYmlsbGluZ19jb21wYW55X3JlZ19udW1iZXIsXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdFxuICAgIGApXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnQ3VzdG9tZXJzIERCIFF1ZXJ5Jywgc3RhcnRUaW1lLCBgZmV0Y2hlZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjdXN0b21lcnM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBsb2dUaW1pbmcoJ0N1c3RvbWVycyBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG4vLyBFZGdlIE1hdGVyaWFscyBTU1IgZnVuY3Rpb25zXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RWRnZU1hdGVyaWFsQnlJZChpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ2VkZ2VfbWF0ZXJpYWxzJylcbiAgICAuc2VsZWN0KGBcbiAgICAgIGlkLFxuICAgICAgYnJhbmRfaWQsXG4gICAgICB0eXBlLFxuICAgICAgdGhpY2tuZXNzLFxuICAgICAgd2lkdGgsXG4gICAgICBkZWNvcixcbiAgICAgIHByaWNlLFxuICAgICAgdmF0X2lkLFxuICAgICAgYWN0aXZlLFxuICAgICAgcsOhaGFnecOhcyxcbiAgICAgIGZhdm91cml0ZV9wcmlvcml0eSxcbiAgICAgIGNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0LFxuICAgICAgYnJhbmRzIChcbiAgICAgICAgbmFtZVxuICAgICAgKSxcbiAgICAgIHZhdCAoXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGt1bGNzXG4gICAgICApXG4gICAgYClcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAuc2luZ2xlKClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBlZGdlIG1hdGVyaWFsOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBGZXRjaCBtYWNoaW5lIGNvZGUgZnJvbSBtYWNoaW5lX2VkZ2VfbWF0ZXJpYWxfbWFwXG4gIGNvbnN0IHsgZGF0YTogbWFjaGluZURhdGEgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hY2hpbmVfZWRnZV9tYXRlcmlhbF9tYXAnKVxuICAgIC5zZWxlY3QoJ21hY2hpbmVfY29kZScpXG4gICAgLmVxKCdlZGdlX21hdGVyaWFsX2lkJywgaWQpXG4gICAgLmVxKCdtYWNoaW5lX3R5cGUnLCAnS29ycHVzJylcbiAgICAuc2luZ2xlKClcblxuICByZXR1cm4ge1xuICAgIC4uLmRhdGEsXG4gICAgbWFjaGluZV9jb2RlOiBtYWNoaW5lRGF0YT8ubWFjaGluZV9jb2RlIHx8ICcnXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbEVkZ2VNYXRlcmlhbHMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdlZGdlX21hdGVyaWFscycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCxcbiAgICAgIGJyYW5kX2lkLFxuICAgICAgdHlwZSxcbiAgICAgIHRoaWNrbmVzcyxcbiAgICAgIHdpZHRoLFxuICAgICAgZGVjb3IsXG4gICAgICBwcmljZSxcbiAgICAgIHZhdF9pZCxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIHLDoWhhZ3nDoXMsXG4gICAgICBmYXZvdXJpdGVfcHJpb3JpdHksXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdCxcbiAgICAgIGJyYW5kcyAoXG4gICAgICAgIG5hbWVcbiAgICAgICksXG4gICAgICB2YXQgKFxuICAgICAgICBuYW1lLFxuICAgICAgICBrdWxjc1xuICAgICAgKVxuICAgIGApXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ3R5cGUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuICAgIC5vcmRlcignZGVjb3InLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnRWRnZSBNYXRlcmlhbHMgREIgUXVlcnknLCBzdGFydFRpbWUsIGBmZXRjaGVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGVkZ2UgbWF0ZXJpYWxzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgbG9nVGltaW5nKCdFZGdlIE1hdGVyaWFscyBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsQnJhbmRzRm9yRWRnZU1hdGVyaWFscygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnYnJhbmRzJylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwgY29tbWVudCwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGJyYW5kcyBmb3IgZWRnZSBtYXRlcmlhbHM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVmF0UmF0ZXNGb3JFZGdlTWF0ZXJpYWxzKCkge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCd2YXQnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBrdWxjcywgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIFZBVCByYXRlcyBmb3IgZWRnZSBtYXRlcmlhbHM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG4vLyBMaW5lYXIgTWF0ZXJpYWxzIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxMaW5lYXJNYXRlcmlhbHMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdsaW5lYXJfbWF0ZXJpYWxzJylcbiAgICAuc2VsZWN0KGBcbiAgICAgIGlkLFxuICAgICAgYnJhbmRfaWQsXG4gICAgICBuYW1lLFxuICAgICAgd2lkdGgsXG4gICAgICBsZW5ndGgsXG4gICAgICB0aGlja25lc3MsXG4gICAgICB0eXBlLFxuICAgICAgaW1hZ2VfdXJsLFxuICAgICAgcHJpY2VfcGVyX20sXG4gICAgICBjdXJyZW5jeV9pZCxcbiAgICAgIHZhdF9pZCxcbiAgICAgIG9uX3N0b2NrLFxuICAgICAgYWN0aXZlLFxuICAgICAgY3JlYXRlZF9hdCxcbiAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICBicmFuZHMgKFxuICAgICAgICBuYW1lXG4gICAgICApLFxuICAgICAgY3VycmVuY2llcyAoXG4gICAgICAgIG5hbWVcbiAgICAgICksXG4gICAgICB2YXQgKFxuICAgICAgICBuYW1lLFxuICAgICAgICBrdWxjc1xuICAgICAgKVxuICAgIGApXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnTGluZWFyIE1hdGVyaWFscyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbGluZWFyIG1hdGVyaWFsczonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIC8vIEZldGNoIG1hY2hpbmUgY29kZXMgZm9yIGFsbCBsaW5lYXIgbWF0ZXJpYWxzXG4gIGNvbnN0IGxpbmVhck1hdGVyaWFsSWRzID0gZGF0YT8ubWFwKGxtID0+IGxtLmlkKSB8fCBbXVxuICBjb25zdCB7IGRhdGE6IG1hY2hpbmVDb2RlcyB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnbWFjaGluZV9saW5lYXJfbWF0ZXJpYWxfbWFwJylcbiAgICAuc2VsZWN0KCdsaW5lYXJfbWF0ZXJpYWxfaWQsIG1hY2hpbmVfY29kZScpXG4gICAgLmluKCdsaW5lYXJfbWF0ZXJpYWxfaWQnLCBsaW5lYXJNYXRlcmlhbElkcylcbiAgICAuZXEoJ21hY2hpbmVfdHlwZScsICdLb3JwdXMnKVxuXG4gIGNvbnN0IG1hY2hpbmVDb2RlTWFwID0gbmV3IE1hcChcbiAgICBtYWNoaW5lQ29kZXM/Lm1hcChtYyA9PiBbbWMubGluZWFyX21hdGVyaWFsX2lkLCBtYy5tYWNoaW5lX2NvZGVdKSB8fCBbXVxuICApXG5cbiAgLy8gVHJhbnNmb3JtIGRhdGEgdG8gaW5jbHVkZSBtYWNoaW5lIGNvZGVzXG4gIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IGRhdGE/Lm1hcChsbSA9PiAoe1xuICAgIC4uLmxtLFxuICAgIG1hY2hpbmVfY29kZTogbWFjaGluZUNvZGVNYXAuZ2V0KGxtLmlkKSB8fCAnJyxcbiAgICBicmFuZF9uYW1lOiBsbS5icmFuZHM/Lm5hbWUgfHwgJycsXG4gICAgY3VycmVuY3lfY29kZTogbG0uY3VycmVuY2llcz8ubmFtZSB8fCAnJyxcbiAgICBjdXJyZW5jeV9uYW1lOiBsbS5jdXJyZW5jaWVzPy5uYW1lIHx8ICcnLFxuICAgIHZhdF9uYW1lOiBsbS52YXQ/Lm5hbWUgfHwgJycsXG4gICAgdmF0X3BlcmNlbnQ6IGxtLnZhdD8ua3VsY3MgfHwgMFxuICB9KSkgfHwgW11cblxuICBsb2dUaW1pbmcoJ0xpbmVhciBNYXRlcmlhbHMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke3RyYW5zZm9ybWVkRGF0YS5sZW5ndGh9IHJlY29yZHNgKVxuICBcbiAgcmV0dXJuIHRyYW5zZm9ybWVkRGF0YVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGluZWFyTWF0ZXJpYWxCeUlkKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnbGluZWFyX21hdGVyaWFscycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCxcbiAgICAgIGJyYW5kX2lkLFxuICAgICAgbmFtZSxcbiAgICAgIHdpZHRoLFxuICAgICAgbGVuZ3RoLFxuICAgICAgdGhpY2tuZXNzLFxuICAgICAgdHlwZSxcbiAgICAgIGltYWdlX3VybCxcbiAgICAgIGJhc2VfcHJpY2UsXG4gICAgICBtdWx0aXBsaWVyLFxuICAgICAgcHJpY2VfcGVyX20sXG4gICAgICBwYXJ0bmVyc19pZCxcbiAgICAgIHVuaXRzX2lkLFxuICAgICAgY3VycmVuY3lfaWQsXG4gICAgICB2YXRfaWQsXG4gICAgICBvbl9zdG9jayxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0LFxuICAgICAgYnJhbmRzIChcbiAgICAgICAgbmFtZVxuICAgICAgKSxcbiAgICAgIGN1cnJlbmNpZXMgKFxuICAgICAgICBuYW1lXG4gICAgICApLFxuICAgICAgdmF0IChcbiAgICAgICAgbmFtZSxcbiAgICAgICAga3VsY3NcbiAgICAgIClcbiAgICBgKVxuICAgIC5lcSgnaWQnLCBpZClcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5zaW5nbGUoKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGxpbmVhciBtYXRlcmlhbDonLCBlcnJvcilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gRmV0Y2ggbWFjaGluZSBjb2RlXG4gIGNvbnN0IHsgZGF0YTogbWFjaGluZURhdGEgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ21hY2hpbmVfbGluZWFyX21hdGVyaWFsX21hcCcpXG4gICAgLnNlbGVjdCgnbWFjaGluZV9jb2RlJylcbiAgICAuZXEoJ2xpbmVhcl9tYXRlcmlhbF9pZCcsIGlkKVxuICAgIC5lcSgnbWFjaGluZV90eXBlJywgJ0tvcnB1cycpXG4gICAgLnNpbmdsZSgpXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5kYXRhLFxuICAgIG1hY2hpbmVfY29kZTogbWFjaGluZURhdGE/Lm1hY2hpbmVfY29kZSB8fCAnJ1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxCcmFuZHNGb3JMaW5lYXJNYXRlcmlhbHMoKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3J9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnYnJhbmRzJylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZScpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGJyYW5kcyBmb3IgbGluZWFyIG1hdGVyaWFsczonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIHJldHVybiBkYXRhIHx8IFtdXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxWYXRSYXRlc0ZvckxpbmVhck1hdGVyaWFscygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgndmF0JylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwga3VsY3MnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBWQVQgcmF0ZXMgZm9yIGxpbmVhciBtYXRlcmlhbHM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsQ3VycmVuY2llc0ZvckxpbmVhck1hdGVyaWFscygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnY3VycmVuY2llcycpXG4gICAgLnNlbGVjdCgnaWQsIG5hbWUnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjdXJyZW5jaWVzIGZvciBsaW5lYXIgbWF0ZXJpYWxzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuLy8gQ29tcGFuaWVzIFNTUiBmdW5jdGlvbnNcbi8vIFBhcnRuZXJzIFNTUiBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQYXJ0bmVyQnlJZChpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3BhcnRuZXJzJylcbiAgICAuc2VsZWN0KGBcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGNvdW50cnksXG4gICAgICBwb3N0YWxfY29kZSxcbiAgICAgIGNpdHksXG4gICAgICBhZGRyZXNzLFxuICAgICAgbW9iaWxlLFxuICAgICAgZW1haWwsXG4gICAgICB0YXhfbnVtYmVyLFxuICAgICAgY29tcGFueV9yZWdpc3RyYXRpb25fbnVtYmVyLFxuICAgICAgYmFua19hY2NvdW50LFxuICAgICAgbm90ZXMsXG4gICAgICBzdGF0dXMsXG4gICAgICBjb250YWN0X3BlcnNvbixcbiAgICAgIHZhdF9pZCxcbiAgICAgIGN1cnJlbmN5X2lkLFxuICAgICAgcGF5bWVudF90ZXJtcyxcbiAgICAgIGNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0XG4gICAgYClcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAuc2luZ2xlKClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwYXJ0bmVyOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUGFydG5lcnMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdwYXJ0bmVycycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCxcbiAgICAgIG5hbWUsXG4gICAgICBjb3VudHJ5LFxuICAgICAgcG9zdGFsX2NvZGUsXG4gICAgICBjaXR5LFxuICAgICAgYWRkcmVzcyxcbiAgICAgIG1vYmlsZSxcbiAgICAgIGVtYWlsLFxuICAgICAgdGF4X251bWJlcixcbiAgICAgIGNvbXBhbnlfcmVnaXN0cmF0aW9uX251bWJlcixcbiAgICAgIGJhbmtfYWNjb3VudCxcbiAgICAgIG5vdGVzLFxuICAgICAgc3RhdHVzLFxuICAgICAgY29udGFjdF9wZXJzb24sXG4gICAgICB2YXRfaWQsXG4gICAgICBjdXJyZW5jeV9pZCxcbiAgICAgIHBheW1lbnRfdGVybXMsXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdFxuICAgIGApXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnUGFydG5lcnMgREIgUXVlcnknLCBzdGFydFRpbWUsIGBmZXRjaGVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBhcnRuZXJzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgbG9nVGltaW5nKCdQYXJ0bmVycyBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVmF0UmF0ZXNGb3JQYXJ0bmVycygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgndmF0JylcbiAgICAuc2VsZWN0KCdpZCwgbmFtZSwga3VsY3MsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBWQVQgcmF0ZXMgZm9yIHBhcnRuZXJzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbEN1cnJlbmNpZXNGb3JQYXJ0bmVycygpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnY3VycmVuY2llcycpXG4gICAgLnNlbGVjdCgnaWQsIG5hbWUsIHJhdGUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQnKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjdXJyZW5jaWVzIGZvciBwYXJ0bmVyczonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIHJldHVybiBkYXRhIHx8IFtdXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb21wYW55QnlJZChpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3RlbmFudF9jb21wYW55JylcbiAgICAuc2VsZWN0KGBcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGNvdW50cnksXG4gICAgICBwb3N0YWxfY29kZSxcbiAgICAgIGNpdHksXG4gICAgICBhZGRyZXNzLFxuICAgICAgcGhvbmVfbnVtYmVyLFxuICAgICAgZW1haWwsXG4gICAgICB3ZWJzaXRlLFxuICAgICAgdGF4X251bWJlcixcbiAgICAgIGNvbXBhbnlfcmVnaXN0cmF0aW9uX251bWJlcixcbiAgICAgIHZhdF9pZCxcbiAgICAgIGNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0XG4gICAgYClcbiAgICAuZXEoJ2lkJywgaWQpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAuc2luZ2xlKClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBjb21wYW55OicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsQ29tcGFuaWVzKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgndGVuYW50X2NvbXBhbnknKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsXG4gICAgICBuYW1lLFxuICAgICAgY291bnRyeSxcbiAgICAgIHBvc3RhbF9jb2RlLFxuICAgICAgY2l0eSxcbiAgICAgIGFkZHJlc3MsXG4gICAgICBwaG9uZV9udW1iZXIsXG4gICAgICBlbWFpbCxcbiAgICAgIHdlYnNpdGUsXG4gICAgICB0YXhfbnVtYmVyLFxuICAgICAgY29tcGFueV9yZWdpc3RyYXRpb25fbnVtYmVyLFxuICAgICAgdmF0X2lkLFxuICAgICAgY3JlYXRlZF9hdCxcbiAgICAgIHVwZGF0ZWRfYXRcbiAgICBgKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLm9yZGVyKCduYW1lJywgeyBhc2NlbmRpbmc6IHRydWUgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ0NvbXBhbmllcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY29tcGFuaWVzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgbG9nVGltaW5nKCdDb21wYW5pZXMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgcmV0dXJuIGRhdGEgfHwgW11cbn1cblxuLy8gR2V0IHRlbmFudCBjb21wYW55IChmb3IgZGVmYXVsdCBlbWFpbCBpbiBjdXN0b21lciBhdXRvLWNyZWF0aW9uIGFuZCBxdW90ZSBkaXNwbGF5KVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRlbmFudENvbXBhbnkoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCd0ZW5hbnRfY29tcGFueScpXG4gICAgLnNlbGVjdCgnaWQsIG5hbWUsIGNvdW50cnksIHBvc3RhbF9jb2RlLCBjaXR5LCBhZGRyZXNzLCBwaG9uZV9udW1iZXIsIGVtYWlsLCB3ZWJzaXRlLCB0YXhfbnVtYmVyLCBjb21wYW55X3JlZ2lzdHJhdGlvbl9udW1iZXIsIHZhdF9pZCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAubGltaXQoMSlcbiAgICAuc2luZ2xlKClcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ1RlbmFudCBDb21wYW55IERCIFF1ZXJ5Jywgc3RhcnRUaW1lLCBgZmV0Y2hlZCAke2RhdGEgPyAxIDogMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdGVuYW50IGNvbXBhbnk6JywgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGxvZ1RpbWluZygnVGVuYW50IENvbXBhbnkgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke2RhdGEgPyAxIDogMH0gcmVjb3Jkc2ApXG4gIHJldHVybiBkYXRhXG59XG5cbi8vIE1lZGlhIGZpbGVzIFNTUiBmdW5jdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFsbE1lZGlhRmlsZXMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdtZWRpYV9maWxlcycpXG4gICAgLnNlbGVjdCgnKicpXG4gICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgLmxpbWl0KDEwMDApXG5cbiAgY29uc3QgcXVlcnlUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgbG9nVGltaW5nKCdNZWRpYSBGaWxlcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWVkaWEgZmlsZXM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvLyBUcmFuc2Zvcm0gdG8gbWF0Y2ggZXhwZWN0ZWQgZm9ybWF0XG4gIGNvbnN0IHRyYW5zZm9ybWVkRmlsZXMgPSBkYXRhPy5tYXAoZmlsZSA9PiAoe1xuICAgIGlkOiBmaWxlLmlkLFxuICAgIG5hbWU6IGZpbGUub3JpZ2luYWxfZmlsZW5hbWUsICAvLyBTaG93IG9yaWdpbmFsIGZpbGVuYW1lXG4gICAgc3RvcmVkTmFtZTogZmlsZS5zdG9yZWRfZmlsZW5hbWUsICAvLyBJbmNsdWRlIHN0b3JlZCBuYW1lIGZvciByZWZlcmVuY2VcbiAgICBwYXRoOiBmaWxlLnN0b3JhZ2VfcGF0aCxcbiAgICBmdWxsVXJsOiBmaWxlLmZ1bGxfdXJsLFxuICAgIHNpemU6IGZpbGUuc2l6ZSxcbiAgICBjcmVhdGVkX2F0OiBmaWxlLmNyZWF0ZWRfYXQsXG4gICAgdXBkYXRlZF9hdDogZmlsZS51cGRhdGVkX2F0XG4gIH0pKSB8fCBbXVxuXG4gIGxvZ1RpbWluZygnTWVkaWEgRmlsZXMgVG90YWwnLCBzdGFydFRpbWUsIGByZXR1cm5lZCAke3RyYW5zZm9ybWVkRmlsZXMubGVuZ3RofSByZWNvcmRzYClcbiAgcmV0dXJuIHRyYW5zZm9ybWVkRmlsZXNcbn1cblxuLy8gR2V0IHNpbmdsZSBxdW90ZSBieSBJRCB3aXRoIGFsbCBkYXRhIChmb3IgZWRpdGluZylcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRRdW90ZUJ5SWQocXVvdGVJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zb2xlLmxvZyhgW1NTUl0gRmV0Y2hpbmcgcXVvdGUgJHtxdW90ZUlkfSAtIE9QVElNSVpFRGApXG5cbiAgdHJ5IHtcbiAgICAvLyBPUFRJTUlaQVRJT046IEZldGNoIGFsbCBkYXRhIGluIHBhcmFsbGVsIGluc3RlYWQgb2Ygc2VxdWVudGlhbFxuICAgIGNvbnN0IHBhcmFsbGVsU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBcbiAgICBjb25zdCBbcXVvdGVSZXN1bHQsIHBhbmVsc1Jlc3VsdCwgcHJpY2luZ1Jlc3VsdCwgZmVlc1Jlc3VsdCwgYWNjZXNzb3JpZXNSZXN1bHQsIHRlbmFudENvbXBhbnksIHBheW1lbnRzUmVzdWx0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIC8vIDEuIFF1b3RlIHdpdGggY3VzdG9tZXIgZGF0YSBhbmQgcHJvZHVjdGlvbiBtYWNoaW5lXG4gICAgICBzdXBhYmFzZVNlcnZlclxuICAgICAgICAuZnJvbSgncXVvdGVzJylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgcXVvdGVfbnVtYmVyLFxuICAgICAgICAgIG9yZGVyX251bWJlcixcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgcGF5bWVudF9zdGF0dXMsXG4gICAgICAgICAgY3VzdG9tZXJfaWQsXG4gICAgICAgICAgZGlzY291bnRfcGVyY2VudCxcbiAgICAgICAgICBwcm9kdWN0aW9uX21hY2hpbmVfaWQsXG4gICAgICAgICAgcHJvZHVjdGlvbl9kYXRlLFxuICAgICAgICAgIGJhcmNvZGUsXG4gICAgICAgICAgdG90YWxfbmV0LFxuICAgICAgICAgIHRvdGFsX3ZhdCxcbiAgICAgICAgICB0b3RhbF9ncm9zcyxcbiAgICAgICAgICBmaW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudCxcbiAgICAgICAgICBmZWVzX3RvdGFsX25ldCxcbiAgICAgICAgICBmZWVzX3RvdGFsX3ZhdCxcbiAgICAgICAgICBmZWVzX3RvdGFsX2dyb3NzLFxuICAgICAgICAgIGFjY2Vzc29yaWVzX3RvdGFsX25ldCxcbiAgICAgICAgICBhY2Nlc3Nvcmllc190b3RhbF92YXQsXG4gICAgICAgICAgYWNjZXNzb3JpZXNfdG90YWxfZ3Jvc3MsXG4gICAgICAgICAgY3JlYXRlZF9hdCxcbiAgICAgICAgICB1cGRhdGVkX2F0LFxuICAgICAgICAgIGN1c3RvbWVycyhcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgbW9iaWxlLFxuICAgICAgICAgICAgZGlzY291bnRfcGVyY2VudCxcbiAgICAgICAgICAgIGJpbGxpbmdfbmFtZSxcbiAgICAgICAgICAgIGJpbGxpbmdfY291bnRyeSxcbiAgICAgICAgICAgIGJpbGxpbmdfY2l0eSxcbiAgICAgICAgICAgIGJpbGxpbmdfcG9zdGFsX2NvZGUsXG4gICAgICAgICAgICBiaWxsaW5nX3N0cmVldCxcbiAgICAgICAgICAgIGJpbGxpbmdfaG91c2VfbnVtYmVyLFxuICAgICAgICAgICAgYmlsbGluZ190YXhfbnVtYmVyLFxuICAgICAgICAgICAgYmlsbGluZ19jb21wYW55X3JlZ19udW1iZXJcbiAgICAgICAgICApLFxuICAgICAgICAgIHByb2R1Y3Rpb25fbWFjaGluZXMoXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1hY2hpbmVfbmFtZVxuICAgICAgICAgIClcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCdpZCcsIHF1b3RlSWQpXG4gICAgICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgICAgIC5zaW5nbGUoKSxcblxuICAgICAgLy8gMi4gUGFuZWxzIHdpdGggbWF0ZXJpYWxzXG4gICAgICBzdXBhYmFzZVNlcnZlclxuICAgICAgICAuZnJvbSgncXVvdGVfcGFuZWxzJylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbWF0ZXJpYWxfaWQsXG4gICAgICAgICAgd2lkdGhfbW0sXG4gICAgICAgICAgaGVpZ2h0X21tLFxuICAgICAgICAgIHF1YW50aXR5LFxuICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgIGVkZ2VfbWF0ZXJpYWxfYV9pZCxcbiAgICAgICAgICBlZGdlX21hdGVyaWFsX2JfaWQsXG4gICAgICAgICAgZWRnZV9tYXRlcmlhbF9jX2lkLFxuICAgICAgICAgIGVkZ2VfbWF0ZXJpYWxfZF9pZCxcbiAgICAgICAgICBwYW50aGVseWZ1cmFzX3F1YW50aXR5LFxuICAgICAgICAgIHBhbnRoZWx5ZnVyYXNfb2xkYWwsXG4gICAgICAgICAgZHVwbHVuZ29sYXMsXG4gICAgICAgICAgc3pvZ3ZhZ2FzLFxuICAgICAgICAgIG1hdGVyaWFscyhpZCwgbmFtZSwgYnJhbmRfaWQsIGxlbmd0aF9tbSwgd2lkdGhfbW0sIGJyYW5kcyhuYW1lKSlcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCdxdW90ZV9pZCcsIHF1b3RlSWQpXG4gICAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pLFxuXG4gICAgICAvLyAzLiBQcmljaW5nIHdpdGggYnJlYWtkb3duc1xuICAgICAgc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ3F1b3RlX21hdGVyaWFsc19wcmljaW5nJylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgaWQsIG1hdGVyaWFsX2lkLCBtYXRlcmlhbF9uYW1lLCBib2FyZF93aWR0aF9tbSwgYm9hcmRfbGVuZ3RoX21tLCB0aGlja25lc3NfbW0sIGdyYWluX2RpcmVjdGlvbixcbiAgICAgICAgICBvbl9zdG9jaywgYm9hcmRzX3VzZWQsIHVzYWdlX3BlcmNlbnRhZ2UsIHByaWNpbmdfbWV0aG9kLCBjaGFyZ2VkX3NxbSxcbiAgICAgICAgICBwcmljZV9wZXJfc3FtLCB2YXRfcmF0ZSwgY3VycmVuY3ksIHVzYWdlX2xpbWl0LCB3YXN0ZV9tdWx0aSxcbiAgICAgICAgICBtYXRlcmlhbF9uZXQsIG1hdGVyaWFsX3ZhdCwgbWF0ZXJpYWxfZ3Jvc3MsXG4gICAgICAgICAgZWRnZV9tYXRlcmlhbHNfbmV0LCBlZGdlX21hdGVyaWFsc192YXQsIGVkZ2VfbWF0ZXJpYWxzX2dyb3NzLFxuICAgICAgICAgIGN1dHRpbmdfbGVuZ3RoX20sIGN1dHRpbmdfbmV0LCBjdXR0aW5nX3ZhdCwgY3V0dGluZ19ncm9zcyxcbiAgICAgICAgICBzZXJ2aWNlc19uZXQsIHNlcnZpY2VzX3ZhdCwgc2VydmljZXNfZ3Jvc3MsXG4gICAgICAgICAgdG90YWxfbmV0LCB0b3RhbF92YXQsIHRvdGFsX2dyb3NzLFxuICAgICAgICAgIG1hdGVyaWFscyhpZCwgbmFtZSwgYnJhbmRzKG5hbWUpKSxcbiAgICAgICAgICBxdW90ZV9lZGdlX21hdGVyaWFsc19icmVha2Rvd24oXG4gICAgICAgICAgICBpZCwgZWRnZV9tYXRlcmlhbF9pZCwgZWRnZV9tYXRlcmlhbF9uYW1lLCB0b3RhbF9sZW5ndGhfbSwgcHJpY2VfcGVyX20sXG4gICAgICAgICAgICBuZXRfcHJpY2UsIHZhdF9hbW91bnQsIGdyb3NzX3ByaWNlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBxdW90ZV9zZXJ2aWNlc19icmVha2Rvd24oXG4gICAgICAgICAgICBpZCwgc2VydmljZV90eXBlLCBxdWFudGl0eSwgdW5pdF9wcmljZSwgbmV0X3ByaWNlLCB2YXRfYW1vdW50LCBncm9zc19wcmljZVxuICAgICAgICAgIClcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCdxdW90ZV9pZCcsIHF1b3RlSWQpXG4gICAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pLFxuXG4gICAgICAvLyA0LiBGZWVzXG4gICAgICBzdXBhYmFzZVNlcnZlclxuICAgICAgICAuZnJvbSgncXVvdGVfZmVlcycpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgIGlkLCBmZWVfbmFtZSwgcXVhbnRpdHksIHVuaXRfcHJpY2VfbmV0LCB2YXRfcmF0ZSwgdmF0X2Ftb3VudCwgZ3Jvc3NfcHJpY2UsIGN1cnJlbmN5X2lkLCBjb21tZW50LFxuICAgICAgICAgIGNyZWF0ZWRfYXQsXG4gICAgICAgICAgZmVldHlwZXMoaWQsIG5hbWUpLFxuICAgICAgICAgIGN1cnJlbmNpZXMoaWQsIG5hbWUpXG4gICAgICAgIGApXG4gICAgICAgIC5lcSgncXVvdGVfaWQnLCBxdW90ZUlkKVxuICAgICAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgICAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KSxcblxuICAgICAgLy8gNS4gQWNjZXNzb3JpZXNcbiAgICAgIHN1cGFiYXNlU2VydmVyXG4gICAgICAgIC5mcm9tKCdxdW90ZV9hY2Nlc3NvcmllcycpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgIGlkLCBhY2Nlc3NvcnlfbmFtZSwgc2t1LCBxdWFudGl0eSwgdW5pdF9wcmljZV9uZXQsIHZhdF9yYXRlLCB1bml0X25hbWUsIGN1cnJlbmN5X2lkLFxuICAgICAgICAgIHRvdGFsX25ldCwgdG90YWxfdmF0LCB0b3RhbF9ncm9zcywgY3JlYXRlZF9hdCxcbiAgICAgICAgICBhY2Nlc3NvcmllcyhpZCwgbmFtZSwgc2t1KSxcbiAgICAgICAgICB1bml0cyhpZCwgbmFtZSwgc2hvcnRmb3JtKSxcbiAgICAgICAgICBjdXJyZW5jaWVzKGlkLCBuYW1lKVxuICAgICAgICBgKVxuICAgICAgICAuZXEoJ3F1b3RlX2lkJywgcXVvdGVJZClcbiAgICAgICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAgICAgLm9yZGVyKCdjcmVhdGVkX2F0JywgeyBhc2NlbmRpbmc6IHRydWUgfSksXG5cbiAgICAgIC8vIDYuIFRlbmFudCBjb21wYW55XG4gICAgICBnZXRUZW5hbnRDb21wYW55KCksXG5cbiAgICAgIC8vIDcuIFBheW1lbnRzIChmb3Igb3JkZXJzKVxuICAgICAgc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ3F1b3RlX3BheW1lbnRzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5lcSgncXVvdGVfaWQnLCBxdW90ZUlkKVxuICAgICAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgICAgICAub3JkZXIoJ3BheW1lbnRfZGF0ZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgIF0pXG5cbiAgICBsb2dUaW1pbmcoJ1BhcmFsbGVsIFF1ZXJpZXMgQ29tcGxldGUnLCBwYXJhbGxlbFN0YXJ0VGltZSwgJ2FsbCA3IHF1ZXJpZXMgZXhlY3V0ZWQgaW4gcGFyYWxsZWwnKVxuXG4gICAgLy8gRXh0cmFjdCBkYXRhIGFuZCBlcnJvcnMgZnJvbSByZXN1bHRzXG4gICAgY29uc3QgeyBkYXRhOiBxdW90ZSwgZXJyb3I6IHF1b3RlRXJyb3IgfSA9IHF1b3RlUmVzdWx0XG4gICAgY29uc3QgeyBkYXRhOiBwYW5lbHMsIGVycm9yOiBwYW5lbHNFcnJvciB9ID0gcGFuZWxzUmVzdWx0XG4gICAgY29uc3QgeyBkYXRhOiBwcmljaW5nRGF0YSwgZXJyb3I6IHByaWNpbmdFcnJvciB9ID0gcHJpY2luZ1Jlc3VsdFxuICAgIGNvbnN0IHsgZGF0YTogZmVlcywgZXJyb3I6IGZlZXNFcnJvciB9ID0gZmVlc1Jlc3VsdFxuICAgIGNvbnN0IHsgZGF0YTogYWNjZXNzb3JpZXMsIGVycm9yOiBhY2Nlc3Nvcmllc0Vycm9yIH0gPSBhY2Nlc3Nvcmllc1Jlc3VsdFxuICAgIGNvbnN0IHsgZGF0YTogcGF5bWVudHMsIGVycm9yOiBwYXltZW50c0Vycm9yIH0gPSBwYXltZW50c1Jlc3VsdFxuXG4gICAgLy8gSGFuZGxlIGVycm9yc1xuICAgIGlmIChxdW90ZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBxdW90ZTonLCBxdW90ZUVycm9yKVxuICAgICAgbG9nVGltaW5nKCdRdW90ZSBGZXRjaCBGYWlsZWQnLCBzdGFydFRpbWUpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICghcXVvdGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIFF1b3RlIG5vdCBmb3VuZDonLCBxdW90ZUlkKVxuICAgICAgbG9nVGltaW5nKCdRdW90ZSBOb3QgRm91bmQnLCBzdGFydFRpbWUpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmIChwYW5lbHNFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgcGFuZWxzOicsIHBhbmVsc0Vycm9yKVxuICAgIH1cblxuICAgIGlmIChwcmljaW5nRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIEVycm9yIGZldGNoaW5nIHByaWNpbmc6JywgcHJpY2luZ0Vycm9yKVxuICAgICAgY29uc29sZS5sb2coJ1tTU1JdIENvbnRpbnVpbmcgd2l0aG91dCBwcmljaW5nIGRhdGEuLi4nKVxuICAgIH1cblxuICAgIGlmIChmZWVzRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIEVycm9yIGZldGNoaW5nIGZlZXM6JywgZmVlc0Vycm9yKVxuICAgIH1cblxuICAgIGlmIChhY2Nlc3Nvcmllc0Vycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBhY2Nlc3NvcmllczonLCBhY2Nlc3Nvcmllc0Vycm9yKVxuICAgIH1cblxuICAgIC8vIExvZyBpbmRpdmlkdWFsIHF1ZXJ5IHJlc3VsdHMgZm9yIGRlYnVnZ2luZ1xuICAgIGNvbnNvbGUubG9nKGBbUEVSRl0gUXVvdGUgZGF0YTogJHtxdW90ZSA/ICdPSycgOiAnTUlTU0lORyd9YClcbiAgICBjb25zb2xlLmxvZyhgW1BFUkZdIFBhbmVsczogJHtwYW5lbHM/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgICBjb25zb2xlLmxvZyhgW1BFUkZdIFByaWNpbmc6ICR7cHJpY2luZ0RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgICBjb25zb2xlLmxvZyhgW1BFUkZdIEZlZXM6ICR7ZmVlcz8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICAgIGNvbnNvbGUubG9nKGBbUEVSRl0gQWNjZXNzb3JpZXM6ICR7YWNjZXNzb3JpZXM/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcbiAgICBjb25zb2xlLmxvZyhgW1BFUkZdIFBheW1lbnRzOiAke3BheW1lbnRzPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG4gICAgY29uc29sZS5sb2coYFtQRVJGXSBDb21wYW55OiAke3RlbmFudENvbXBhbnkgPyAnT0snIDogJ01JU1NJTkcnfWApXG5cbiAgICAvLyBGZXRjaCBtYWNoaW5lIGNvZGVzIGZvciBwYW5lbHMgKGZvciBjdXR0aW5nIGxpc3QpXG4gICAgY29uc3QgbWF0ZXJpYWxJZHMgPSBwYW5lbHM/Lm1hcChwID0+IHAubWF0ZXJpYWxfaWQpIHx8IFtdXG4gICAgY29uc3QgZWRnZU1hdGVyaWFsSWRzID0gcGFuZWxzPy5mbGF0TWFwKHAgPT4gW1xuICAgICAgcC5lZGdlX21hdGVyaWFsX2FfaWQsXG4gICAgICBwLmVkZ2VfbWF0ZXJpYWxfYl9pZCxcbiAgICAgIHAuZWRnZV9tYXRlcmlhbF9jX2lkLFxuICAgICAgcC5lZGdlX21hdGVyaWFsX2RfaWRcbiAgICBdLmZpbHRlcihCb29sZWFuKSkgfHwgW11cblxuICAgIGNvbnN0IG1hY2hpbmVDb2Rlc1N0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3QgW21hdGVyaWFsTWFwcywgZWRnZU1hdGVyaWFsTWFwc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBtYXRlcmlhbElkcy5sZW5ndGggPiAwID8gc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ21hY2hpbmVfbWF0ZXJpYWxfbWFwJylcbiAgICAgICAgLnNlbGVjdCgnbWF0ZXJpYWxfaWQsIG1hY2hpbmVfY29kZScpXG4gICAgICAgIC5pbignbWF0ZXJpYWxfaWQnLCBtYXRlcmlhbElkcylcbiAgICAgICAgLmVxKCdtYWNoaW5lX3R5cGUnLCAnS29ycHVzJykgOiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBbXSB9KSxcbiAgICAgIFxuICAgICAgZWRnZU1hdGVyaWFsSWRzLmxlbmd0aCA+IDAgPyBzdXBhYmFzZVNlcnZlclxuICAgICAgICAuZnJvbSgnbWFjaGluZV9lZGdlX21hdGVyaWFsX21hcCcpXG4gICAgICAgIC5zZWxlY3QoJ2VkZ2VfbWF0ZXJpYWxfaWQsIG1hY2hpbmVfY29kZScpXG4gICAgICAgIC5pbignZWRnZV9tYXRlcmlhbF9pZCcsIGVkZ2VNYXRlcmlhbElkcylcbiAgICAgICAgLmVxKCdtYWNoaW5lX3R5cGUnLCAnS29ycHVzJykgOiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBbXSB9KVxuICAgIF0pXG5cbiAgICBsb2dUaW1pbmcoJ01hY2hpbmUgQ29kZXMgRmV0Y2gnLCBtYWNoaW5lQ29kZXNTdGFydFRpbWUsIGBmZXRjaGVkICR7bWF0ZXJpYWxNYXBzLmRhdGE/Lmxlbmd0aCB8fCAwfSBtYXRlcmlhbCBjb2RlcywgJHtlZGdlTWF0ZXJpYWxNYXBzLmRhdGE/Lmxlbmd0aCB8fCAwfSBlZGdlIGNvZGVzYClcblxuICAgIC8vIENyZWF0ZSBsb29rdXAgbWFwcyBmb3IgbWFjaGluZSBjb2Rlc1xuICAgIGNvbnN0IG1hdGVyaWFsQ29kZU1hcCA9IG5ldyBNYXAoXG4gICAgICBtYXRlcmlhbE1hcHMuZGF0YT8ubWFwKG0gPT4gW20ubWF0ZXJpYWxfaWQsIG0ubWFjaGluZV9jb2RlXSkgfHwgW11cbiAgICApXG4gICAgY29uc3QgZWRnZUNvZGVNYXAgPSBuZXcgTWFwKFxuICAgICAgZWRnZU1hdGVyaWFsTWFwcy5kYXRhPy5tYXAoZSA9PiBbZS5lZGdlX21hdGVyaWFsX2lkLCBlLm1hY2hpbmVfY29kZV0pIHx8IFtdXG4gICAgKVxuXG4gICAgLy8gRW5yaWNoIHBhbmVscyB3aXRoIG1hY2hpbmUgY29kZXMgZm9yIGN1dHRpbmcgbGlzdFxuICAgIGNvbnN0IGVucmljaGVkUGFuZWxzID0gcGFuZWxzPy5tYXAocGFuZWwgPT4gKHtcbiAgICAgIC4uLnBhbmVsLFxuICAgICAgbWF0ZXJpYWxfbWFjaGluZV9jb2RlOiBtYXRlcmlhbENvZGVNYXAuZ2V0KHBhbmVsLm1hdGVyaWFsX2lkKSB8fCAnJyxcbiAgICAgIGVkZ2VfYV9jb2RlOiBwYW5lbC5lZGdlX21hdGVyaWFsX2FfaWQgPyBlZGdlQ29kZU1hcC5nZXQocGFuZWwuZWRnZV9tYXRlcmlhbF9hX2lkKSB8fCBudWxsIDogbnVsbCxcbiAgICAgIGVkZ2VfYl9jb2RlOiBwYW5lbC5lZGdlX21hdGVyaWFsX2JfaWQgPyBlZGdlQ29kZU1hcC5nZXQocGFuZWwuZWRnZV9tYXRlcmlhbF9iX2lkKSB8fCBudWxsIDogbnVsbCxcbiAgICAgIGVkZ2VfY19jb2RlOiBwYW5lbC5lZGdlX21hdGVyaWFsX2NfaWQgPyBlZGdlQ29kZU1hcC5nZXQocGFuZWwuZWRnZV9tYXRlcmlhbF9jX2lkKSB8fCBudWxsIDogbnVsbCxcbiAgICAgIGVkZ2VfZF9jb2RlOiBwYW5lbC5lZGdlX21hdGVyaWFsX2RfaWQgPyBlZGdlQ29kZU1hcC5nZXQocGFuZWwuZWRnZV9tYXRlcmlhbF9kX2lkKSB8fCBudWxsIDogbnVsbFxuICAgIH0pKSB8fCBbXVxuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSByZXNwb25zZSB0byBpbmNsdWRlIGFsbCBuZWNlc3NhcnkgZGF0YVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkUXVvdGUgPSB7XG4gICAgICBpZDogcXVvdGUuaWQsXG4gICAgICBxdW90ZV9udW1iZXI6IHF1b3RlLnF1b3RlX251bWJlcixcbiAgICAgIG9yZGVyX251bWJlcjogcXVvdGUub3JkZXJfbnVtYmVyIHx8IG51bGwsXG4gICAgICBzdGF0dXM6IHF1b3RlLnN0YXR1cyxcbiAgICAgIHBheW1lbnRfc3RhdHVzOiBxdW90ZS5wYXltZW50X3N0YXR1cyB8fCAnbm90X3BhaWQnLFxuICAgICAgY3VzdG9tZXJfaWQ6IHF1b3RlLmN1c3RvbWVyX2lkLFxuICAgICAgZGlzY291bnRfcGVyY2VudDogcXVvdGUuZGlzY291bnRfcGVyY2VudCxcbiAgICAgIHByb2R1Y3Rpb25fbWFjaGluZV9pZDogcXVvdGUucHJvZHVjdGlvbl9tYWNoaW5lX2lkIHx8IG51bGwsXG4gICAgICBwcm9kdWN0aW9uX2RhdGU6IHF1b3RlLnByb2R1Y3Rpb25fZGF0ZSB8fCBudWxsLFxuICAgICAgYmFyY29kZTogcXVvdGUuYmFyY29kZSB8fCBudWxsLFxuICAgICAgcHJvZHVjdGlvbl9tYWNoaW5lOiBxdW90ZS5wcm9kdWN0aW9uX21hY2hpbmVzIHx8IG51bGwsXG4gICAgICBjdXN0b21lcjogcXVvdGUuY3VzdG9tZXJzLFxuICAgICAgcGFuZWxzOiBlbnJpY2hlZFBhbmVscyxcbiAgICAgIHByaWNpbmc6IHByaWNpbmdEYXRhIHx8IFtdLFxuICAgICAgZmVlczogZmVlcyB8fCBbXSxcbiAgICAgIGFjY2Vzc29yaWVzOiBhY2Nlc3NvcmllcyB8fCBbXSxcbiAgICAgIHBheW1lbnRzOiBwYXltZW50cyB8fCBbXSxcbiAgICAgIHRlbmFudF9jb21wYW55OiB0ZW5hbnRDb21wYW55LFxuICAgICAgdG90YWxzOiB7XG4gICAgICAgIHRvdGFsX25ldDogcXVvdGUudG90YWxfbmV0LFxuICAgICAgICB0b3RhbF92YXQ6IHF1b3RlLnRvdGFsX3ZhdCxcbiAgICAgICAgdG90YWxfZ3Jvc3M6IHF1b3RlLnRvdGFsX2dyb3NzLFxuICAgICAgICBmaW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudDogcXVvdGUuZmluYWxfdG90YWxfYWZ0ZXJfZGlzY291bnQsXG4gICAgICAgIGZlZXNfdG90YWxfbmV0OiBxdW90ZS5mZWVzX3RvdGFsX25ldCB8fCAwLFxuICAgICAgICBmZWVzX3RvdGFsX3ZhdDogcXVvdGUuZmVlc190b3RhbF92YXQgfHwgMCxcbiAgICAgICAgZmVlc190b3RhbF9ncm9zczogcXVvdGUuZmVlc190b3RhbF9ncm9zcyB8fCAwLFxuICAgICAgICBhY2Nlc3Nvcmllc190b3RhbF9uZXQ6IHF1b3RlLmFjY2Vzc29yaWVzX3RvdGFsX25ldCB8fCAwLFxuICAgICAgICBhY2Nlc3Nvcmllc190b3RhbF92YXQ6IHF1b3RlLmFjY2Vzc29yaWVzX3RvdGFsX3ZhdCB8fCAwLFxuICAgICAgICBhY2Nlc3Nvcmllc190b3RhbF9ncm9zczogcXVvdGUuYWNjZXNzb3JpZXNfdG90YWxfZ3Jvc3MgfHwgMFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZWRfYXQ6IHF1b3RlLmNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0OiBxdW90ZS51cGRhdGVkX2F0XG4gICAgfVxuXG4gICAgbG9nVGltaW5nKCdRdW90ZSBGZXRjaCBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkIHF1b3RlICR7cXVvdGUucXVvdGVfbnVtYmVyfSB3aXRoICR7cGFuZWxzPy5sZW5ndGggfHwgMH0gcGFuZWxzYClcbiAgICBjb25zb2xlLmxvZyhgW1NTUl0gUXVvdGUgZmV0Y2hlZCBzdWNjZXNzZnVsbHk6ICR7cXVvdGUucXVvdGVfbnVtYmVyfSAoT1BUSU1JWkVEKWApXG4gICAgXG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkUXVvdGVcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIEVycm9yIGZldGNoaW5nIHF1b3RlOicsIGVycm9yKVxuICAgIGxvZ1RpbWluZygnUXVvdGUgRmV0Y2ggRXJyb3InLCBzdGFydFRpbWUpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vLyBHZXQgcXVvdGVzIHdpdGggcGFnaW5hdGlvbiAoZm9yIHF1b3RlcyBsaXN0IHBhZ2UpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UXVvdGVzV2l0aFBhZ2luYXRpb24ocGFnZTogbnVtYmVyID0gMSwgbGltaXQ6IG51bWJlciA9IDIwLCBzZWFyY2hUZXJtPzogc3RyaW5nKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zb2xlLmxvZyhgW1NTUl0gRmV0Y2hpbmcgcXVvdGVzIHBhZ2UgJHtwYWdlfSwgbGltaXQgJHtsaW1pdH0sIHNlYXJjaDogXCIke3NlYXJjaFRlcm0gfHwgJ25vbmUnfVwiYClcblxuICB0cnkge1xuICAgIGNvbnN0IG9mZnNldCA9IChwYWdlIC0gMSkgKiBsaW1pdFxuICAgIFxuICAgIC8vIEJ1aWxkIHF1ZXJ5IHdpdGggc2VhcmNoIGlmIHByb3ZpZGVkXG4gICAgbGV0IHF1ZXJ5ID0gc3VwYWJhc2VTZXJ2ZXJcbiAgICAgIC5mcm9tKCdxdW90ZXMnKVxuICAgICAgLnNlbGVjdChgXG4gICAgICAgIGlkLFxuICAgICAgICBxdW90ZV9udW1iZXIsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgZmluYWxfdG90YWxfYWZ0ZXJfZGlzY291bnQsXG4gICAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICAgIGN1c3RvbWVycyFpbm5lcihcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIClcbiAgICAgIGAsIHsgY291bnQ6ICdleGFjdCcgfSlcbiAgICAgIC5lcSgnc3RhdHVzJywgJ2RyYWZ0JykgLy8gT25seSBzaG93IGRyYWZ0IHF1b3Rlcywgbm90IG9yZGVyc1xuICAgICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAgIC5vcmRlcigndXBkYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgLnJhbmdlKG9mZnNldCwgb2Zmc2V0ICsgbGltaXQgLSAxKVxuXG4gICAgLy8gQXBwbHkgc2VhcmNoIGZpbHRlciBpZiBwcm92aWRlZFxuICAgIGlmIChzZWFyY2hUZXJtICYmIHNlYXJjaFRlcm0udHJpbSgpKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmlsaWtlKCdjdXN0b21lcnMubmFtZScsIGAlJHtzZWFyY2hUZXJtLnRyaW0oKX0lYClcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGE6IHF1b3RlcywgZXJyb3I6IHF1b3Rlc0Vycm9yLCBjb3VudCB9ID0gYXdhaXQgcXVlcnlcblxuICAgIGlmIChxdW90ZXNFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgcXVvdGVzOicsIHF1b3Rlc0Vycm9yKVxuICAgICAgbG9nVGltaW5nKCdRdW90ZXMgRmV0Y2ggRmFpbGVkJywgc3RhcnRUaW1lKVxuICAgICAgcmV0dXJuIHsgcXVvdGVzOiBbXSwgdG90YWxDb3VudDogMCwgdG90YWxQYWdlczogMCB9XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIGZsYXR0ZW4gY3VzdG9tZXIgbmFtZVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkUXVvdGVzID0gcXVvdGVzPy5tYXAocXVvdGUgPT4gKHtcbiAgICAgIGlkOiBxdW90ZS5pZCxcbiAgICAgIHF1b3RlX251bWJlcjogcXVvdGUucXVvdGVfbnVtYmVyLFxuICAgICAgc3RhdHVzOiBxdW90ZS5zdGF0dXMsXG4gICAgICBjdXN0b21lcl9uYW1lOiBxdW90ZS5jdXN0b21lcnM/Lm5hbWUgfHwgJ1Vua25vd24gQ3VzdG9tZXInLFxuICAgICAgZmluYWxfdG90YWxfYWZ0ZXJfZGlzY291bnQ6IHF1b3RlLmZpbmFsX3RvdGFsX2FmdGVyX2Rpc2NvdW50LFxuICAgICAgdXBkYXRlZF9hdDogcXVvdGUudXBkYXRlZF9hdFxuICAgIH0pKSB8fCBbXVxuXG4gICAgY29uc3QgdG90YWxDb3VudCA9IGNvdW50IHx8IDBcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsQ291bnQgLyBsaW1pdClcblxuICAgIGxvZ1RpbWluZygnUXVvdGVzIEZldGNoIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgJHt0cmFuc2Zvcm1lZFF1b3Rlcy5sZW5ndGh9IHF1b3RlcyAocGFnZSAke3BhZ2V9LyR7dG90YWxQYWdlc30pYClcbiAgICBjb25zb2xlLmxvZyhgW1NTUl0gUXVvdGVzIGZldGNoZWQgc3VjY2Vzc2Z1bGx5OiAke3RyYW5zZm9ybWVkUXVvdGVzLmxlbmd0aH0gcXVvdGVzLCB0b3RhbDogJHt0b3RhbENvdW50fWApXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHF1b3RlczogdHJhbnNmb3JtZWRRdW90ZXMsXG4gICAgICB0b3RhbENvdW50LFxuICAgICAgdG90YWxQYWdlcyxcbiAgICAgIGN1cnJlbnRQYWdlOiBwYWdlXG4gICAgfVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgcXVvdGVzOicsIGVycm9yKVxuICAgIGxvZ1RpbWluZygnUXVvdGVzIEZldGNoIEVycm9yJywgc3RhcnRUaW1lKVxuICAgIHJldHVybiB7IHF1b3RlczogW10sIHRvdGFsQ291bnQ6IDAsIHRvdGFsUGFnZXM6IDAgfVxuICB9XG59XG5cbi8vIEdldCBvcmRlcnMgd2l0aCBwYWdpbmF0aW9uIChmb3Igb3JkZXJzIGxpc3QgcGFnZSlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPcmRlcnNXaXRoUGFnaW5hdGlvbihwYWdlOiBudW1iZXIgPSAxLCBsaW1pdDogbnVtYmVyID0gMjAsIHNlYXJjaFRlcm0/OiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnNvbGUubG9nKGBbU1NSXSBGZXRjaGluZyBvcmRlcnMgcGFnZSAke3BhZ2V9LCBsaW1pdCAke2xpbWl0fSwgc2VhcmNoOiBcIiR7c2VhcmNoVGVybSB8fCAnbm9uZSd9XCJgKVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKHBhZ2UgLSAxKSAqIGxpbWl0XG4gICAgXG4gICAgLy8gSWYgc2VhcmNoIHRlcm0gaXMgcHJvdmlkZWQsIHdlIG5lZWQgdG8gZmluZCBvcmRlcnMgdGhhdCBtYXRjaCBlaXRoZXIgY3VzdG9tZXIgbmFtZSBvciBtYXRlcmlhbCBuYW1lc1xuICAgIGlmIChzZWFyY2hUZXJtICYmIHNlYXJjaFRlcm0udHJpbSgpKSB7XG4gICAgICBjb25zdCB0cmltbWVkU2VhcmNoID0gc2VhcmNoVGVybS50cmltKClcbiAgICAgIFxuICAgICAgLy8gRmlyc3QsIGZpbmQgbWF0ZXJpYWxzIHRoYXQgbWF0Y2ggdGhlIHNlYXJjaCB0ZXJtXG4gICAgICBjb25zb2xlLmxvZyhgW1NTUl0gU2VhcmNoaW5nIG1hdGVyaWFscyBmb3I6IFwiJHt0cmltbWVkU2VhcmNofVwiYClcbiAgICAgIGNvbnN0IHsgZGF0YTogbWF0Y2hpbmdNYXRlcmlhbHMsIGVycm9yOiBtYXRlcmlhbHNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ21hdGVyaWFscycpXG4gICAgICAgIC5zZWxlY3QoJ2lkJylcbiAgICAgICAgLmlsaWtlKCduYW1lJywgYCUke3RyaW1tZWRTZWFyY2h9JWApXG4gICAgICBcbiAgICAgIGlmIChtYXRlcmlhbHNFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBzZWFyY2hpbmcgbWF0ZXJpYWxzOicsIG1hdGVyaWFsc0Vycm9yKVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBtYXRlcmlhbElkcyA9IG1hdGNoaW5nTWF0ZXJpYWxzPy5tYXAobSA9PiBtLmlkKSB8fCBbXVxuICAgICAgY29uc29sZS5sb2coYFtTU1JdIEZvdW5kICR7bWF0ZXJpYWxJZHMubGVuZ3RofSBtYXRjaGluZyBtYXRlcmlhbHNgKVxuICAgICAgXG4gICAgICAvLyBUaGVuIGZpbmQgcXVvdGUgSURzIHRoYXQgaGF2ZSBwYW5lbHMgdXNpbmcgdGhlc2UgbWF0ZXJpYWxzXG4gICAgICBsZXQgbWF0ZXJpYWxNYXRjaElkczogc3RyaW5nW10gPSBbXVxuICAgICAgaWYgKG1hdGVyaWFsSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtTU1JdIFNlYXJjaGluZyBxdW90ZV9wYW5lbHMgZm9yIG1hdGVyaWFsIElEczogJHttYXRlcmlhbElkcy5qb2luKCcsICcpfWApXG4gICAgICAgIGNvbnN0IHsgZGF0YTogbWF0ZXJpYWxNYXRjaGVzLCBlcnJvcjogcGFuZWxzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgICAgICAgLmZyb20oJ3F1b3RlX3BhbmVscycpXG4gICAgICAgICAgLnNlbGVjdCgncXVvdGVfaWQnKVxuICAgICAgICAgIC5pbignbWF0ZXJpYWxfaWQnLCBtYXRlcmlhbElkcylcbiAgICAgICAgXG4gICAgICAgIGlmIChwYW5lbHNFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIEVycm9yIHNlYXJjaGluZyBxdW90ZV9wYW5lbHM6JywgcGFuZWxzRXJyb3IpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1hdGVyaWFsTWF0Y2hJZHMgPSBtYXRlcmlhbE1hdGNoZXM/Lm1hcChtID0+IG0ucXVvdGVfaWQpIHx8IFtdXG4gICAgICAgIGNvbnNvbGUubG9nKGBbU1NSXSBGb3VuZCAke21hdGVyaWFsTWF0Y2hJZHMubGVuZ3RofSBtYXRjaGluZyBxdW90ZSBwYW5lbHNgKVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBCdWlsZCBxdWVyeSB3aXRoIE9SIGNvbmRpdGlvbiBmb3IgY3VzdG9tZXIgbmFtZSBPUiBtYXRlcmlhbCBtYXRjaGVzXG4gICAgICBjb25zb2xlLmxvZyhgW1NTUl0gQnVpbGRpbmcgcXVlcnkgd2l0aCBtYXRlcmlhbE1hdGNoSWRzOiAke21hdGVyaWFsTWF0Y2hJZHMubGVuZ3RofSBtYXRjaGVzYClcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlU2VydmVyXG4gICAgICAgIC5mcm9tKCdxdW90ZXMnKVxuICAgICAgICAuc2VsZWN0KGBcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBvcmRlcl9udW1iZXIsXG4gICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgIHBheW1lbnRfc3RhdHVzLFxuICAgICAgICAgIGZpbmFsX3RvdGFsX2FmdGVyX2Rpc2NvdW50LFxuICAgICAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICAgICAgcHJvZHVjdGlvbl9tYWNoaW5lX2lkLFxuICAgICAgICAgIHByb2R1Y3Rpb25fZGF0ZSxcbiAgICAgICAgICBiYXJjb2RlLFxuICAgICAgICAgIGN1c3RvbWVycyFpbm5lcihcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIG1vYmlsZSxcbiAgICAgICAgICAgIGVtYWlsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBwcm9kdWN0aW9uX21hY2hpbmVzKFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtYWNoaW5lX25hbWVcbiAgICAgICAgICApXG4gICAgICAgIGAsIHsgY291bnQ6ICdleGFjdCcgfSlcbiAgICAgICAgLmluKCdzdGF0dXMnLCBbJ29yZGVyZWQnLCAnaW5fcHJvZHVjdGlvbicsICdyZWFkeScsICdmaW5pc2hlZCcsICdjYW5jZWxsZWQnXSlcbiAgICAgICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAgICAgLm9yZGVyKCd1cGRhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAgIC5yYW5nZShvZmZzZXQsIG9mZnNldCArIGxpbWl0IC0gMSlcbiAgICAgIFxuICAgICAgLy8gRXhlY3V0ZSB0d28gc2VwYXJhdGUgcXVlcmllcyBhbmQgY29tYmluZSByZXN1bHRzXG4gICAgICBjb25zb2xlLmxvZyhgW1NTUl0gRXhlY3V0aW5nIHNlcGFyYXRlIHF1ZXJpZXMgZm9yIGN1c3RvbWVyIGFuZCBtYXRlcmlhbCBtYXRjaGVzLi4uYClcbiAgICAgIFxuICAgICAgLy8gUXVlcnkgMTogQ3VzdG9tZXIgbmFtZSBtYXRjaGVzXG4gICAgICBjb25zdCBjdXN0b21lclF1ZXJ5ID0gc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ3F1b3RlcycpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIG9yZGVyX251bWJlcixcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgcGF5bWVudF9zdGF0dXMsXG4gICAgICAgICAgZmluYWxfdG90YWxfYWZ0ZXJfZGlzY291bnQsXG4gICAgICAgICAgdXBkYXRlZF9hdCxcbiAgICAgICAgICBwcm9kdWN0aW9uX21hY2hpbmVfaWQsXG4gICAgICAgICAgcHJvZHVjdGlvbl9kYXRlLFxuICAgICAgICAgIGJhcmNvZGUsXG4gICAgICAgICAgY3VzdG9tZXJzIWlubmVyKFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgbW9iaWxlLFxuICAgICAgICAgICAgZW1haWxcbiAgICAgICAgICApLFxuICAgICAgICAgIHByb2R1Y3Rpb25fbWFjaGluZXMoXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1hY2hpbmVfbmFtZVxuICAgICAgICAgIClcbiAgICAgICAgYCwgeyBjb3VudDogJ2V4YWN0JyB9KVxuICAgICAgICAuaW4oJ3N0YXR1cycsIFsnb3JkZXJlZCcsICdpbl9wcm9kdWN0aW9uJywgJ3JlYWR5JywgJ2ZpbmlzaGVkJywgJ2NhbmNlbGxlZCddKVxuICAgICAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgICAgICAuaWxpa2UoJ2N1c3RvbWVycy5uYW1lJywgYCUke3RyaW1tZWRTZWFyY2h9JWApXG4gICAgICAgIC5vcmRlcigndXBkYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgICAucmFuZ2Uob2Zmc2V0LCBvZmZzZXQgKyBsaW1pdCAtIDEpXG5cbiAgICAgIC8vIFF1ZXJ5IDI6IE1hdGVyaWFsIG1hdGNoZXMgKGlmIGFueSlcbiAgICAgIGxldCBtYXRlcmlhbFF1ZXJ5ID0gbnVsbFxuICAgICAgaWYgKG1hdGVyaWFsTWF0Y2hJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBtYXRlcmlhbFF1ZXJ5ID0gc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgICAuZnJvbSgncXVvdGVzJylcbiAgICAgICAgICAuc2VsZWN0KGBcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgb3JkZXJfbnVtYmVyLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgcGF5bWVudF9zdGF0dXMsXG4gICAgICAgICAgICBmaW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudCxcbiAgICAgICAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICAgICAgICBwcm9kdWN0aW9uX21hY2hpbmVfaWQsXG4gICAgICAgICAgICBwcm9kdWN0aW9uX2RhdGUsXG4gICAgICAgICAgICBiYXJjb2RlLFxuICAgICAgICAgICAgY3VzdG9tZXJzIWlubmVyKFxuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgbW9iaWxlLFxuICAgICAgICAgICAgICBlbWFpbFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHByb2R1Y3Rpb25fbWFjaGluZXMoXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBtYWNoaW5lX25hbWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICBgLCB7IGNvdW50OiAnZXhhY3QnIH0pXG4gICAgICAgICAgLmluKCdzdGF0dXMnLCBbJ29yZGVyZWQnLCAnaW5fcHJvZHVjdGlvbicsICdyZWFkeScsICdmaW5pc2hlZCcsICdjYW5jZWxsZWQnXSlcbiAgICAgICAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgICAgICAgIC5pbignaWQnLCBtYXRlcmlhbE1hdGNoSWRzKVxuICAgICAgICAgIC5vcmRlcigndXBkYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgICAgIC5yYW5nZShvZmZzZXQsIG9mZnNldCArIGxpbWl0IC0gMSlcbiAgICAgIH1cblxuICAgICAgLy8gRXhlY3V0ZSBib3RoIHF1ZXJpZXNcbiAgICAgIGNvbnN0IFtjdXN0b21lclJlc3VsdCwgbWF0ZXJpYWxSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBjdXN0b21lclF1ZXJ5LFxuICAgICAgICBtYXRlcmlhbFF1ZXJ5IHx8IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IFtdLCBlcnJvcjogbnVsbCwgY291bnQ6IDAgfSlcbiAgICAgIF0pXG5cbiAgICAgIGNvbnN0IHsgZGF0YTogY3VzdG9tZXJPcmRlcnMsIGVycm9yOiBjdXN0b21lckVycm9yLCBjb3VudDogY3VzdG9tZXJDb3VudCB9ID0gY3VzdG9tZXJSZXN1bHRcbiAgICAgIGNvbnN0IHsgZGF0YTogbWF0ZXJpYWxPcmRlcnMsIGVycm9yOiBtYXRlcmlhbEVycm9yLCBjb3VudDogbWF0ZXJpYWxDb3VudCB9ID0gbWF0ZXJpYWxSZXN1bHRcblxuICAgICAgaWYgKGN1c3RvbWVyRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgY3VzdG9tZXIgb3JkZXJzOicsIGN1c3RvbWVyRXJyb3IpXG4gICAgICAgIGxvZ1RpbWluZygnT3JkZXJzIEZldGNoIEZhaWxlZCcsIHN0YXJ0VGltZSlcbiAgICAgICAgcmV0dXJuIHsgb3JkZXJzOiBbXSwgdG90YWxDb3VudDogMCwgdG90YWxQYWdlczogMCwgY3VycmVudFBhZ2U6IHBhZ2UgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0ZXJpYWxFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBtYXRlcmlhbCBvcmRlcnM6JywgbWF0ZXJpYWxFcnJvcilcbiAgICAgICAgbG9nVGltaW5nKCdPcmRlcnMgRmV0Y2ggRmFpbGVkJywgc3RhcnRUaW1lKVxuICAgICAgICByZXR1cm4geyBvcmRlcnM6IFtdLCB0b3RhbENvdW50OiAwLCB0b3RhbFBhZ2VzOiAwLCBjdXJyZW50UGFnZTogcGFnZSB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbWJpbmUgYW5kIGRlZHVwbGljYXRlIHJlc3VsdHNcbiAgICAgIGNvbnN0IGFsbE9yZGVycyA9IFsuLi4oY3VzdG9tZXJPcmRlcnMgfHwgW10pLCAuLi4obWF0ZXJpYWxPcmRlcnMgfHwgW10pXVxuICAgICAgY29uc3QgdW5pcXVlT3JkZXJzID0gYWxsT3JkZXJzLmZpbHRlcigob3JkZXIsIGluZGV4LCBzZWxmKSA9PiBcbiAgICAgICAgaW5kZXggPT09IHNlbGYuZmluZEluZGV4KG8gPT4gby5pZCA9PT0gb3JkZXIuaWQpXG4gICAgICApXG5cbiAgICAgIC8vIFNvcnQgYnkgdXBkYXRlZF9hdCBkZXNjZW5kaW5nXG4gICAgICB1bmlxdWVPcmRlcnMuc29ydCgoYSwgYikgPT4gbmV3IERhdGUoYi51cGRhdGVkX2F0KS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLnVwZGF0ZWRfYXQpLmdldFRpbWUoKSlcblxuICAgICAgLy8gQXBwbHkgcGFnaW5hdGlvbiB0byBjb21iaW5lZCByZXN1bHRzXG4gICAgICBjb25zdCBwYWdpbmF0ZWRPcmRlcnMgPSB1bmlxdWVPcmRlcnMuc2xpY2UoMCwgbGltaXQpXG4gICAgICBjb25zdCB0b3RhbENvdW50ID0gdW5pcXVlT3JkZXJzLmxlbmd0aFxuICAgICAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbCh0b3RhbENvdW50IC8gbGltaXQpXG5cbiAgICAgIGNvbnNvbGUubG9nKGBbU1NSXSBDb21iaW5lZCByZXN1bHRzOiAke3VuaXF1ZU9yZGVycy5sZW5ndGh9IHRvdGFsLCAke3BhZ2luYXRlZE9yZGVycy5sZW5ndGh9IG9uIHBhZ2VgKVxuXG4gICAgICAvLyBVc2UgdGhlIGNvbWJpbmVkIHJlc3VsdHMgYXMgb3JkZXJzXG4gICAgICBjb25zdCBvcmRlcnMgPSBwYWdpbmF0ZWRPcmRlcnNcbiAgICAgIFxuICAgICAgLy8gR2V0IHBheW1lbnQgdG90YWxzIGZvciBhbGwgb3JkZXJzIChmb3IgcGF5bWVudCBtb2RhbClcbiAgICAgIGNvbnN0IHsgZGF0YTogcGF5bWVudFRvdGFscyB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ3F1b3RlX3BheW1lbnRzJylcbiAgICAgICAgLnNlbGVjdCgncXVvdGVfaWQsIGFtb3VudCcpXG4gICAgICAgIC5pbigncXVvdGVfaWQnLCBvcmRlcnM/Lm1hcChvID0+IG8uaWQpIHx8IFtdKVxuXG4gICAgICBjb25zdCB0b3RhbFBhaWRCeU9yZGVyID0gKHBheW1lbnRUb3RhbHMgfHwgW10pLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCBwOiBhbnkpID0+IHtcbiAgICAgICAgYWNjW3AucXVvdGVfaWRdID0gKGFjY1twLnF1b3RlX2lkXSB8fCAwKSArIHAuYW1vdW50XG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIHt9KVxuXG4gICAgICAvLyBUcmFuc2Zvcm0gdGhlIGRhdGFcbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkT3JkZXJzID0gb3JkZXJzPy5tYXAob3JkZXIgPT4gKHtcbiAgICAgICAgaWQ6IG9yZGVyLmlkLFxuICAgICAgICBvcmRlcl9udW1iZXI6IG9yZGVyLm9yZGVyX251bWJlciB8fCAnTi9BJyxcbiAgICAgICAgc3RhdHVzOiBvcmRlci5zdGF0dXMsXG4gICAgICAgIHBheW1lbnRfc3RhdHVzOiBvcmRlci5wYXltZW50X3N0YXR1cyB8fCAnbm90X3BhaWQnLFxuICAgICAgICBjdXN0b21lcl9uYW1lOiBvcmRlci5jdXN0b21lcnM/Lm5hbWUgfHwgJ1Vua25vd24gQ3VzdG9tZXInLFxuICAgICAgICBjdXN0b21lcl9tb2JpbGU6IG9yZGVyLmN1c3RvbWVycz8ubW9iaWxlIHx8ICcnLFxuICAgICAgICBjdXN0b21lcl9lbWFpbDogb3JkZXIuY3VzdG9tZXJzPy5lbWFpbCB8fCAnJyxcbiAgICAgICAgZmluYWxfdG90YWw6IG9yZGVyLmZpbmFsX3RvdGFsX2FmdGVyX2Rpc2NvdW50IHx8IDAsXG4gICAgICAgIHRvdGFsX3BhaWQ6IHRvdGFsUGFpZEJ5T3JkZXJbb3JkZXIuaWRdIHx8IDAsXG4gICAgICAgIHJlbWFpbmluZ19iYWxhbmNlOiAob3JkZXIuZmluYWxfdG90YWxfYWZ0ZXJfZGlzY291bnQgfHwgMCkgLSAodG90YWxQYWlkQnlPcmRlcltvcmRlci5pZF0gfHwgMCksXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG9yZGVyLnVwZGF0ZWRfYXQsXG4gICAgICAgIHByb2R1Y3Rpb25fbWFjaGluZV9pZDogb3JkZXIucHJvZHVjdGlvbl9tYWNoaW5lX2lkIHx8IG51bGwsXG4gICAgICAgIHByb2R1Y3Rpb25fbWFjaGluZV9uYW1lOiBvcmRlci5wcm9kdWN0aW9uX21hY2hpbmVzPy5tYWNoaW5lX25hbWUgfHwgbnVsbCxcbiAgICAgICAgcHJvZHVjdGlvbl9kYXRlOiBvcmRlci5wcm9kdWN0aW9uX2RhdGUgfHwgbnVsbCxcbiAgICAgICAgYmFyY29kZTogb3JkZXIuYmFyY29kZSB8fCAnJ1xuICAgICAgfSkpIHx8IFtdXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9yZGVyczogdHJhbnNmb3JtZWRPcmRlcnMsXG4gICAgICAgIHRvdGFsQ291bnQsXG4gICAgICAgIHRvdGFsUGFnZXMsXG4gICAgICAgIGN1cnJlbnRQYWdlOiBwYWdlXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIE5vIHNlYXJjaCB0ZXJtIC0gcmVndWxhciBxdWVyeVxuICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlU2VydmVyXG4gICAgICAuZnJvbSgncXVvdGVzJylcbiAgICAgIC5zZWxlY3QoYFxuICAgICAgICBpZCxcbiAgICAgICAgb3JkZXJfbnVtYmVyLFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIHBheW1lbnRfc3RhdHVzLFxuICAgICAgICBmaW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudCxcbiAgICAgICAgdXBkYXRlZF9hdCxcbiAgICAgICAgcHJvZHVjdGlvbl9tYWNoaW5lX2lkLFxuICAgICAgICBwcm9kdWN0aW9uX2RhdGUsXG4gICAgICAgIGJhcmNvZGUsXG4gICAgICAgIGN1c3RvbWVycyFpbm5lcihcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG1vYmlsZSxcbiAgICAgICAgICBlbWFpbFxuICAgICAgICApLFxuICAgICAgICBwcm9kdWN0aW9uX21hY2hpbmVzKFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIG1hY2hpbmVfbmFtZVxuICAgICAgICApXG4gICAgICBgLCB7IGNvdW50OiAnZXhhY3QnIH0pXG4gICAgICAuaW4oJ3N0YXR1cycsIFsnb3JkZXJlZCcsICdpbl9wcm9kdWN0aW9uJywgJ3JlYWR5JywgJ2ZpbmlzaGVkJywgJ2NhbmNlbGxlZCddKSAvLyBTaG93IGFsbCBvcmRlciBzdGF0dXNlcyBpbmNsdWRpbmcgY2FuY2VsbGVkXG4gICAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgICAgLm9yZGVyKCd1cGRhdGVkX2F0JywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAucmFuZ2Uob2Zmc2V0LCBvZmZzZXQgKyBsaW1pdCAtIDEpXG5cbiAgICBjb25zdCB7IGRhdGE6IG9yZGVycywgZXJyb3I6IG9yZGVyc0Vycm9yLCBjb3VudCB9ID0gYXdhaXQgcXVlcnlcblxuICAgIGlmIChvcmRlcnNFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgb3JkZXJzOicsIG9yZGVyc0Vycm9yKVxuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZGV0YWlsczonLCBKU09OLnN0cmluZ2lmeShvcmRlcnNFcnJvciwgbnVsbCwgMikpXG4gICAgICBsb2dUaW1pbmcoJ09yZGVycyBGZXRjaCBGYWlsZWQnLCBzdGFydFRpbWUpXG4gICAgICByZXR1cm4geyBvcmRlcnM6IFtdLCB0b3RhbENvdW50OiAwLCB0b3RhbFBhZ2VzOiAwLCBjdXJyZW50UGFnZTogcGFnZSB9XG4gICAgfVxuXG4gICAgLy8gR2V0IHBheW1lbnQgdG90YWxzIGZvciBhbGwgb3JkZXJzIChmb3IgcGF5bWVudCBtb2RhbClcbiAgICBjb25zdCB7IGRhdGE6IHBheW1lbnRUb3RhbHMgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgICAuZnJvbSgncXVvdGVfcGF5bWVudHMnKVxuICAgICAgLnNlbGVjdCgncXVvdGVfaWQsIGFtb3VudCcpXG4gICAgICAuaW4oJ3F1b3RlX2lkJywgb3JkZXJzPy5tYXAobyA9PiBvLmlkKSB8fCBbXSlcblxuICAgIGNvbnN0IHRvdGFsUGFpZEJ5T3JkZXIgPSAocGF5bWVudFRvdGFscyB8fCBbXSkucmVkdWNlKChhY2MsIHApID0+IHtcbiAgICAgIGFjY1twLnF1b3RlX2lkXSA9IChhY2NbcC5xdW90ZV9pZF0gfHwgMCkgKyBwLmFtb3VudFxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj4pXG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlIGRhdGFcbiAgICBjb25zdCB0cmFuc2Zvcm1lZE9yZGVycyA9IG9yZGVycz8ubWFwKG9yZGVyID0+ICh7XG4gICAgICBpZDogb3JkZXIuaWQsXG4gICAgICBvcmRlcl9udW1iZXI6IG9yZGVyLm9yZGVyX251bWJlciB8fCAnTi9BJyxcbiAgICAgIHN0YXR1czogb3JkZXIuc3RhdHVzLFxuICAgICAgcGF5bWVudF9zdGF0dXM6IG9yZGVyLnBheW1lbnRfc3RhdHVzIHx8ICdub3RfcGFpZCcsXG4gICAgICBjdXN0b21lcl9uYW1lOiBvcmRlci5jdXN0b21lcnM/Lm5hbWUgfHwgJ1Vua25vd24gQ3VzdG9tZXInLFxuICAgICAgY3VzdG9tZXJfbW9iaWxlOiBvcmRlci5jdXN0b21lcnM/Lm1vYmlsZSB8fCAnJyxcbiAgICAgIGN1c3RvbWVyX2VtYWlsOiBvcmRlci5jdXN0b21lcnM/LmVtYWlsIHx8ICcnLFxuICAgICAgZmluYWxfdG90YWw6IG9yZGVyLmZpbmFsX3RvdGFsX2FmdGVyX2Rpc2NvdW50IHx8IDAsXG4gICAgICB0b3RhbF9wYWlkOiB0b3RhbFBhaWRCeU9yZGVyW29yZGVyLmlkXSB8fCAwLFxuICAgICAgcmVtYWluaW5nX2JhbGFuY2U6IChvcmRlci5maW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudCB8fCAwKSAtICh0b3RhbFBhaWRCeU9yZGVyW29yZGVyLmlkXSB8fCAwKSxcbiAgICAgIHVwZGF0ZWRfYXQ6IG9yZGVyLnVwZGF0ZWRfYXQsXG4gICAgICBwcm9kdWN0aW9uX21hY2hpbmVfaWQ6IG9yZGVyLnByb2R1Y3Rpb25fbWFjaGluZV9pZCB8fCBudWxsLFxuICAgICAgcHJvZHVjdGlvbl9tYWNoaW5lX25hbWU6IG9yZGVyLnByb2R1Y3Rpb25fbWFjaGluZXM/Lm1hY2hpbmVfbmFtZSB8fCBudWxsLFxuICAgICAgcHJvZHVjdGlvbl9kYXRlOiBvcmRlci5wcm9kdWN0aW9uX2RhdGUgfHwgbnVsbCxcbiAgICAgIGJhcmNvZGU6IG9yZGVyLmJhcmNvZGUgfHwgJydcbiAgICB9KSkgfHwgW11cblxuICAgIGNvbnN0IHRvdGFsQ291bnQgPSBjb3VudCB8fCAwXG4gICAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbCh0b3RhbENvdW50IC8gbGltaXQpXG5cbiAgICBsb2dUaW1pbmcoJ09yZGVycyBGZXRjaCBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7dHJhbnNmb3JtZWRPcmRlcnMubGVuZ3RofSBvcmRlcnMgKHBhZ2UgJHtwYWdlfS8ke3RvdGFsUGFnZXN9KWApXG4gICAgY29uc29sZS5sb2coYFtTU1JdIE9yZGVycyBmZXRjaGVkIHN1Y2Nlc3NmdWxseTogJHt0cmFuc2Zvcm1lZE9yZGVycy5sZW5ndGh9IG9yZGVycywgdG90YWw6ICR7dG90YWxDb3VudH1gKVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBvcmRlcnM6IHRyYW5zZm9ybWVkT3JkZXJzLFxuICAgICAgdG90YWxDb3VudCxcbiAgICAgIHRvdGFsUGFnZXMsXG4gICAgICBjdXJyZW50UGFnZTogcGFnZVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBvcmRlcnM6JywgZXJyb3IpXG4gICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZGV0YWlsczonLCBKU09OLnN0cmluZ2lmeShlcnJvciwgbnVsbCwgMikpXG4gICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgbWVzc2FnZTonLCBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJylcbiAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBzdGFjazonLCBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiAnTm8gc3RhY2sgdHJhY2UnKVxuICAgIGxvZ1RpbWluZygnT3JkZXJzIEZldGNoIEVycm9yJywgc3RhcnRUaW1lKVxuICAgIHJldHVybiB7IG9yZGVyczogW10sIHRvdGFsQ291bnQ6IDAsIHRvdGFsUGFnZXM6IDAsIGN1cnJlbnRQYWdlOiBwYWdlIH1cbiAgfVxufVxuXG4vLyBBY2Nlc3NvcmllcyBTU1IgZnVuY3Rpb25zXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsQWNjZXNzb3JpZXMoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdhY2Nlc3NvcmllcycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCwgXG4gICAgICBuYW1lLCBcbiAgICAgIHNrdSwgXG4gICAgICBiYXNlX3ByaWNlLFxuICAgICAgbXVsdGlwbGllcixcbiAgICAgIG5ldF9wcmljZSwgXG4gICAgICBjcmVhdGVkX2F0LCBcbiAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICB2YXRfaWQsXG4gICAgICBjdXJyZW5jeV9pZCxcbiAgICAgIHVuaXRzX2lkLFxuICAgICAgcGFydG5lcnNfaWQsXG4gICAgICB2YXQgKFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAga3VsY3NcbiAgICAgICksXG4gICAgICBjdXJyZW5jaWVzIChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWVcbiAgICAgICksXG4gICAgICB1bml0cyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzaG9ydGZvcm1cbiAgICAgICksXG4gICAgICBwYXJ0bmVycyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lXG4gICAgICApXG4gICAgYClcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5vcmRlcignbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG5cbiAgY29uc3QgcXVlcnlUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgbG9nVGltaW5nKCdBY2Nlc3NvcmllcyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYWNjZXNzb3JpZXM6JywgZXJyb3IpXG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvLyBUcmFuc2Zvcm0gdGhlIGRhdGEgdG8gaW5jbHVkZSBjYWxjdWxhdGVkIGZpZWxkc1xuICBjb25zdCB0cmFuc2Zvcm1lZERhdGEgPSBkYXRhPy5tYXAoYWNjZXNzb3J5ID0+ICh7XG4gICAgLi4uYWNjZXNzb3J5LFxuICAgIHZhdF9uYW1lOiBhY2Nlc3NvcnkudmF0Py5uYW1lIHx8ICcnLFxuICAgIHZhdF9wZXJjZW50OiBhY2Nlc3NvcnkudmF0Py5rdWxjcyB8fCAwLFxuICAgIGN1cnJlbmN5X25hbWU6IGFjY2Vzc29yeS5jdXJyZW5jaWVzPy5uYW1lIHx8ICcnLFxuICAgIHVuaXRfbmFtZTogYWNjZXNzb3J5LnVuaXRzPy5uYW1lIHx8ICcnLFxuICAgIHVuaXRfc2hvcnRmb3JtOiBhY2Nlc3NvcnkudW5pdHM/LnNob3J0Zm9ybSB8fCAnJyxcbiAgICBwYXJ0bmVyX25hbWU6IGFjY2Vzc29yeS5wYXJ0bmVycz8ubmFtZSB8fCAnJyxcbiAgICB2YXRfYW1vdW50OiAoYWNjZXNzb3J5Lm5ldF9wcmljZSAqIChhY2Nlc3NvcnkudmF0Py5rdWxjcyB8fCAwKSkgLyAxMDAsXG4gICAgZ3Jvc3NfcHJpY2U6IGFjY2Vzc29yeS5uZXRfcHJpY2UgKyAoKGFjY2Vzc29yeS5uZXRfcHJpY2UgKiAoYWNjZXNzb3J5LnZhdD8ua3VsY3MgfHwgMCkpIC8gMTAwKVxuICB9KSkgfHwgW11cblxuICBsb2dUaW1pbmcoJ0FjY2Vzc29yaWVzIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgJHt0cmFuc2Zvcm1lZERhdGEubGVuZ3RofSByZWNvcmRzYClcbiAgcmV0dXJuIHRyYW5zZm9ybWVkRGF0YVxufVxuXG4vLyBHZXQgYWNjZXNzb3JpZXMgd2l0aCBwYWdpbmF0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWNjZXNzb3JpZXNXaXRoUGFnaW5hdGlvbihwYWdlOiBudW1iZXIgPSAxLCBsaW1pdDogbnVtYmVyID0gMTAwKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIFxuICBjb25zdCBvZmZzZXQgPSAocGFnZSAtIDEpICogbGltaXRcbiAgXG4gIC8vIEdldCB0b3RhbCBjb3VudFxuICBjb25zdCB7IGNvdW50IH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdhY2Nlc3NvcmllcycpXG4gICAgLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSlcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuXG4gIC8vIEdldCBwYWdpbmF0ZWQgZGF0YVxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVNlcnZlclxuICAgIC5mcm9tKCdhY2Nlc3NvcmllcycpXG4gICAgLnNlbGVjdChgXG4gICAgICBpZCwgXG4gICAgICBuYW1lLCBcbiAgICAgIHNrdSwgXG4gICAgICBiYXNlX3ByaWNlLFxuICAgICAgbXVsdGlwbGllcixcbiAgICAgIG5ldF9wcmljZSwgXG4gICAgICBjcmVhdGVkX2F0LCBcbiAgICAgIHVwZGF0ZWRfYXQsXG4gICAgICB2YXRfaWQsXG4gICAgICBjdXJyZW5jeV9pZCxcbiAgICAgIHVuaXRzX2lkLFxuICAgICAgcGFydG5lcnNfaWQsXG4gICAgICB2YXQgKFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAga3VsY3NcbiAgICAgICksXG4gICAgICBjdXJyZW5jaWVzIChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWVcbiAgICAgICksXG4gICAgICB1bml0cyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBzaG9ydGZvcm1cbiAgICAgICksXG4gICAgICBwYXJ0bmVycyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lXG4gICAgICApXG4gICAgYClcbiAgICAuaXMoJ2RlbGV0ZWRfYXQnLCBudWxsKVxuICAgIC5vcmRlcignbmFtZScsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG4gICAgLnJhbmdlKG9mZnNldCwgb2Zmc2V0ICsgbGltaXQgLSAxKVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnQWNjZXNzb3JpZXMgUGFnaW5hdGVkIERCIFF1ZXJ5Jywgc3RhcnRUaW1lLCBgZmV0Y2hlZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSByZWNvcmRzYClcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhY2Nlc3NvcmllczonLCBlcnJvcilcbiAgICByZXR1cm4geyBhY2Nlc3NvcmllczogW10sIHRvdGFsQ291bnQ6IDAsIHRvdGFsUGFnZXM6IDAsIGN1cnJlbnRQYWdlOiBwYWdlIH1cbiAgfVxuXG4gIC8vIFRyYW5zZm9ybSB0aGUgZGF0YSB0byBpbmNsdWRlIGNhbGN1bGF0ZWQgZmllbGRzXG4gIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IGRhdGE/Lm1hcChhY2Nlc3NvcnkgPT4gKHtcbiAgICAuLi5hY2Nlc3NvcnksXG4gICAgdmF0X25hbWU6IGFjY2Vzc29yeS52YXQ/Lm5hbWUgfHwgJycsXG4gICAgdmF0X3BlcmNlbnQ6IGFjY2Vzc29yeS52YXQ/Lmt1bGNzIHx8IDAsXG4gICAgY3VycmVuY3lfbmFtZTogYWNjZXNzb3J5LmN1cnJlbmNpZXM/Lm5hbWUgfHwgJycsXG4gICAgdW5pdF9uYW1lOiBhY2Nlc3NvcnkudW5pdHM/Lm5hbWUgfHwgJycsXG4gICAgdW5pdF9zaG9ydGZvcm06IGFjY2Vzc29yeS51bml0cz8uc2hvcnRmb3JtIHx8ICcnLFxuICAgIHBhcnRuZXJfbmFtZTogYWNjZXNzb3J5LnBhcnRuZXJzPy5uYW1lIHx8ICcnLFxuICAgIHZhdF9hbW91bnQ6IChhY2Nlc3NvcnkubmV0X3ByaWNlICogKGFjY2Vzc29yeS52YXQ/Lmt1bGNzIHx8IDApKSAvIDEwMCxcbiAgICBncm9zc19wcmljZTogYWNjZXNzb3J5Lm5ldF9wcmljZSArICgoYWNjZXNzb3J5Lm5ldF9wcmljZSAqIChhY2Nlc3NvcnkudmF0Py5rdWxjcyB8fCAwKSkgLyAxMDApXG4gIH0pKSB8fCBbXVxuXG4gIGNvbnN0IHRvdGFsQ291bnQgPSBjb3VudCB8fCAwXG4gIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwodG90YWxDb3VudCAvIGxpbWl0KVxuXG4gIGxvZ1RpbWluZygnQWNjZXNzb3JpZXMgUGFnaW5hdGVkIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgJHt0cmFuc2Zvcm1lZERhdGEubGVuZ3RofSBvZiAke3RvdGFsQ291bnR9IHJlY29yZHNgKVxuICBcbiAgcmV0dXJuIHtcbiAgICBhY2Nlc3NvcmllczogdHJhbnNmb3JtZWREYXRhLFxuICAgIHRvdGFsQ291bnQsXG4gICAgdG90YWxQYWdlcyxcbiAgICBjdXJyZW50UGFnZTogcGFnZVxuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBY2Nlc3NvcnlCeUlkKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnYWNjZXNzb3JpZXMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsIFxuICAgICAgbmFtZSwgXG4gICAgICBza3UsIFxuICAgICAgYmFzZV9wcmljZSxcbiAgICAgIG11bHRpcGxpZXIsXG4gICAgICBuZXRfcHJpY2UsIFxuICAgICAgY3JlYXRlZF9hdCwgXG4gICAgICB1cGRhdGVkX2F0LFxuICAgICAgdmF0X2lkLFxuICAgICAgY3VycmVuY3lfaWQsXG4gICAgICB1bml0c19pZCxcbiAgICAgIHBhcnRuZXJzX2lkLFxuICAgICAgdmF0IChcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGt1bGNzXG4gICAgICApLFxuICAgICAgY3VycmVuY2llcyAoXG4gICAgICAgIGlkLFxuICAgICAgICBuYW1lXG4gICAgICApLFxuICAgICAgdW5pdHMgKFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc2hvcnRmb3JtXG4gICAgICApLFxuICAgICAgcGFydG5lcnMgKFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZVxuICAgICAgKVxuICAgIGApXG4gICAgLmVxKCdpZCcsIGlkKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYWNjZXNzb3J5OicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBUcmFuc2Zvcm0gdGhlIGRhdGEgdG8gaW5jbHVkZSBjYWxjdWxhdGVkIGZpZWxkc1xuICBjb25zdCB0cmFuc2Zvcm1lZERhdGEgPSB7XG4gICAgLi4uZGF0YSxcbiAgICB2YXRfbmFtZTogZGF0YS52YXQ/Lm5hbWUgfHwgJycsXG4gICAgdmF0X3BlcmNlbnQ6IGRhdGEudmF0Py5rdWxjcyB8fCAwLFxuICAgIGN1cnJlbmN5X25hbWU6IGRhdGEuY3VycmVuY2llcz8ubmFtZSB8fCAnJyxcbiAgICB1bml0X25hbWU6IGRhdGEudW5pdHM/Lm5hbWUgfHwgJycsXG4gICAgdW5pdF9zaG9ydGZvcm06IGRhdGEudW5pdHM/LnNob3J0Zm9ybSB8fCAnJyxcbiAgICBwYXJ0bmVyX25hbWU6IGRhdGEucGFydG5lcnM/Lm5hbWUgfHwgJycsXG4gICAgdmF0X2Ftb3VudDogKGRhdGEubmV0X3ByaWNlICogKGRhdGEudmF0Py5rdWxjcyB8fCAwKSkgLyAxMDAsXG4gICAgZ3Jvc3NfcHJpY2U6IGRhdGEubmV0X3ByaWNlICsgKChkYXRhLm5ldF9wcmljZSAqIChkYXRhLnZhdD8ua3VsY3MgfHwgMCkpIC8gMTAwKVxuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybWVkRGF0YVxufVxuXG5cbi8vIFdvcmtlcnMgZnVuY3Rpb25zXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsV29ya2VycygpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3dvcmtlcnMnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBuaWNrbmFtZSwgbW9iaWxlLCBjb2xvciwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ25hbWUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuXG4gIGNvbnN0IHF1ZXJ5VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGxvZ1RpbWluZygnV29ya2VycyBEQiBRdWVyeScsIHN0YXJ0VGltZSwgYGZldGNoZWQgJHtkYXRhPy5sZW5ndGggfHwgMH0gcmVjb3Jkc2ApXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgd29ya2VyczonLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGxvZ1RpbWluZygnV29ya2VycyBUb3RhbCcsIHN0YXJ0VGltZSwgYHJldHVybmVkICR7ZGF0YT8ubGVuZ3RoIHx8IDB9IHJlY29yZHNgKVxuICByZXR1cm4gZGF0YSB8fCBbXVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0V29ya2VyQnlJZChpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgLmZyb20oJ3dvcmtlcnMnKVxuICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBuaWNrbmFtZSwgbW9iaWxlLCBjb2xvciwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCcpXG4gICAgLmVxKCdpZCcsIGlkKVxuICAgIC5pcygnZGVsZXRlZF9hdCcsIG51bGwpXG4gICAgLnNpbmdsZSgpXG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgd29ya2VyOicsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG4vLyBTaG9wIE9yZGVycyBmdW5jdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxTaG9wT3JkZXJzKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VTZXJ2ZXJcbiAgICAuZnJvbSgnc2hvcF9vcmRlcnMnKVxuICAgIC5zZWxlY3QoYFxuICAgICAgaWQsXG4gICAgICBvcmRlcl9udW1iZXIsXG4gICAgICB3b3JrZXJfaWQsXG4gICAgICBjdXN0b21lcl9uYW1lLFxuICAgICAgY3VzdG9tZXJfZW1haWwsXG4gICAgICBjdXN0b21lcl9tb2JpbGUsXG4gICAgICBjdXN0b21lcl9kaXNjb3VudCxcbiAgICAgIGJpbGxpbmdfbmFtZSxcbiAgICAgIGJpbGxpbmdfY291bnRyeSxcbiAgICAgIGJpbGxpbmdfY2l0eSxcbiAgICAgIGJpbGxpbmdfcG9zdGFsX2NvZGUsXG4gICAgICBiaWxsaW5nX3N0cmVldCxcbiAgICAgIGJpbGxpbmdfaG91c2VfbnVtYmVyLFxuICAgICAgYmlsbGluZ190YXhfbnVtYmVyLFxuICAgICAgYmlsbGluZ19jb21wYW55X3JlZ19udW1iZXIsXG4gICAgICBzdGF0dXMsXG4gICAgICBjcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdCxcbiAgICAgIHdvcmtlcnMobmFtZSwgbmlja25hbWUpLFxuICAgICAgc2hvcF9vcmRlcl9pdGVtcyhcbiAgICAgICAgaWQsXG4gICAgICAgIHByb2R1Y3RfbmFtZSxcbiAgICAgICAgc2t1LFxuICAgICAgICB0eXBlLFxuICAgICAgICBxdWFudGl0eSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBiYXNlX3ByaWNlLFxuICAgICAgICBtdWx0aXBsaWVyLFxuICAgICAgICB2YXRfaWQsXG4gICAgICAgIGN1cnJlbmN5X2lkLFxuICAgICAgICB1bml0cyhuYW1lLCBzaG9ydGZvcm0pLFxuICAgICAgICBwYXJ0bmVycyhuYW1lKVxuICAgICAgKVxuICAgIGApXG4gICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcblxuICBjb25zdCBxdWVyeVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICBsb2dUaW1pbmcoJ2dldEFsbFNob3BPcmRlcnMgUXVlcnknLCBzdGFydFRpbWUsIGBGb3VuZCAke2RhdGE/Lmxlbmd0aCB8fCAwfSBvcmRlcnNgKVxuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNob3Agb3JkZXJzOicsIGVycm9yKVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLy8gVHJhbnNmb3JtIGRhdGEgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICBjb25zdCB0cmFuc2Zvcm1lZE9yZGVycyA9IGRhdGE/Lm1hcChvcmRlciA9PiAoe1xuICAgIGlkOiBvcmRlci5pZCxcbiAgICBvcmRlcl9udW1iZXI6IG9yZGVyLm9yZGVyX251bWJlcixcbiAgICB3b3JrZXJfaWQ6IG9yZGVyLndvcmtlcl9pZCxcbiAgICB3b3JrZXJfbmFtZTogb3JkZXIud29ya2Vycz8ubmFtZSB8fCAnJyxcbiAgICB3b3JrZXJfbmlja25hbWU6IG9yZGVyLndvcmtlcnM/Lm5pY2tuYW1lIHx8ICcnLFxuICAgIGN1c3RvbWVyX25hbWU6IG9yZGVyLmN1c3RvbWVyX25hbWUsXG4gICAgY3VzdG9tZXJfZW1haWw6IG9yZGVyLmN1c3RvbWVyX2VtYWlsLFxuICAgIGN1c3RvbWVyX21vYmlsZTogb3JkZXIuY3VzdG9tZXJfbW9iaWxlLFxuICAgIGN1c3RvbWVyX2Rpc2NvdW50OiBvcmRlci5jdXN0b21lcl9kaXNjb3VudCxcbiAgICBiaWxsaW5nX25hbWU6IG9yZGVyLmJpbGxpbmdfbmFtZSxcbiAgICBiaWxsaW5nX2NvdW50cnk6IG9yZGVyLmJpbGxpbmdfY291bnRyeSxcbiAgICBiaWxsaW5nX2NpdHk6IG9yZGVyLmJpbGxpbmdfY2l0eSxcbiAgICBiaWxsaW5nX3Bvc3RhbF9jb2RlOiBvcmRlci5iaWxsaW5nX3Bvc3RhbF9jb2RlLFxuICAgIGJpbGxpbmdfc3RyZWV0OiBvcmRlci5iaWxsaW5nX3N0cmVldCxcbiAgICBiaWxsaW5nX2hvdXNlX251bWJlcjogb3JkZXIuYmlsbGluZ19ob3VzZV9udW1iZXIsXG4gICAgYmlsbGluZ190YXhfbnVtYmVyOiBvcmRlci5iaWxsaW5nX3RheF9udW1iZXIsXG4gICAgYmlsbGluZ19jb21wYW55X3JlZ19udW1iZXI6IG9yZGVyLmJpbGxpbmdfY29tcGFueV9yZWdfbnVtYmVyLFxuICAgIHN0YXR1czogb3JkZXIuc3RhdHVzLFxuICAgIGNyZWF0ZWRfYXQ6IG9yZGVyLmNyZWF0ZWRfYXQsXG4gICAgdXBkYXRlZF9hdDogb3JkZXIudXBkYXRlZF9hdCxcbiAgICBpdGVtc19jb3VudDogb3JkZXIuc2hvcF9vcmRlcl9pdGVtcz8ubGVuZ3RoIHx8IDAsXG4gICAgaXRlbXM6IG9yZGVyLnNob3Bfb3JkZXJfaXRlbXM/Lm1hcChpdGVtID0+ICh7XG4gICAgICBpZDogaXRlbS5pZCxcbiAgICAgIHByb2R1Y3RfbmFtZTogaXRlbS5wcm9kdWN0X25hbWUsXG4gICAgICBza3U6IGl0ZW0uc2t1LFxuICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgcXVhbnRpdHk6IGl0ZW0ucXVhbnRpdHksXG4gICAgICBzdGF0dXM6IGl0ZW0uc3RhdHVzLFxuICAgICAgYmFzZV9wcmljZTogaXRlbS5iYXNlX3ByaWNlLFxuICAgICAgbXVsdGlwbGllcjogaXRlbS5tdWx0aXBsaWVyLFxuICAgICAgdmF0X2lkOiBpdGVtLnZhdF9pZCxcbiAgICAgIGN1cnJlbmN5X2lkOiBpdGVtLmN1cnJlbmN5X2lkLFxuICAgICAgdW5pdF9uYW1lOiBpdGVtLnVuaXRzPy5uYW1lIHx8ICcnLFxuICAgICAgdW5pdF9zaG9ydGZvcm06IGl0ZW0udW5pdHM/LnNob3J0Zm9ybSB8fCAnJyxcbiAgICAgIHBhcnRuZXJfbmFtZTogaXRlbS5wYXJ0bmVycz8ubmFtZSB8fCAnJ1xuICAgIH0pKSB8fCBbXVxuICB9KSkgfHwgW11cblxuICBsb2dUaW1pbmcoJ2dldEFsbFNob3BPcmRlcnMgVG90YWwnLCBzdGFydFRpbWUsIGBUcmFuc2Zvcm1lZCAke3RyYW5zZm9ybWVkT3JkZXJzLmxlbmd0aH0gb3JkZXJzYClcbiAgcmV0dXJuIHRyYW5zZm9ybWVkT3JkZXJzXG59XG5cbi8vIEdldCBzaW5nbGUgc2hvcCBvcmRlciBieSBJRCB3aXRoIGFsbCBkYXRhIChmb3IgZGV0YWlsIHBhZ2UpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2hvcE9yZGVyQnlJZChvcmRlcklkOiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgXG4gIGNvbnNvbGUubG9nKGBbU1NSXSBGZXRjaGluZyBzaG9wIG9yZGVyICR7b3JkZXJJZH1gKVxuXG4gIHRyeSB7XG4gICAgLy8gRmV0Y2ggYWxsIGRhdGEgaW4gcGFyYWxsZWxcbiAgICBjb25zdCBwYXJhbGxlbFN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgXG4gICAgY29uc3QgW29yZGVyUmVzdWx0LCB0ZW5hbnRDb21wYW55XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIC8vIDEuIFNob3Agb3JkZXIgd2l0aCB3b3JrZXIgZGF0YVxuICAgICAgc3VwYWJhc2VTZXJ2ZXJcbiAgICAgICAgLmZyb20oJ3Nob3Bfb3JkZXJzJylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgb3JkZXJfbnVtYmVyLFxuICAgICAgICAgIHdvcmtlcl9pZCxcbiAgICAgICAgICBjdXN0b21lcl9uYW1lLFxuICAgICAgICAgIGN1c3RvbWVyX2VtYWlsLFxuICAgICAgICAgIGN1c3RvbWVyX21vYmlsZSxcbiAgICAgICAgICBjdXN0b21lcl9kaXNjb3VudCxcbiAgICAgICAgICBiaWxsaW5nX25hbWUsXG4gICAgICAgICAgYmlsbGluZ19jb3VudHJ5LFxuICAgICAgICAgIGJpbGxpbmdfY2l0eSxcbiAgICAgICAgICBiaWxsaW5nX3Bvc3RhbF9jb2RlLFxuICAgICAgICAgIGJpbGxpbmdfc3RyZWV0LFxuICAgICAgICAgIGJpbGxpbmdfaG91c2VfbnVtYmVyLFxuICAgICAgICAgIGJpbGxpbmdfdGF4X251bWJlcixcbiAgICAgICAgICBiaWxsaW5nX2NvbXBhbnlfcmVnX251bWJlcixcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgY3JlYXRlZF9hdCxcbiAgICAgICAgICB1cGRhdGVkX2F0LFxuICAgICAgICAgIHdvcmtlcnMoXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBuaWNrbmFtZSxcbiAgICAgICAgICAgIG1vYmlsZSxcbiAgICAgICAgICAgIGNvbG9yXG4gICAgICAgICAgKVxuICAgICAgICBgKVxuICAgICAgICAuZXEoJ2lkJywgb3JkZXJJZClcbiAgICAgICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAgICAgLnNpbmdsZSgpLFxuXG4gICAgICAvLyAyLiBUZW5hbnQgY29tcGFueVxuICAgICAgZ2V0VGVuYW50Q29tcGFueSgpXG4gICAgXSlcblxuICAgIC8vIDMuIFNob3Agb3JkZXIgaXRlbXMgd2l0aCByZWxhdGVkIGRhdGFcbiAgICBjb25zdCB7IGRhdGE6IGl0ZW1zRGF0YSwgZXJyb3I6IGl0ZW1zRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlU2VydmVyXG4gICAgICAuZnJvbSgnc2hvcF9vcmRlcl9pdGVtcycpXG4gICAgICAuc2VsZWN0KGBcbiAgICAgICAgaWQsXG4gICAgICAgIHByb2R1Y3RfbmFtZSxcbiAgICAgICAgc2t1LFxuICAgICAgICB0eXBlLFxuICAgICAgICBiYXNlX3ByaWNlLFxuICAgICAgICBtdWx0aXBsaWVyLFxuICAgICAgICBxdWFudGl0eSxcbiAgICAgICAgbWVnamVneXplcyxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBjcmVhdGVkX2F0LFxuICAgICAgICB1bml0cyhcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHNob3J0Zm9ybVxuICAgICAgICApLFxuICAgICAgICBwYXJ0bmVycyhcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lXG4gICAgICAgICksXG4gICAgICAgIHZhdChcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBrdWxjc1xuICAgICAgICApLFxuICAgICAgICBjdXJyZW5jaWVzKFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKVxuICAgICAgYClcbiAgICAgIC5lcSgnb3JkZXJfaWQnLCBvcmRlcklkKVxuICAgICAgLmlzKCdkZWxldGVkX2F0JywgbnVsbClcbiAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG5cbiAgICBsb2dUaW1pbmcoJ1BhcmFsbGVsIFF1ZXJpZXMgQ29tcGxldGUnLCBwYXJhbGxlbFN0YXJ0VGltZSwgJ2FsbCBxdWVyaWVzIGV4ZWN1dGVkIGluIHBhcmFsbGVsJylcblxuICAgIC8vIEV4dHJhY3QgZGF0YSBhbmQgZXJyb3JzIGZyb20gcmVzdWx0c1xuICAgIGNvbnN0IHsgZGF0YTogb3JkZXIsIGVycm9yOiBvcmRlckVycm9yIH0gPSBvcmRlclJlc3VsdFxuXG4gICAgLy8gSGFuZGxlIGVycm9yc1xuICAgIGlmIChvcmRlckVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBzaG9wIG9yZGVyOicsIG9yZGVyRXJyb3IpXG4gICAgICBsb2dUaW1pbmcoJ1Nob3AgT3JkZXIgRmV0Y2ggRmFpbGVkJywgc3RhcnRUaW1lKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAoaXRlbXNFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgc2hvcCBvcmRlciBpdGVtczonLCBpdGVtc0Vycm9yKVxuICAgICAgbG9nVGltaW5nKCdTaG9wIE9yZGVyIEl0ZW1zIEZldGNoIEZhaWxlZCcsIHN0YXJ0VGltZSlcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgaWYgKCFvcmRlcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1NTUl0gU2hvcCBvcmRlciBub3QgZm91bmQ6Jywgb3JkZXJJZClcbiAgICAgIGxvZ1RpbWluZygnU2hvcCBPcmRlciBOb3QgRm91bmQnLCBzdGFydFRpbWUpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSB0b3RhbHNcbiAgICBjb25zdCBpdGVtcyA9IGl0ZW1zRGF0YSB8fCBbXVxuICAgIGNvbnN0IHRvdGFscyA9IGl0ZW1zLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgICBjb25zdCBuZXRQcmljZSA9IGl0ZW0uYmFzZV9wcmljZSAqIGl0ZW0ubXVsdGlwbGllclxuICAgICAgY29uc3QgZ3Jvc3NQcmljZSA9IG5ldFByaWNlICogKDEgKyAoaXRlbS52YXQ/Lmt1bGNzIHx8IDApIC8gMTAwKVxuICAgICAgY29uc3QgaXRlbVRvdGFsID0gZ3Jvc3NQcmljZSAqIGl0ZW0ucXVhbnRpdHlcbiAgICAgIGNvbnN0IGRpc2NvdW50QW1vdW50ID0gaXRlbVRvdGFsICogKG9yZGVyLmN1c3RvbWVyX2Rpc2NvdW50IC8gMTAwKVxuICAgICAgXG4gICAgICBhY2MudG90YWxfbmV0ICs9IG5ldFByaWNlICogaXRlbS5xdWFudGl0eVxuICAgICAgYWNjLnRvdGFsX2dyb3NzICs9IGl0ZW1Ub3RhbFxuICAgICAgYWNjLmZpbmFsX3RvdGFsICs9IGl0ZW1Ub3RhbCAtIGRpc2NvdW50QW1vdW50XG4gICAgICBhY2MuZGlzY291bnRfYW1vdW50ICs9IGRpc2NvdW50QW1vdW50XG4gICAgICBcbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCB7XG4gICAgICB0b3RhbF9uZXQ6IDAsXG4gICAgICB0b3RhbF9ncm9zczogMCxcbiAgICAgIGZpbmFsX3RvdGFsOiAwLFxuICAgICAgZGlzY291bnRfYW1vdW50OiAwXG4gICAgfSlcblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgcmVzcG9uc2VcbiAgICBjb25zdCB0cmFuc2Zvcm1lZE9yZGVyID0ge1xuICAgICAgaWQ6IG9yZGVyLmlkLFxuICAgICAgb3JkZXJfbnVtYmVyOiBvcmRlci5vcmRlcl9udW1iZXIsXG4gICAgICB3b3JrZXJfaWQ6IG9yZGVyLndvcmtlcl9pZCxcbiAgICAgIHdvcmtlcjogb3JkZXIud29ya2VycyxcbiAgICAgIGN1c3RvbWVyX25hbWU6IG9yZGVyLmN1c3RvbWVyX25hbWUsXG4gICAgICBjdXN0b21lcl9lbWFpbDogb3JkZXIuY3VzdG9tZXJfZW1haWwsXG4gICAgICBjdXN0b21lcl9tb2JpbGU6IG9yZGVyLmN1c3RvbWVyX21vYmlsZSxcbiAgICAgIGN1c3RvbWVyX2Rpc2NvdW50OiBvcmRlci5jdXN0b21lcl9kaXNjb3VudCxcbiAgICAgIGJpbGxpbmdfbmFtZTogb3JkZXIuYmlsbGluZ19uYW1lLFxuICAgICAgYmlsbGluZ19jb3VudHJ5OiBvcmRlci5iaWxsaW5nX2NvdW50cnksXG4gICAgICBiaWxsaW5nX2NpdHk6IG9yZGVyLmJpbGxpbmdfY2l0eSxcbiAgICAgIGJpbGxpbmdfcG9zdGFsX2NvZGU6IG9yZGVyLmJpbGxpbmdfcG9zdGFsX2NvZGUsXG4gICAgICBiaWxsaW5nX3N0cmVldDogb3JkZXIuYmlsbGluZ19zdHJlZXQsXG4gICAgICBiaWxsaW5nX2hvdXNlX251bWJlcjogb3JkZXIuYmlsbGluZ19ob3VzZV9udW1iZXIsXG4gICAgICBiaWxsaW5nX3RheF9udW1iZXI6IG9yZGVyLmJpbGxpbmdfdGF4X251bWJlcixcbiAgICAgIGJpbGxpbmdfY29tcGFueV9yZWdfbnVtYmVyOiBvcmRlci5iaWxsaW5nX2NvbXBhbnlfcmVnX251bWJlcixcbiAgICAgIHN0YXR1czogb3JkZXIuc3RhdHVzLFxuICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgdGVuYW50X2NvbXBhbnk6IHRlbmFudENvbXBhbnksXG4gICAgICB0b3RhbHM6IHRvdGFscyxcbiAgICAgIGNyZWF0ZWRfYXQ6IG9yZGVyLmNyZWF0ZWRfYXQsXG4gICAgICB1cGRhdGVkX2F0OiBvcmRlci51cGRhdGVkX2F0XG4gICAgfVxuXG4gICAgbG9nVGltaW5nKCdTaG9wIE9yZGVyIEZldGNoIFRvdGFsJywgc3RhcnRUaW1lLCBgcmV0dXJuZWQgb3JkZXIgJHtvcmRlci5vcmRlcl9udW1iZXJ9IHdpdGggJHtpdGVtcy5sZW5ndGh9IGl0ZW1zYClcbiAgICBjb25zb2xlLmxvZyhgW1NTUl0gU2hvcCBvcmRlciBmZXRjaGVkIHN1Y2Nlc3NmdWxseTogJHtvcmRlci5vcmRlcl9udW1iZXJ9YClcbiAgICBcbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcmRlclxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW1NTUl0gRXJyb3IgZmV0Y2hpbmcgc2hvcCBvcmRlcjonLCBlcnJvcilcbiAgICBsb2dUaW1pbmcoJ1Nob3AgT3JkZXIgRmV0Y2ggRXJyb3InLCBzdGFydFRpbWUpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vLyBGZXRjaCBhbGwgc2hvcCBvcmRlciBpdGVtcyBmb3Igc3VwcGxpZXIgb3JkZXJzIHBhZ2VcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxTaG9wT3JkZXJJdGVtcyhwYWdlOiBudW1iZXIgPSAxLCBsaW1pdDogbnVtYmVyID0gNTAsIHNlYXJjaDogc3RyaW5nID0gJycsIHN0YXR1czogc3RyaW5nID0gJycsIHBhcnRuZXJJZDogc3RyaW5nID0gJycpIHtcbiAgaWYgKCFjaGVja1N1cGFiYXNlQ29uZmlnKCkpIHJldHVybiB7IGl0ZW1zOiBbXSwgdG90YWxDb3VudDogMCwgdG90YWxQYWdlczogMCB9XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgY29uc3Qgb2Zmc2V0ID0gKHBhZ2UgLSAxKSAqIGxpbWl0XG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgW1NTUl0gRmV0Y2hpbmcgc2hvcCBvcmRlciBpdGVtcyBwYWdlICR7cGFnZX0sIGxpbWl0ICR7bGltaXR9LCBzZWFyY2g6IFwiJHtzZWFyY2h9XCIsIHN0YXR1czogXCIke3N0YXR1c31cIiwgcGFydG5lcjogXCIke3BhcnRuZXJJZH1cImApXG5cbiAgICAvLyBCdWlsZCB0aGUgcXVlcnkgd2l0aCBqb2lucyB0byBnZXQgYWxsIHJlbGF0ZWQgZGF0YVxuICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlU2VydmVyXG4gICAgICAuZnJvbSgnc2hvcF9vcmRlcl9pdGVtcycpXG4gICAgICAuc2VsZWN0KGBcbiAgICAgICAgaWQsXG4gICAgICAgIHByb2R1Y3RfbmFtZSxcbiAgICAgICAgc2t1LFxuICAgICAgICBxdWFudGl0eSxcbiAgICAgICAgYmFzZV9wcmljZSxcbiAgICAgICAgbXVsdGlwbGllcixcbiAgICAgICAgbWVnamVneXplcyxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBjcmVhdGVkX2F0LFxuICAgICAgICB1cGRhdGVkX2F0LFxuICAgICAgICBvcmRlcl9pZCxcbiAgICAgICAgdW5pdHNfaWQsXG4gICAgICAgIHBhcnRuZXJfaWQsXG4gICAgICAgIHZhdF9pZCxcbiAgICAgICAgc2hvcF9vcmRlcnMhaW5uZXIgKFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIGN1c3RvbWVyX25hbWUsXG4gICAgICAgICAgb3JkZXJfbnVtYmVyXG4gICAgICAgICksXG4gICAgICAgIHVuaXRzIChcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHNob3J0Zm9ybVxuICAgICAgICApLFxuICAgICAgICBwYXJ0bmVycyAoXG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbmFtZVxuICAgICAgICApLFxuICAgICAgICB2YXQgKFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAga3VsY3NcbiAgICAgICAgKVxuICAgICAgYCwgeyBjb3VudDogJ2V4YWN0JyB9KVxuICAgICAgLmlzKCdzaG9wX29yZGVycy5kZWxldGVkX2F0JywgbnVsbClcblxuICAgIC8vIEFwcGx5IGZpbHRlcnNcbiAgICBpZiAoc2VhcmNoICYmIHNlYXJjaC5sZW5ndGggPj0gMikge1xuICAgICAgcXVlcnkgPSBxdWVyeS5vcihgcHJvZHVjdF9uYW1lLmlsaWtlLiUke3NlYXJjaH0lLHNrdS5pbGlrZS4lJHtzZWFyY2h9JSxzaG9wX29yZGVycy5jdXN0b21lcl9uYW1lLmlsaWtlLiUke3NlYXJjaH0lYClcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdzdGF0dXMnLCBzdGF0dXMpXG4gICAgfVxuXG4gICAgaWYgKHBhcnRuZXJJZCkge1xuICAgICAgcXVlcnkgPSBxdWVyeS5lcSgncGFydG5lcl9pZCcsIHBhcnRuZXJJZClcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yLCBjb3VudCB9ID0gYXdhaXQgcXVlcnlcbiAgICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgLnJhbmdlKG9mZnNldCwgb2Zmc2V0ICsgbGltaXQgLSAxKVxuXG4gICAgbG9nVGltaW5nKCdTaG9wIE9yZGVyIEl0ZW1zIERCIFF1ZXJ5Jywgc3RhcnRUaW1lLCBgRm91bmQgJHtkYXRhPy5sZW5ndGggfHwgMH0gaXRlbXNgKVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU1NSXSBFcnJvciBmZXRjaGluZyBzaG9wIG9yZGVyIGl0ZW1zOicsIGVycm9yKVxuICAgICAgcmV0dXJuIHsgaXRlbXM6IFtdLCB0b3RhbENvdW50OiAwLCB0b3RhbFBhZ2VzOiAwIH1cbiAgICB9XG5cbiAgICBjb25zdCB0b3RhbENvdW50ID0gY291bnQgfHwgMFxuICAgIGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwodG90YWxDb3VudCAvIGxpbWl0KVxuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIGluY2x1ZGUgY2FsY3VsYXRlZCBmaWVsZHNcbiAgICBjb25zdCBpdGVtcyA9IGRhdGE/Lm1hcChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGdyb3NzVW5pdFByaWNlID0gTWF0aC5yb3VuZCgoaXRlbS5iYXNlX3ByaWNlIHx8IDApICogKGl0ZW0ubXVsdGlwbGllciB8fCAxKSAqICgxICsgKGl0ZW0udmF0Py5rdWxjcyB8fCAwKSAvIDEwMCkpXG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBwcm9kdWN0X25hbWU6IGl0ZW0ucHJvZHVjdF9uYW1lLFxuICAgICAgICBza3U6IGl0ZW0uc2t1LFxuICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgbWVnamVneXplczogaXRlbS5tZWdqZWd5emVzLFxuICAgICAgICBzdGF0dXM6IGl0ZW0uc3RhdHVzLFxuICAgICAgICBjcmVhdGVkX2F0OiBpdGVtLmNyZWF0ZWRfYXQsXG4gICAgICAgIHVwZGF0ZWRfYXQ6IGl0ZW0udXBkYXRlZF9hdCxcbiAgICAgICAgb3JkZXJfaWQ6IGl0ZW0ub3JkZXJfaWQsXG4gICAgICAgIGN1c3RvbWVyX25hbWU6IGl0ZW0uc2hvcF9vcmRlcnM/LmN1c3RvbWVyX25hbWUsXG4gICAgICAgIG9yZGVyX251bWJlcjogaXRlbS5zaG9wX29yZGVycz8ub3JkZXJfbnVtYmVyLFxuICAgICAgICB1bml0X25hbWU6IGl0ZW0udW5pdHM/Lm5hbWUsXG4gICAgICAgIHVuaXRfc2hvcnRmb3JtOiBpdGVtLnVuaXRzPy5zaG9ydGZvcm0sXG4gICAgICAgIHBhcnRuZXJfbmFtZTogaXRlbS5wYXJ0bmVycz8ubmFtZSxcbiAgICAgICAgcGFydG5lcl9pZDogaXRlbS5wYXJ0bmVyX2lkLFxuICAgICAgICB2YXRfbmFtZTogaXRlbS52YXQ/Lm5hbWUsXG4gICAgICAgIHZhdF9wZXJjZW50OiBpdGVtLnZhdD8ua3VsY3MsXG4gICAgICAgIGJhc2VfcHJpY2U6IGl0ZW0uYmFzZV9wcmljZSxcbiAgICAgICAgbXVsdGlwbGllcjogaXRlbS5tdWx0aXBsaWVyLFxuICAgICAgICBncm9zc191bml0X3ByaWNlOiBncm9zc1VuaXRQcmljZSxcbiAgICAgICAgZ3Jvc3NfdG90YWw6IE1hdGgucm91bmQoZ3Jvc3NVbml0UHJpY2UgKiBpdGVtLnF1YW50aXR5KVxuICAgICAgfVxuICAgIH0pIHx8IFtdXG5cbiAgICBsb2dUaW1pbmcoJ1Nob3AgT3JkZXIgSXRlbXMgVG90YWwnLCBzdGFydFRpbWUsIGBUcmFuc2Zvcm1lZCAke2l0ZW1zLmxlbmd0aH0gaXRlbXNgKVxuICAgIGNvbnNvbGUubG9nKGBbU1NSXSBTaG9wIG9yZGVyIGl0ZW1zIGZldGNoZWQgc3VjY2Vzc2Z1bGx5OiAke2l0ZW1zLmxlbmd0aH0gaXRlbXMsIHRvdGFsOiAke3RvdGFsQ291bnR9YClcblxuICAgIHJldHVybiB7XG4gICAgICBpdGVtcyxcbiAgICAgIHRvdGFsQ291bnQsXG4gICAgICB0b3RhbFBhZ2VzLFxuICAgICAgY3VycmVudFBhZ2U6IHBhZ2UsXG4gICAgICBsaW1pdFxuICAgIH1cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tTU1JdIEVycm9yIGZldGNoaW5nIHNob3Agb3JkZXIgaXRlbXM6JywgZXJyb3IpXG4gICAgbG9nVGltaW5nKCdTaG9wIE9yZGVyIEl0ZW1zIEZldGNoIEVycm9yJywgc3RhcnRUaW1lKVxuICAgIHJldHVybiB7IGl0ZW1zOiBbXSwgdG90YWxDb3VudDogMCwgdG90YWxQYWdlczogMCB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJpc0RldiIsInByb2Nlc3MiLCJsb2dUaW1pbmciLCJvcGVyYXRpb24iLCJzdGFydFRpbWUiLCJhZGRpdGlvbmFsSW5mbyIsImR1cmF0aW9uIiwicGVyZm9ybWFuY2UiLCJub3ciLCJjb25zb2xlIiwibG9nIiwidG9GaXhlZCIsImNoZWNrU3VwYWJhc2VDb25maWciLCJzdXBhYmFzZVNlcnZlciIsIndhcm4iLCJzdXBhYmFzZVVybCIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlU2VydmljZUtleSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJpc1N1cGFiYXNlQ29uZmlndXJlZCIsImNyZWF0ZU1vY2tTdXBhYmFzZUNsaWVudCIsImZyb20iLCJzZWxlY3QiLCJlcSIsImlzIiwic2luZ2xlIiwiZGF0YSIsImVycm9yIiwib3JkZXIiLCJhdXRoIiwicGVyc2lzdFNlc3Npb24iLCJhdXRvUmVmcmVzaFRva2VuIiwiZGV0ZWN0U2Vzc2lvbkluVXJsIiwiZ2xvYmFsIiwiaGVhZGVycyIsInJlYWx0aW1lIiwiZW5hYmxlZCIsImdldEJyYW5kQnlJZCIsImlkIiwiZ2V0QWxsQnJhbmRzIiwiYXNjZW5kaW5nIiwicXVlcnlUaW1lIiwibGVuZ3RoIiwiZ2V0TWF0ZXJpYWxCeUlkIiwibWF0ZXJpYWxEYXRhIiwic2V0dGluZ3NEYXRhIiwibWFjaGluZURhdGEiLCJuYW1lIiwibGVuZ3RoX21tIiwid2lkdGhfbW0iLCJ0aGlja25lc3NfbW0iLCJncmFpbl9kaXJlY3Rpb24iLCJCb29sZWFuIiwib25fc3RvY2siLCJ1bmRlZmluZWQiLCJhY3RpdmUiLCJpbWFnZV91cmwiLCJicmFuZF9pZCIsImJyYW5kX25hbWUiLCJicmFuZHMiLCJrZXJmX21tIiwidHJpbV90b3BfbW0iLCJ0cmltX3JpZ2h0X21tIiwidHJpbV9ib3R0b21fbW0iLCJ0cmltX2xlZnRfbW0iLCJyb3RhdGFibGUiLCJ3YXN0ZV9tdWx0aSIsInVzYWdlX2xpbWl0IiwibWFjaGluZV9jb2RlIiwiYmFzZV9wcmljZSIsIm11bHRpcGxpZXIiLCJwcmljZV9wZXJfc3FtIiwicGFydG5lcnNfaWQiLCJ1bml0c19pZCIsImN1cnJlbmN5X2lkIiwidmF0X2lkIiwiY3VycmVuY2llcyIsInZhdCIsImNyZWF0ZWRfYXQiLCJ1cGRhdGVkX2F0IiwiZ2V0QWxsTWF0ZXJpYWxzIiwibWF0ZXJpYWxJZHMiLCJtYXAiLCJtIiwicHJpY2luZ0RhdGEiLCJpbiIsInByaWNpbmdNYXAiLCJNYXAiLCJwIiwidmF0X3BlcmNlbnQiLCJrdWxjcyIsImN1cnJlbmN5IiwidHJhbnNmb3JtZWREYXRhIiwibWF0ZXJpYWwiLCJwcmljaW5nIiwiZ2V0IiwibWF0ZXJpYWxfbmFtZSIsImdldEFsbEJyYW5kc0Zvck1hdGVyaWFscyIsImdldFVuaXRCeUlkIiwiZ2V0QWxsVW5pdHMiLCJnZXRBbGxQcm9kdWN0aW9uTWFjaGluZXMiLCJnZXRQcm9kdWN0aW9uTWFjaGluZUJ5SWQiLCJnZXRBbGxGZWVUeXBlcyIsImZlZVR5cGUiLCJ2YXRfbmFtZSIsImN1cnJlbmN5X25hbWUiLCJ2YXRfYW1vdW50IiwibmV0X3ByaWNlIiwiZ3Jvc3NfcHJpY2UiLCJnZXRGZWVUeXBlQnlJZCIsImdldEN1cnJlbmN5QnlJZCIsImdldEFsbEN1cnJlbmNpZXMiLCJnZXRWYXRCeUlkIiwiZ2V0QWxsVmF0UmF0ZXMiLCJnZXRDdXR0aW5nRmVlIiwibGltaXQiLCJnZXRNYXRlcmlhbFByaWNlSGlzdG9yeSIsIm1hdGVyaWFsSWQiLCJlbnJpY2hlZERhdGEiLCJQcm9taXNlIiwiYWxsIiwiaCIsInVzZXJFbWFpbCIsImNoYW5nZWRfYnkiLCJ1c2VyRGF0YSIsImFkbWluIiwiZ2V0VXNlckJ5SWQiLCJ1c2VyIiwiZW1haWwiLCJlcnIiLCJjaGFuZ2VkX2J5X3VzZXIiLCJnZXRDdXN0b21lckJ5SWQiLCJnZXRBbGxDdXN0b21lcnMiLCJnZXRFZGdlTWF0ZXJpYWxCeUlkIiwiZ2V0QWxsRWRnZU1hdGVyaWFscyIsImdldEFsbEJyYW5kc0ZvckVkZ2VNYXRlcmlhbHMiLCJnZXRBbGxWYXRSYXRlc0ZvckVkZ2VNYXRlcmlhbHMiLCJnZXRBbGxMaW5lYXJNYXRlcmlhbHMiLCJsaW5lYXJNYXRlcmlhbElkcyIsImxtIiwibWFjaGluZUNvZGVzIiwibWFjaGluZUNvZGVNYXAiLCJtYyIsImxpbmVhcl9tYXRlcmlhbF9pZCIsImN1cnJlbmN5X2NvZGUiLCJnZXRMaW5lYXJNYXRlcmlhbEJ5SWQiLCJnZXRBbGxCcmFuZHNGb3JMaW5lYXJNYXRlcmlhbHMiLCJnZXRBbGxWYXRSYXRlc0ZvckxpbmVhck1hdGVyaWFscyIsImdldEFsbEN1cnJlbmNpZXNGb3JMaW5lYXJNYXRlcmlhbHMiLCJnZXRQYXJ0bmVyQnlJZCIsImdldEFsbFBhcnRuZXJzIiwiZ2V0QWxsVmF0UmF0ZXNGb3JQYXJ0bmVycyIsImdldEFsbEN1cnJlbmNpZXNGb3JQYXJ0bmVycyIsImdldENvbXBhbnlCeUlkIiwiZ2V0QWxsQ29tcGFuaWVzIiwiZ2V0VGVuYW50Q29tcGFueSIsImdldEFsbE1lZGlhRmlsZXMiLCJ0cmFuc2Zvcm1lZEZpbGVzIiwiZmlsZSIsIm9yaWdpbmFsX2ZpbGVuYW1lIiwic3RvcmVkTmFtZSIsInN0b3JlZF9maWxlbmFtZSIsInBhdGgiLCJzdG9yYWdlX3BhdGgiLCJmdWxsVXJsIiwiZnVsbF91cmwiLCJzaXplIiwiZ2V0UXVvdGVCeUlkIiwicXVvdGVJZCIsInBhcmFsbGVsU3RhcnRUaW1lIiwicXVvdGVSZXN1bHQiLCJwYW5lbHNSZXN1bHQiLCJwcmljaW5nUmVzdWx0IiwiZmVlc1Jlc3VsdCIsImFjY2Vzc29yaWVzUmVzdWx0IiwidGVuYW50Q29tcGFueSIsInBheW1lbnRzUmVzdWx0IiwicXVvdGUiLCJxdW90ZUVycm9yIiwicGFuZWxzIiwicGFuZWxzRXJyb3IiLCJwcmljaW5nRXJyb3IiLCJmZWVzIiwiZmVlc0Vycm9yIiwiYWNjZXNzb3JpZXMiLCJhY2Nlc3Nvcmllc0Vycm9yIiwicGF5bWVudHMiLCJwYXltZW50c0Vycm9yIiwibWF0ZXJpYWxfaWQiLCJlZGdlTWF0ZXJpYWxJZHMiLCJmbGF0TWFwIiwiZWRnZV9tYXRlcmlhbF9hX2lkIiwiZWRnZV9tYXRlcmlhbF9iX2lkIiwiZWRnZV9tYXRlcmlhbF9jX2lkIiwiZWRnZV9tYXRlcmlhbF9kX2lkIiwiZmlsdGVyIiwibWFjaGluZUNvZGVzU3RhcnRUaW1lIiwibWF0ZXJpYWxNYXBzIiwiZWRnZU1hdGVyaWFsTWFwcyIsInJlc29sdmUiLCJtYXRlcmlhbENvZGVNYXAiLCJlZGdlQ29kZU1hcCIsImUiLCJlZGdlX21hdGVyaWFsX2lkIiwiZW5yaWNoZWRQYW5lbHMiLCJwYW5lbCIsIm1hdGVyaWFsX21hY2hpbmVfY29kZSIsImVkZ2VfYV9jb2RlIiwiZWRnZV9iX2NvZGUiLCJlZGdlX2NfY29kZSIsImVkZ2VfZF9jb2RlIiwidHJhbnNmb3JtZWRRdW90ZSIsInF1b3RlX251bWJlciIsIm9yZGVyX251bWJlciIsInN0YXR1cyIsInBheW1lbnRfc3RhdHVzIiwiY3VzdG9tZXJfaWQiLCJkaXNjb3VudF9wZXJjZW50IiwicHJvZHVjdGlvbl9tYWNoaW5lX2lkIiwicHJvZHVjdGlvbl9kYXRlIiwiYmFyY29kZSIsInByb2R1Y3Rpb25fbWFjaGluZSIsInByb2R1Y3Rpb25fbWFjaGluZXMiLCJjdXN0b21lciIsImN1c3RvbWVycyIsInRlbmFudF9jb21wYW55IiwidG90YWxzIiwidG90YWxfbmV0IiwidG90YWxfdmF0IiwidG90YWxfZ3Jvc3MiLCJmaW5hbF90b3RhbF9hZnRlcl9kaXNjb3VudCIsImZlZXNfdG90YWxfbmV0IiwiZmVlc190b3RhbF92YXQiLCJmZWVzX3RvdGFsX2dyb3NzIiwiYWNjZXNzb3JpZXNfdG90YWxfbmV0IiwiYWNjZXNzb3JpZXNfdG90YWxfdmF0IiwiYWNjZXNzb3JpZXNfdG90YWxfZ3Jvc3MiLCJnZXRRdW90ZXNXaXRoUGFnaW5hdGlvbiIsInBhZ2UiLCJzZWFyY2hUZXJtIiwib2Zmc2V0IiwicXVlcnkiLCJjb3VudCIsInJhbmdlIiwidHJpbSIsImlsaWtlIiwicXVvdGVzIiwicXVvdGVzRXJyb3IiLCJ0b3RhbENvdW50IiwidG90YWxQYWdlcyIsInRyYW5zZm9ybWVkUXVvdGVzIiwiY3VzdG9tZXJfbmFtZSIsIk1hdGgiLCJjZWlsIiwiY3VycmVudFBhZ2UiLCJnZXRPcmRlcnNXaXRoUGFnaW5hdGlvbiIsInRyaW1tZWRTZWFyY2giLCJtYXRjaGluZ01hdGVyaWFscyIsIm1hdGVyaWFsc0Vycm9yIiwibWF0ZXJpYWxNYXRjaElkcyIsImpvaW4iLCJtYXRlcmlhbE1hdGNoZXMiLCJxdW90ZV9pZCIsImN1c3RvbWVyUXVlcnkiLCJtYXRlcmlhbFF1ZXJ5IiwiY3VzdG9tZXJSZXN1bHQiLCJtYXRlcmlhbFJlc3VsdCIsImN1c3RvbWVyT3JkZXJzIiwiY3VzdG9tZXJFcnJvciIsImN1c3RvbWVyQ291bnQiLCJtYXRlcmlhbE9yZGVycyIsIm1hdGVyaWFsRXJyb3IiLCJtYXRlcmlhbENvdW50Iiwib3JkZXJzIiwiYWxsT3JkZXJzIiwidW5pcXVlT3JkZXJzIiwiaW5kZXgiLCJzZWxmIiwiZmluZEluZGV4IiwibyIsInNvcnQiLCJhIiwiYiIsIkRhdGUiLCJnZXRUaW1lIiwicGFnaW5hdGVkT3JkZXJzIiwic2xpY2UiLCJwYXltZW50VG90YWxzIiwidG90YWxQYWlkQnlPcmRlciIsInJlZHVjZSIsImFjYyIsImFtb3VudCIsInRyYW5zZm9ybWVkT3JkZXJzIiwiY3VzdG9tZXJfbW9iaWxlIiwibW9iaWxlIiwiY3VzdG9tZXJfZW1haWwiLCJmaW5hbF90b3RhbCIsInRvdGFsX3BhaWQiLCJyZW1haW5pbmdfYmFsYW5jZSIsInByb2R1Y3Rpb25fbWFjaGluZV9uYW1lIiwibWFjaGluZV9uYW1lIiwib3JkZXJzRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhY2siLCJnZXRBbGxBY2Nlc3NvcmllcyIsImFjY2Vzc29yeSIsInVuaXRfbmFtZSIsInVuaXRzIiwidW5pdF9zaG9ydGZvcm0iLCJzaG9ydGZvcm0iLCJwYXJ0bmVyX25hbWUiLCJwYXJ0bmVycyIsImdldEFjY2Vzc29yaWVzV2l0aFBhZ2luYXRpb24iLCJoZWFkIiwiZ2V0QWNjZXNzb3J5QnlJZCIsImdldEFsbFdvcmtlcnMiLCJnZXRXb3JrZXJCeUlkIiwiZ2V0QWxsU2hvcE9yZGVycyIsIndvcmtlcl9pZCIsIndvcmtlcl9uYW1lIiwid29ya2VycyIsIndvcmtlcl9uaWNrbmFtZSIsIm5pY2tuYW1lIiwiY3VzdG9tZXJfZGlzY291bnQiLCJiaWxsaW5nX25hbWUiLCJiaWxsaW5nX2NvdW50cnkiLCJiaWxsaW5nX2NpdHkiLCJiaWxsaW5nX3Bvc3RhbF9jb2RlIiwiYmlsbGluZ19zdHJlZXQiLCJiaWxsaW5nX2hvdXNlX251bWJlciIsImJpbGxpbmdfdGF4X251bWJlciIsImJpbGxpbmdfY29tcGFueV9yZWdfbnVtYmVyIiwiaXRlbXNfY291bnQiLCJzaG9wX29yZGVyX2l0ZW1zIiwiaXRlbXMiLCJpdGVtIiwicHJvZHVjdF9uYW1lIiwic2t1IiwidHlwZSIsInF1YW50aXR5IiwiZ2V0U2hvcE9yZGVyQnlJZCIsIm9yZGVySWQiLCJvcmRlclJlc3VsdCIsIml0ZW1zRGF0YSIsIml0ZW1zRXJyb3IiLCJvcmRlckVycm9yIiwibmV0UHJpY2UiLCJncm9zc1ByaWNlIiwiaXRlbVRvdGFsIiwiZGlzY291bnRBbW91bnQiLCJkaXNjb3VudF9hbW91bnQiLCJ0cmFuc2Zvcm1lZE9yZGVyIiwid29ya2VyIiwiZ2V0QWxsU2hvcE9yZGVySXRlbXMiLCJzZWFyY2giLCJwYXJ0bmVySWQiLCJvciIsImdyb3NzVW5pdFByaWNlIiwicm91bmQiLCJtZWdqZWd5emVzIiwib3JkZXJfaWQiLCJzaG9wX29yZGVycyIsInBhcnRuZXJfaWQiLCJncm9zc191bml0X3ByaWNlIiwiZ3Jvc3NfdG90YWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fshoporder%2Fsearch%2Froute&page=%2Fapi%2Fshoporder%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fshoporder%2Fsearch%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();