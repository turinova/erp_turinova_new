/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/customers/import/route";
exports.ids = ["app/api/customers/import/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcustomers%2Fimport%2Froute&page=%2Fapi%2Fcustomers%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcustomers%2Fimport%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcustomers%2Fimport%2Froute&page=%2Fapi%2Fcustomers%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcustomers%2Fimport%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Volumes_T7_erp_turinova_new_src_app_api_customers_import_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/customers/import/route.ts */ \"(rsc)/./src/app/api/customers/import/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/customers/import/route\",\n        pathname: \"/api/customers/import\",\n        filename: \"route\",\n        bundlePath: \"app/api/customers/import/route\"\n    },\n    resolvedPagePath: \"/Volumes/T7/erp_turinova_new/src/app/api/customers/import/route.ts\",\n    nextConfigOutput,\n    userland: _Volumes_T7_erp_turinova_new_src_app_api_customers_import_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZjdXN0b21lcnMlMkZpbXBvcnQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmN1c3RvbWVycyUyRmltcG9ydCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmN1c3RvbWVycyUyRmltcG9ydCUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNrQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1ZvbHVtZXMvVDcvZXJwX3R1cmlub3ZhX25ldy9zcmMvYXBwL2FwaS9jdXN0b21lcnMvaW1wb3J0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jdXN0b21lcnMvaW1wb3J0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY3VzdG9tZXJzL2ltcG9ydFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY3VzdG9tZXJzL2ltcG9ydC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Wb2x1bWVzL1Q3L2VycF90dXJpbm92YV9uZXcvc3JjL2FwcC9hcGkvY3VzdG9tZXJzL2ltcG9ydC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcustomers%2Fimport%2Froute&page=%2Fapi%2Fcustomers%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcustomers%2Fimport%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/customers/import/route.ts":
/*!***********************************************!*\
  !*** ./src/app/api/customers/import/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase-server */ \"(rsc)/./src/lib/supabase-server.ts\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xlsx */ \"(rsc)/./node_modules/xlsx/xlsx.mjs\");\n\n\n\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get('file');\n        if (!file) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'No file'\n        }, {\n            status: 400\n        });\n        const bytes = await file.arrayBuffer();\n        const workbook = xlsx__WEBPACK_IMPORTED_MODULE_2__.read(Buffer.from(bytes), {\n            type: 'buffer'\n        });\n        const data = xlsx__WEBPACK_IMPORTED_MODULE_2__.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);\n        // Fetch existing customers by email\n        const { data: existingCustomers } = await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('customers').select('id, email').is('deleted_at', null);\n        const emailMap = new Map(existingCustomers?.map((c)=>[\n                c.email.toLowerCase(),\n                c.id\n            ]) || []);\n        let successCount = 0;\n        let errorCount = 0;\n        const errors = [];\n        for(let i = 0; i < data.length; i++){\n            const row = data[i];\n            const rowNum = i + 2;\n            try {\n                // Parse SMS notification value\n                const smsValue = row['SMS']?.toString().trim().toLowerCase();\n                const smsNotification = smsValue === 'igen' || smsValue === 'yes' || smsValue === 'true' || smsValue === '1';\n                const customerData = {\n                    name: row['Név']?.toString().trim(),\n                    email: row['E-mail']?.toString().trim(),\n                    mobile: row['Telefon']?.toString().trim() || null,\n                    discount_percent: parseFloat(row['Kedvezmény (%)']) || 0,\n                    sms_notification: smsNotification,\n                    billing_name: row['Számlázási név']?.toString().trim() || null,\n                    billing_country: row['Ország']?.toString().trim() || 'Magyarország',\n                    billing_city: row['Város']?.toString().trim() || null,\n                    billing_postal_code: row['Irányítószám']?.toString().trim() || null,\n                    billing_street: row['Utca']?.toString().trim() || null,\n                    billing_house_number: row['Házszám']?.toString().trim() || null,\n                    billing_tax_number: row['Adószám']?.toString().trim() || null,\n                    billing_company_reg_number: row['Cégjegyzékszám']?.toString().trim() || null\n                };\n                // Validate required fields\n                if (!customerData.name || !customerData.email) {\n                    errors.push(`Sor ${rowNum}: Hiányzó kötelező mezők (Név, E-mail)`);\n                    errorCount++;\n                    continue;\n                }\n                const existingId = emailMap.get(customerData.email.toLowerCase());\n                if (existingId) {\n                    // Update existing customer\n                    await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('customers').update(customerData).eq('id', existingId);\n                } else {\n                    // Create new customer\n                    await _lib_supabase_server__WEBPACK_IMPORTED_MODULE_1__.supabaseServer.from('customers').insert(customerData);\n                }\n                successCount++;\n            } catch (error) {\n                errors.push(`Sor ${rowNum}: ${error instanceof Error ? error.message : 'Ismeretlen hiba'}`);\n                errorCount++;\n            }\n        }\n        if (errors.length > 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Import completed with errors',\n                details: errors,\n                successCount,\n                errorCount\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Import successful',\n            successCount,\n            errorCount: 0\n        });\n    } catch (error) {\n        console.error('Import error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Import failed'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/customers/import/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase-server.ts":
/*!************************************!*\
  !*** ./src/lib/supabase-server.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccessoriesWithPagination: () => (/* binding */ getAccessoriesWithPagination),\n/* harmony export */   getAccessoryById: () => (/* binding */ getAccessoryById),\n/* harmony export */   getAllAccessories: () => (/* binding */ getAllAccessories),\n/* harmony export */   getAllBrands: () => (/* binding */ getAllBrands),\n/* harmony export */   getAllBrandsForEdgeMaterials: () => (/* binding */ getAllBrandsForEdgeMaterials),\n/* harmony export */   getAllBrandsForLinearMaterials: () => (/* binding */ getAllBrandsForLinearMaterials),\n/* harmony export */   getAllBrandsForMaterials: () => (/* binding */ getAllBrandsForMaterials),\n/* harmony export */   getAllCompanies: () => (/* binding */ getAllCompanies),\n/* harmony export */   getAllCurrencies: () => (/* binding */ getAllCurrencies),\n/* harmony export */   getAllCurrenciesForLinearMaterials: () => (/* binding */ getAllCurrenciesForLinearMaterials),\n/* harmony export */   getAllCurrenciesForPartners: () => (/* binding */ getAllCurrenciesForPartners),\n/* harmony export */   getAllCustomers: () => (/* binding */ getAllCustomers),\n/* harmony export */   getAllEdgeMaterials: () => (/* binding */ getAllEdgeMaterials),\n/* harmony export */   getAllFeeTypes: () => (/* binding */ getAllFeeTypes),\n/* harmony export */   getAllLinearMaterials: () => (/* binding */ getAllLinearMaterials),\n/* harmony export */   getAllMaterials: () => (/* binding */ getAllMaterials),\n/* harmony export */   getAllMediaFiles: () => (/* binding */ getAllMediaFiles),\n/* harmony export */   getAllPartners: () => (/* binding */ getAllPartners),\n/* harmony export */   getAllProductionMachines: () => (/* binding */ getAllProductionMachines),\n/* harmony export */   getAllShopOrderItems: () => (/* binding */ getAllShopOrderItems),\n/* harmony export */   getAllShopOrders: () => (/* binding */ getAllShopOrders),\n/* harmony export */   getAllUnits: () => (/* binding */ getAllUnits),\n/* harmony export */   getAllVatRates: () => (/* binding */ getAllVatRates),\n/* harmony export */   getAllVatRatesForEdgeMaterials: () => (/* binding */ getAllVatRatesForEdgeMaterials),\n/* harmony export */   getAllVatRatesForLinearMaterials: () => (/* binding */ getAllVatRatesForLinearMaterials),\n/* harmony export */   getAllVatRatesForPartners: () => (/* binding */ getAllVatRatesForPartners),\n/* harmony export */   getAllWorkers: () => (/* binding */ getAllWorkers),\n/* harmony export */   getBrandById: () => (/* binding */ getBrandById),\n/* harmony export */   getCompanyById: () => (/* binding */ getCompanyById),\n/* harmony export */   getCurrencyById: () => (/* binding */ getCurrencyById),\n/* harmony export */   getCustomerById: () => (/* binding */ getCustomerById),\n/* harmony export */   getCuttingFee: () => (/* binding */ getCuttingFee),\n/* harmony export */   getEdgeMaterialById: () => (/* binding */ getEdgeMaterialById),\n/* harmony export */   getFeeTypeById: () => (/* binding */ getFeeTypeById),\n/* harmony export */   getLinearMaterialById: () => (/* binding */ getLinearMaterialById),\n/* harmony export */   getMaterialById: () => (/* binding */ getMaterialById),\n/* harmony export */   getMaterialPriceHistory: () => (/* binding */ getMaterialPriceHistory),\n/* harmony export */   getOrdersWithPagination: () => (/* binding */ getOrdersWithPagination),\n/* harmony export */   getPartnerById: () => (/* binding */ getPartnerById),\n/* harmony export */   getProductionMachineById: () => (/* binding */ getProductionMachineById),\n/* harmony export */   getQuoteById: () => (/* binding */ getQuoteById),\n/* harmony export */   getQuotesWithPagination: () => (/* binding */ getQuotesWithPagination),\n/* harmony export */   getShopOrderById: () => (/* binding */ getShopOrderById),\n/* harmony export */   getTenantCompany: () => (/* binding */ getTenantCompany),\n/* harmony export */   getUnitById: () => (/* binding */ getUnitById),\n/* harmony export */   getVatById: () => (/* binding */ getVatById),\n/* harmony export */   getWorkerById: () => (/* binding */ getWorkerById),\n/* harmony export */   supabaseServer: () => (/* binding */ supabaseServer)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Performance timing utilities\nconst isDev = \"development\" !== 'production';\nfunction logTiming(operation, startTime, additionalInfo) {\n    if (isDev) {\n        const duration = performance.now() - startTime;\n        console.log(`[PERF] ${operation}: ${duration.toFixed(2)}ms${additionalInfo ? ` (${additionalInfo})` : ''}`);\n    }\n}\n// Helper function to check if Supabase is configured\nfunction checkSupabaseConfig() {\n    if (!supabaseServer) {\n        console.warn('Supabase not configured for server-side operations');\n        return false;\n    }\n    return true;\n}\n// Server-side Supabase client with service role key for SSR\nconst supabaseUrl = \"https://xgkaviefifbllbmfbyfe.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Check if Supabase is configured\nconst isSupabaseConfigured = supabaseUrl && supabaseServiceKey;\nif (!isSupabaseConfigured) {\n    console.warn('Supabase not configured for server-side operations. Some features may not work.');\n}\n// Create a mock Supabase client for build time\nconst createMockSupabaseClient = ()=>({\n        from: ()=>({\n                select: ()=>({\n                        eq: ()=>({\n                                is: ()=>({\n                                        single: ()=>({\n                                                data: null,\n                                                error: null\n                                            })\n                                    })\n                            }),\n                        is: ()=>({\n                                order: ()=>({\n                                        data: [],\n                                        error: null\n                                    })\n                            })\n                    })\n            })\n    });\nconst supabaseServer = isSupabaseConfigured ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        persistSession: false,\n        autoRefreshToken: false,\n        detectSessionInUrl: false // No URL session detection on server\n    },\n    global: {\n        headers: {\n            'X-Client-Info': 'nextjs-server'\n        }\n    },\n    realtime: {\n        enabled: false\n    }\n}) : createMockSupabaseClient();\n// Server-side optimized query functions\nasync function getBrandById(id) {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching brand:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllBrands() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Brands DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching brands:', error);\n        return [];\n    }\n    logTiming('Brands Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Materials SSR functions\nasync function getMaterialById(id) {\n    // Fetch material from materials table with pricing data\n    const { data: materialData, error } = await supabaseServer.from('materials').select(`\n      id,\n      name,\n      length_mm,\n      width_mm,\n      thickness_mm,\n      grain_direction,\n      on_stock,\n      active,\n      image_url,\n      brand_id,\n      base_price,\n      multiplier,\n      price_per_sqm,\n      partners_id,\n      units_id,\n      currency_id,\n      vat_id,\n      created_at,\n      updated_at,\n      brands(id, name),\n      currencies(id, name),\n      vat(id, name, kulcs)\n    `).eq('id', id).single();\n    if (error) {\n        console.error('Error fetching material:', error);\n        return null;\n    }\n    // Fetch settings from material_settings\n    const { data: settingsData } = await supabaseServer.from('material_settings').select('kerf_mm, trim_top_mm, trim_right_mm, trim_bottom_mm, trim_left_mm, rotatable, waste_multi, usage_limit').eq('material_id', id).single();\n    // Fetch machine code from machine_material_map\n    const { data: machineData } = await supabaseServer.from('machine_material_map').select('machine_code').eq('material_id', id).eq('machine_type', 'Korpus').single();\n    // Transform the data to match the expected format\n    return {\n        id: materialData.id,\n        name: materialData.name || `Material ${materialData.id}`,\n        length_mm: materialData.length_mm || 2800,\n        width_mm: materialData.width_mm || 2070,\n        thickness_mm: materialData.thickness_mm || 18,\n        grain_direction: Boolean(materialData.grain_direction),\n        on_stock: materialData.on_stock !== undefined ? Boolean(materialData.on_stock) : true,\n        active: materialData.active !== undefined ? Boolean(materialData.active) : true,\n        image_url: materialData.image_url || null,\n        brand_id: materialData.brand_id || '',\n        brand_name: materialData.brands?.name || 'Unknown',\n        kerf_mm: settingsData?.kerf_mm || 3,\n        trim_top_mm: settingsData?.trim_top_mm || 0,\n        trim_right_mm: settingsData?.trim_right_mm || 0,\n        trim_bottom_mm: settingsData?.trim_bottom_mm || 0,\n        trim_left_mm: settingsData?.trim_left_mm || 0,\n        rotatable: settingsData?.rotatable !== false,\n        waste_multi: settingsData?.waste_multi || 1.0,\n        usage_limit: settingsData?.usage_limit || 0.65,\n        machine_code: machineData?.machine_code || '',\n        base_price: materialData.base_price || 0,\n        multiplier: materialData.multiplier || 1.38,\n        price_per_sqm: materialData.price_per_sqm || 0,\n        partners_id: materialData.partners_id || null,\n        units_id: materialData.units_id || null,\n        currency_id: materialData.currency_id || null,\n        vat_id: materialData.vat_id || null,\n        currencies: materialData.currencies || null,\n        vat: materialData.vat || null,\n        created_at: materialData.created_at,\n        updated_at: materialData.updated_at\n    };\n}\nasync function getAllMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('materials_with_settings').select(`\n      id, \n      material_name, \n      length_mm, \n      width_mm, \n      thickness_mm, \n      grain_direction, \n      on_stock,\n      image_url, \n      brand_name,\n      kerf_mm, \n      trim_top_mm, \n      trim_right_mm, \n      trim_bottom_mm, \n      trim_left_mm, \n      rotatable, \n      waste_multi, \n      usage_limit,\n      created_at, \n      updated_at\n    `).order('material_name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching materials:', error);\n        return [];\n    }\n    // Fetch pricing data from materials table\n    const materialIds = (data || []).map((m)=>m.id);\n    const { data: pricingData } = await supabaseServer.from('materials').select(`\n      id,\n      price_per_sqm,\n      active,\n      vat(kulcs),\n      currencies(name)\n    `).in('id', materialIds);\n    // Create pricing map for quick lookup\n    const pricingMap = new Map((pricingData || []).map((p)=>[\n            p.id,\n            {\n                price_per_sqm: p.price_per_sqm || 0,\n                vat_percent: p.vat?.kulcs || 0,\n                currency: p.currencies?.name || 'HUF',\n                active: p.active !== undefined ? p.active : true\n            }\n        ]));\n    // Transform the data to match the expected format\n    const transformedData = (data || []).map((material)=>{\n        const pricing = pricingMap.get(material.id) || {\n            price_per_sqm: 0,\n            vat_percent: 0,\n            currency: 'HUF',\n            active: true\n        };\n        return {\n            id: material.id,\n            name: material.material_name || `Material ${material.id}`,\n            length_mm: material.length_mm || 2800,\n            width_mm: material.width_mm || 2070,\n            thickness_mm: material.thickness_mm || 18,\n            grain_direction: Boolean(material.grain_direction),\n            on_stock: material.on_stock !== undefined ? Boolean(material.on_stock) : true,\n            active: pricing.active !== undefined ? Boolean(pricing.active) : true,\n            image_url: material.image_url || null,\n            brand_id: '',\n            brand_name: material.brand_name || 'Unknown',\n            kerf_mm: material.kerf_mm || 3,\n            trim_top_mm: material.trim_top_mm || 0,\n            trim_right_mm: material.trim_right_mm || 0,\n            trim_bottom_mm: material.trim_bottom_mm || 0,\n            trim_left_mm: material.trim_left_mm || 0,\n            rotatable: material.rotatable !== false,\n            waste_multi: material.waste_multi || 1.0,\n            usage_limit: material.usage_limit !== undefined && material.usage_limit !== null ? material.usage_limit : 0.65,\n            machine_code: '',\n            price_per_sqm: pricing.price_per_sqm,\n            vat_percent: pricing.vat_percent,\n            currency: pricing.currency,\n            created_at: material.created_at,\n            updated_at: material.updated_at\n        };\n    });\n    logTiming('Materials Total', startTime, `transformed ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getAllBrandsForMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Units SSR functions\nasync function getUnitById(id) {\n    const { data, error } = await supabaseServer.from('units').select('id, name, shortform, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching unit:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllUnits() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('units').select('id, name, shortform, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Units DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching units:', error);\n        return [];\n    }\n    logTiming('Units Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Production Machines SSR functions\nasync function getAllProductionMachines() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('production_machines').select('id, machine_name, comment, usage_limit_per_day, created_at, updated_at').is('deleted_at', null).order('machine_name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Production Machines DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching production machines:', error);\n        return [];\n    }\n    logTiming('Production Machines Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getProductionMachineById(id) {\n    const { data, error } = await supabaseServer.from('production_machines').select('id, machine_name, comment, usage_limit_per_day, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching production machine:', error);\n        return null;\n    }\n    return data;\n}\n// Fee Types SSR functions\nasync function getAllFeeTypes() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('feetypes').select(`\n      id, \n      name, \n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Fee Types DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching fee types:', error);\n        return [];\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((feeType)=>({\n            ...feeType,\n            vat_name: feeType.vat?.name || '',\n            vat_percent: feeType.vat?.kulcs || 0,\n            currency_name: feeType.currencies?.name || '',\n            vat_amount: feeType.net_price * (feeType.vat?.kulcs || 0) / 100,\n            gross_price: feeType.net_price + feeType.net_price * (feeType.vat?.kulcs || 0) / 100\n        })) || [];\n    logTiming('Fee Types Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getFeeTypeById(id) {\n    const { data, error } = await supabaseServer.from('feetypes').select(`\n      id, \n      name, \n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching fee type:', error);\n        return null;\n    }\n    // Transform the data to include calculated fields\n    const transformedData = {\n        ...data,\n        vat_name: data.vat?.name || '',\n        vat_percent: data.vat?.kulcs || 0,\n        currency_name: data.currencies?.name || '',\n        vat_amount: data.net_price * (data.vat?.kulcs || 0) / 100,\n        gross_price: data.net_price + data.net_price * (data.vat?.kulcs || 0) / 100\n    };\n    return transformedData;\n}\n// Currencies SSR functions\nasync function getCurrencyById(id) {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching currency:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCurrencies() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Currencies DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching currencies:', error);\n        return [];\n    }\n    logTiming('Currencies Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// VAT SSR functions\nasync function getVatById(id) {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching VAT rate:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllVatRates() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('VAT DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching VAT rates:', error);\n        return [];\n    }\n    logTiming('VAT Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Cutting Fees SSR functions\nasync function getCuttingFee() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('cutting_fees').select(`\n      id,\n      fee_per_meter,\n      panthelyfuras_fee_per_hole,\n      duplungolas_fee_per_sqm,\n      szogvagas_fee_per_panel,\n      currency_id,\n      vat_id,\n      currencies (\n        id,\n        name\n      ),\n      vat (\n        id,\n        kulcs\n      ),\n      created_at,\n      updated_at\n    `).limit(1).single();\n    const queryTime = performance.now();\n    logTiming('Cutting Fee DB Query', startTime, `fetched ${data ? 1 : 0} records`);\n    if (error) {\n        console.error('Error fetching cutting fee:', error);\n        return null;\n    }\n    logTiming('Cutting Fee Total', startTime, `returned ${data ? 1 : 0} records`);\n    return data || null;\n}\nasync function getMaterialPriceHistory(materialId) {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('material_price_history').select('id, old_price_per_sqm, new_price_per_sqm, changed_at, changed_by').eq('material_id', materialId).order('changed_at', {\n        ascending: false\n    }).limit(10);\n    const queryTime = performance.now();\n    logTiming('Price History DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching price history:', error);\n        return [];\n    }\n    // Enrich with user emails using admin API\n    const enrichedData = await Promise.all((data || []).map(async (h)=>{\n        let userEmail = null;\n        if (h.changed_by) {\n            try {\n                const { data: userData } = await supabaseServer.auth.admin.getUserById(h.changed_by);\n                if (userData?.user) {\n                    userEmail = userData.user.email;\n                }\n            } catch (err) {\n                console.error('Error fetching user for price history:', err);\n            }\n        }\n        return {\n            ...h,\n            changed_by_user: userEmail\n        };\n    }));\n    logTiming('Price History Total', startTime, `returned ${enrichedData?.length || 0} records`);\n    return enrichedData || [];\n}\n// Customers SSR functions\nasync function getCustomerById(id) {\n    const { data, error } = await supabaseServer.from('customers').select(`\n      id,\n      name,\n      email,\n      mobile,\n      discount_percent,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching customer:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCustomers() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('customers').select(`\n      id,\n      name,\n      email,\n      mobile,\n      discount_percent,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Customers DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching customers:', error);\n        return [];\n    }\n    logTiming('Customers Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Edge Materials SSR functions\nasync function getEdgeMaterialById(id) {\n    const { data, error } = await supabaseServer.from('edge_materials').select(`\n      id,\n      brand_id,\n      type,\n      thickness,\n      width,\n      decor,\n      price,\n      vat_id,\n      active,\n      ráhagyás,\n      favourite_priority,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching edge material:', error);\n        return null;\n    }\n    // Fetch machine code from machine_edge_material_map\n    const { data: machineData } = await supabaseServer.from('machine_edge_material_map').select('machine_code').eq('edge_material_id', id).eq('machine_type', 'Korpus').single();\n    return {\n        ...data,\n        machine_code: machineData?.machine_code || ''\n    };\n}\nasync function getAllEdgeMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('edge_materials').select(`\n      id,\n      brand_id,\n      type,\n      thickness,\n      width,\n      decor,\n      price,\n      vat_id,\n      active,\n      ráhagyás,\n      favourite_priority,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).is('deleted_at', null).order('type', {\n        ascending: true\n    }).order('decor', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Edge Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching edge materials:', error);\n        return [];\n    }\n    logTiming('Edge Materials Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getAllBrandsForEdgeMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name, comment, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for edge materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllVatRatesForEdgeMaterials() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for edge materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Linear Materials SSR functions\nasync function getAllLinearMaterials() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('linear_materials').select(`\n      id,\n      brand_id,\n      name,\n      width,\n      length,\n      thickness,\n      type,\n      image_url,\n      price_per_m,\n      currency_id,\n      vat_id,\n      on_stock,\n      active,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      currencies (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Linear Materials DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching linear materials:', error);\n        return [];\n    }\n    // Fetch machine codes for all linear materials\n    const linearMaterialIds = data?.map((lm)=>lm.id) || [];\n    const { data: machineCodes } = await supabaseServer.from('machine_linear_material_map').select('linear_material_id, machine_code').in('linear_material_id', linearMaterialIds).eq('machine_type', 'Korpus');\n    const machineCodeMap = new Map(machineCodes?.map((mc)=>[\n            mc.linear_material_id,\n            mc.machine_code\n        ]) || []);\n    // Transform data to include machine codes\n    const transformedData = data?.map((lm)=>({\n            ...lm,\n            machine_code: machineCodeMap.get(lm.id) || '',\n            brand_name: lm.brands?.name || '',\n            currency_code: lm.currencies?.name || '',\n            currency_name: lm.currencies?.name || '',\n            vat_name: lm.vat?.name || '',\n            vat_percent: lm.vat?.kulcs || 0\n        })) || [];\n    logTiming('Linear Materials Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\nasync function getLinearMaterialById(id) {\n    const { data, error } = await supabaseServer.from('linear_materials').select(`\n      id,\n      brand_id,\n      name,\n      width,\n      length,\n      thickness,\n      type,\n      image_url,\n      base_price,\n      multiplier,\n      price_per_m,\n      partners_id,\n      units_id,\n      currency_id,\n      vat_id,\n      on_stock,\n      active,\n      created_at,\n      updated_at,\n      brands (\n        name\n      ),\n      currencies (\n        name\n      ),\n      vat (\n        name,\n        kulcs\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching linear material:', error);\n        return null;\n    }\n    // Fetch machine code\n    const { data: machineData } = await supabaseServer.from('machine_linear_material_map').select('machine_code').eq('linear_material_id', id).eq('machine_type', 'Korpus').single();\n    return {\n        ...data,\n        machine_code: machineData?.machine_code || ''\n    };\n}\nasync function getAllBrandsForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('brands').select('id, name').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching brands for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllVatRatesForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllCurrenciesForLinearMaterials() {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching currencies for linear materials:', error);\n        return [];\n    }\n    return data || [];\n}\n// Companies SSR functions\n// Partners SSR functions\nasync function getPartnerById(id) {\n    const { data, error } = await supabaseServer.from('partners').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      mobile,\n      email,\n      tax_number,\n      company_registration_number,\n      bank_account,\n      notes,\n      status,\n      contact_person,\n      vat_id,\n      currency_id,\n      payment_terms,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching partner:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllPartners() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('partners').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      mobile,\n      email,\n      tax_number,\n      company_registration_number,\n      bank_account,\n      notes,\n      status,\n      contact_person,\n      vat_id,\n      currency_id,\n      payment_terms,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Partners DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching partners:', error);\n        return [];\n    }\n    logTiming('Partners Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getAllVatRatesForPartners() {\n    const { data, error } = await supabaseServer.from('vat').select('id, name, kulcs, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching VAT rates for partners:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getAllCurrenciesForPartners() {\n    const { data, error } = await supabaseServer.from('currencies').select('id, name, rate, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    if (error) {\n        console.error('Error fetching currencies for partners:', error);\n        return [];\n    }\n    return data || [];\n}\nasync function getCompanyById(id) {\n    const { data, error } = await supabaseServer.from('tenant_company').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      phone_number,\n      email,\n      website,\n      tax_number,\n      company_registration_number,\n      vat_id,\n      created_at,\n      updated_at\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching company:', error);\n        return null;\n    }\n    return data;\n}\nasync function getAllCompanies() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('tenant_company').select(`\n      id,\n      name,\n      country,\n      postal_code,\n      city,\n      address,\n      phone_number,\n      email,\n      website,\n      tax_number,\n      company_registration_number,\n      vat_id,\n      created_at,\n      updated_at\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Companies DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching companies:', error);\n        return [];\n    }\n    logTiming('Companies Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\n// Get tenant company (for default email in customer auto-creation and quote display)\nasync function getTenantCompany() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('tenant_company').select('id, name, country, postal_code, city, address, phone_number, email, website, tax_number, company_registration_number, vat_id').is('deleted_at', null).limit(1).single();\n    const queryTime = performance.now();\n    logTiming('Tenant Company DB Query', startTime, `fetched ${data ? 1 : 0} records`);\n    if (error) {\n        console.error('Error fetching tenant company:', error);\n        return null;\n    }\n    logTiming('Tenant Company Total', startTime, `returned ${data ? 1 : 0} records`);\n    return data;\n}\n// Media files SSR function\nasync function getAllMediaFiles() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('media_files').select('*').order('created_at', {\n        ascending: false\n    }).limit(1000);\n    const queryTime = performance.now();\n    logTiming('Media Files DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching media files:', error);\n        return [];\n    }\n    // Transform to match expected format\n    const transformedFiles = data?.map((file)=>({\n            id: file.id,\n            name: file.original_filename,\n            storedName: file.stored_filename,\n            path: file.storage_path,\n            fullUrl: file.full_url,\n            size: file.size,\n            created_at: file.created_at,\n            updated_at: file.updated_at\n        })) || [];\n    logTiming('Media Files Total', startTime, `returned ${transformedFiles.length} records`);\n    return transformedFiles;\n}\n// Get single quote by ID with all data (for editing)\nasync function getQuoteById(quoteId) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching quote ${quoteId} - OPTIMIZED`);\n    try {\n        // OPTIMIZATION: Fetch all data in parallel instead of sequential\n        const parallelStartTime = performance.now();\n        const [quoteResult, panelsResult, pricingResult, feesResult, accessoriesResult, tenantCompany, paymentsResult] = await Promise.all([\n            // 1. Quote with customer data and production machine\n            supabaseServer.from('quotes').select(`\n          id,\n          quote_number,\n          order_number,\n          status,\n          payment_status,\n          customer_id,\n          discount_percent,\n          production_machine_id,\n          production_date,\n          barcode,\n          total_net,\n          total_vat,\n          total_gross,\n          final_total_after_discount,\n          fees_total_net,\n          fees_total_vat,\n          fees_total_gross,\n          accessories_total_net,\n          accessories_total_vat,\n          accessories_total_gross,\n          created_at,\n          updated_at,\n          customers(\n            id,\n            name,\n            email,\n            mobile,\n            discount_percent,\n            billing_name,\n            billing_country,\n            billing_city,\n            billing_postal_code,\n            billing_street,\n            billing_house_number,\n            billing_tax_number,\n            billing_company_reg_number\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `).eq('id', quoteId).is('deleted_at', null).single(),\n            // 2. Panels with materials\n            supabaseServer.from('quote_panels').select(`\n          id,\n          material_id,\n          width_mm,\n          height_mm,\n          quantity,\n          label,\n          edge_material_a_id,\n          edge_material_b_id,\n          edge_material_c_id,\n          edge_material_d_id,\n          panthelyfuras_quantity,\n          panthelyfuras_oldal,\n          duplungolas,\n          szogvagas,\n          materials(id, name, brand_id, length_mm, width_mm, brands(name))\n        `).eq('quote_id', quoteId).order('created_at', {\n                ascending: true\n            }),\n            // 3. Pricing with breakdowns\n            supabaseServer.from('quote_materials_pricing').select(`\n          id, material_id, material_name, board_width_mm, board_length_mm, thickness_mm, grain_direction,\n          on_stock, boards_used, usage_percentage, pricing_method, charged_sqm,\n          price_per_sqm, vat_rate, currency, usage_limit, waste_multi,\n          material_net, material_vat, material_gross,\n          edge_materials_net, edge_materials_vat, edge_materials_gross,\n          cutting_length_m, cutting_net, cutting_vat, cutting_gross,\n          services_net, services_vat, services_gross,\n          total_net, total_vat, total_gross,\n          materials(id, name, brands(name)),\n          quote_edge_materials_breakdown(\n            id, edge_material_id, edge_material_name, total_length_m, price_per_m,\n            net_price, vat_amount, gross_price\n          ),\n          quote_services_breakdown(\n            id, service_type, quantity, unit_price, net_price, vat_amount, gross_price\n          )\n        `).eq('quote_id', quoteId).order('created_at', {\n                ascending: true\n            }),\n            // 4. Fees\n            supabaseServer.from('quote_fees').select(`\n          id, fee_name, quantity, unit_price_net, vat_rate, vat_amount, gross_price, currency_id, comment,\n          created_at,\n          feetypes(id, name),\n          currencies(id, name)\n        `).eq('quote_id', quoteId).is('deleted_at', null).order('created_at', {\n                ascending: true\n            }),\n            // 5. Accessories\n            supabaseServer.from('quote_accessories').select(`\n          id, accessory_name, sku, quantity, unit_price_net, vat_rate, unit_name, currency_id,\n          total_net, total_vat, total_gross, created_at,\n          accessories(id, name, sku),\n          units(id, name, shortform),\n          currencies(id, name)\n        `).eq('quote_id', quoteId).is('deleted_at', null).order('created_at', {\n                ascending: true\n            }),\n            // 6. Tenant company\n            getTenantCompany(),\n            // 7. Payments (for orders)\n            supabaseServer.from('quote_payments').select('*').eq('quote_id', quoteId).is('deleted_at', null).order('payment_date', {\n                ascending: false\n            })\n        ]);\n        logTiming('Parallel Queries Complete', parallelStartTime, 'all 7 queries executed in parallel');\n        // Extract data and errors from results\n        const { data: quote, error: quoteError } = quoteResult;\n        const { data: panels, error: panelsError } = panelsResult;\n        const { data: pricingData, error: pricingError } = pricingResult;\n        const { data: fees, error: feesError } = feesResult;\n        const { data: accessories, error: accessoriesError } = accessoriesResult;\n        const { data: payments, error: paymentsError } = paymentsResult;\n        // Handle errors\n        if (quoteError) {\n            console.error('[SSR] Error fetching quote:', quoteError);\n            logTiming('Quote Fetch Failed', startTime);\n            return null;\n        }\n        if (!quote) {\n            console.error('[SSR] Quote not found:', quoteId);\n            logTiming('Quote Not Found', startTime);\n            return null;\n        }\n        if (panelsError) {\n            console.error('[SSR] Error fetching panels:', panelsError);\n        }\n        if (pricingError) {\n            console.error('[SSR] Error fetching pricing:', pricingError);\n            console.log('[SSR] Continuing without pricing data...');\n        }\n        if (feesError) {\n            console.error('[SSR] Error fetching fees:', feesError);\n        }\n        if (accessoriesError) {\n            console.error('[SSR] Error fetching accessories:', accessoriesError);\n        }\n        // Log individual query results for debugging\n        console.log(`[PERF] Quote data: ${quote ? 'OK' : 'MISSING'}`);\n        console.log(`[PERF] Panels: ${panels?.length || 0} records`);\n        console.log(`[PERF] Pricing: ${pricingData?.length || 0} records`);\n        console.log(`[PERF] Fees: ${fees?.length || 0} records`);\n        console.log(`[PERF] Accessories: ${accessories?.length || 0} records`);\n        console.log(`[PERF] Payments: ${payments?.length || 0} records`);\n        console.log(`[PERF] Company: ${tenantCompany ? 'OK' : 'MISSING'}`);\n        // Fetch machine codes for panels (for cutting list)\n        const materialIds = panels?.map((p)=>p.material_id) || [];\n        const edgeMaterialIds = panels?.flatMap((p)=>[\n                p.edge_material_a_id,\n                p.edge_material_b_id,\n                p.edge_material_c_id,\n                p.edge_material_d_id\n            ].filter(Boolean)) || [];\n        const machineCodesStartTime = performance.now();\n        const [materialMaps, edgeMaterialMaps] = await Promise.all([\n            materialIds.length > 0 ? supabaseServer.from('machine_material_map').select('material_id, machine_code').in('material_id', materialIds).eq('machine_type', 'Korpus') : Promise.resolve({\n                data: []\n            }),\n            edgeMaterialIds.length > 0 ? supabaseServer.from('machine_edge_material_map').select('edge_material_id, machine_code').in('edge_material_id', edgeMaterialIds).eq('machine_type', 'Korpus') : Promise.resolve({\n                data: []\n            })\n        ]);\n        logTiming('Machine Codes Fetch', machineCodesStartTime, `fetched ${materialMaps.data?.length || 0} material codes, ${edgeMaterialMaps.data?.length || 0} edge codes`);\n        // Create lookup maps for machine codes\n        const materialCodeMap = new Map(materialMaps.data?.map((m)=>[\n                m.material_id,\n                m.machine_code\n            ]) || []);\n        const edgeCodeMap = new Map(edgeMaterialMaps.data?.map((e)=>[\n                e.edge_material_id,\n                e.machine_code\n            ]) || []);\n        // Enrich panels with machine codes for cutting list\n        const enrichedPanels = panels?.map((panel)=>({\n                ...panel,\n                material_machine_code: materialCodeMap.get(panel.material_id) || '',\n                edge_a_code: panel.edge_material_a_id ? edgeCodeMap.get(panel.edge_material_a_id) || null : null,\n                edge_b_code: panel.edge_material_b_id ? edgeCodeMap.get(panel.edge_material_b_id) || null : null,\n                edge_c_code: panel.edge_material_c_id ? edgeCodeMap.get(panel.edge_material_c_id) || null : null,\n                edge_d_code: panel.edge_material_d_id ? edgeCodeMap.get(panel.edge_material_d_id) || null : null\n            })) || [];\n        // Transform the response to include all necessary data\n        const transformedQuote = {\n            id: quote.id,\n            quote_number: quote.quote_number,\n            order_number: quote.order_number || null,\n            status: quote.status,\n            payment_status: quote.payment_status || 'not_paid',\n            customer_id: quote.customer_id,\n            discount_percent: quote.discount_percent,\n            production_machine_id: quote.production_machine_id || null,\n            production_date: quote.production_date || null,\n            barcode: quote.barcode || null,\n            production_machine: quote.production_machines || null,\n            customer: quote.customers,\n            panels: enrichedPanels,\n            pricing: pricingData || [],\n            fees: fees || [],\n            accessories: accessories || [],\n            payments: payments || [],\n            tenant_company: tenantCompany,\n            totals: {\n                total_net: quote.total_net,\n                total_vat: quote.total_vat,\n                total_gross: quote.total_gross,\n                final_total_after_discount: quote.final_total_after_discount,\n                fees_total_net: quote.fees_total_net || 0,\n                fees_total_vat: quote.fees_total_vat || 0,\n                fees_total_gross: quote.fees_total_gross || 0,\n                accessories_total_net: quote.accessories_total_net || 0,\n                accessories_total_vat: quote.accessories_total_vat || 0,\n                accessories_total_gross: quote.accessories_total_gross || 0\n            },\n            created_at: quote.created_at,\n            updated_at: quote.updated_at\n        };\n        logTiming('Quote Fetch Total', startTime, `returned quote ${quote.quote_number} with ${panels?.length || 0} panels`);\n        console.log(`[SSR] Quote fetched successfully: ${quote.quote_number} (OPTIMIZED)`);\n        return transformedQuote;\n    } catch (error) {\n        console.error('[SSR] Error fetching quote:', error);\n        logTiming('Quote Fetch Error', startTime);\n        return null;\n    }\n}\n// Get quotes with pagination (for quotes list page)\nasync function getQuotesWithPagination(page = 1, limit = 20, searchTerm) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching quotes page ${page}, limit ${limit}, search: \"${searchTerm || 'none'}\"`);\n    try {\n        const offset = (page - 1) * limit;\n        // Build query with search if provided\n        let query = supabaseServer.from('quotes').select(`\n        id,\n        quote_number,\n        status,\n        final_total_after_discount,\n        updated_at,\n        customers!inner(\n          id,\n          name\n        )\n      `, {\n            count: 'exact'\n        }).eq('status', 'draft') // Only show draft quotes, not orders\n        .is('deleted_at', null).order('updated_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        // Apply search filter if provided\n        if (searchTerm && searchTerm.trim()) {\n            query = query.ilike('customers.name', `%${searchTerm.trim()}%`);\n        }\n        const { data: quotes, error: quotesError, count } = await query;\n        if (quotesError) {\n            console.error('[SSR] Error fetching quotes:', quotesError);\n            logTiming('Quotes Fetch Failed', startTime);\n            return {\n                quotes: [],\n                totalCount: 0,\n                totalPages: 0\n            };\n        }\n        // Transform the data to flatten customer name\n        const transformedQuotes = quotes?.map((quote)=>({\n                id: quote.id,\n                quote_number: quote.quote_number,\n                status: quote.status,\n                customer_name: quote.customers?.name || 'Unknown Customer',\n                final_total_after_discount: quote.final_total_after_discount,\n                updated_at: quote.updated_at\n            })) || [];\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        logTiming('Quotes Fetch Total', startTime, `returned ${transformedQuotes.length} quotes (page ${page}/${totalPages})`);\n        console.log(`[SSR] Quotes fetched successfully: ${transformedQuotes.length} quotes, total: ${totalCount}`);\n        return {\n            quotes: transformedQuotes,\n            totalCount,\n            totalPages,\n            currentPage: page\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching quotes:', error);\n        logTiming('Quotes Fetch Error', startTime);\n        return {\n            quotes: [],\n            totalCount: 0,\n            totalPages: 0\n        };\n    }\n}\n// Get orders with pagination (for orders list page)\nasync function getOrdersWithPagination(page = 1, limit = 20, searchTerm) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching orders page ${page}, limit ${limit}, search: \"${searchTerm || 'none'}\"`);\n    try {\n        const offset = (page - 1) * limit;\n        // If search term is provided, we need to find orders that match either customer name or material names\n        if (searchTerm && searchTerm.trim()) {\n            const trimmedSearch = searchTerm.trim();\n            // First, find materials that match the search term\n            console.log(`[SSR] Searching materials for: \"${trimmedSearch}\"`);\n            const { data: matchingMaterials, error: materialsError } = await supabaseServer.from('materials').select('id').ilike('name', `%${trimmedSearch}%`);\n            if (materialsError) {\n                console.error('[SSR] Error searching materials:', materialsError);\n            }\n            const materialIds = matchingMaterials?.map((m)=>m.id) || [];\n            console.log(`[SSR] Found ${materialIds.length} matching materials`);\n            // Then find quote IDs that have panels using these materials\n            let materialMatchIds = [];\n            if (materialIds.length > 0) {\n                console.log(`[SSR] Searching quote_panels for material IDs: ${materialIds.join(', ')}`);\n                const { data: materialMatches, error: panelsError } = await supabaseServer.from('quote_panels').select('quote_id').in('material_id', materialIds);\n                if (panelsError) {\n                    console.error('[SSR] Error searching quote_panels:', panelsError);\n                }\n                materialMatchIds = materialMatches?.map((m)=>m.quote_id) || [];\n                console.log(`[SSR] Found ${materialMatchIds.length} matching quote panels`);\n            }\n            // Build query with OR condition for customer name OR material matches\n            console.log(`[SSR] Building query with materialMatchIds: ${materialMatchIds.length} matches`);\n            let query = supabaseServer.from('quotes').select(`\n          id,\n          order_number,\n          status,\n          payment_status,\n          final_total_after_discount,\n          updated_at,\n          production_machine_id,\n          production_date,\n          barcode,\n          customers!inner(\n            id,\n            name,\n            mobile,\n            email\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `, {\n                count: 'exact'\n            }).in('status', [\n                'ordered',\n                'in_production',\n                'ready',\n                'finished',\n                'cancelled'\n            ]).is('deleted_at', null).order('updated_at', {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            // Execute two separate queries and combine results\n            console.log(`[SSR] Executing separate queries for customer and material matches...`);\n            // Query 1: Customer name matches\n            const customerQuery = supabaseServer.from('quotes').select(`\n          id,\n          order_number,\n          status,\n          payment_status,\n          final_total_after_discount,\n          updated_at,\n          production_machine_id,\n          production_date,\n          barcode,\n          customers!inner(\n            id,\n            name,\n            mobile,\n            email\n          ),\n          production_machines(\n            id,\n            machine_name\n          )\n        `, {\n                count: 'exact'\n            }).in('status', [\n                'ordered',\n                'in_production',\n                'ready',\n                'finished',\n                'cancelled'\n            ]).is('deleted_at', null).ilike('customers.name', `%${trimmedSearch}%`).order('updated_at', {\n                ascending: false\n            }).range(offset, offset + limit - 1);\n            // Query 2: Material matches (if any)\n            let materialQuery = null;\n            if (materialMatchIds.length > 0) {\n                materialQuery = supabaseServer.from('quotes').select(`\n            id,\n            order_number,\n            status,\n            payment_status,\n            final_total_after_discount,\n            updated_at,\n            production_machine_id,\n            production_date,\n            barcode,\n            customers!inner(\n              id,\n              name,\n              mobile,\n              email\n            ),\n            production_machines(\n              id,\n              machine_name\n            )\n          `, {\n                    count: 'exact'\n                }).in('status', [\n                    'ordered',\n                    'in_production',\n                    'ready',\n                    'finished',\n                    'cancelled'\n                ]).is('deleted_at', null).in('id', materialMatchIds).order('updated_at', {\n                    ascending: false\n                }).range(offset, offset + limit - 1);\n            }\n            // Execute both queries\n            const [customerResult, materialResult] = await Promise.all([\n                customerQuery,\n                materialQuery || Promise.resolve({\n                    data: [],\n                    error: null,\n                    count: 0\n                })\n            ]);\n            const { data: customerOrders, error: customerError, count: customerCount } = customerResult;\n            const { data: materialOrders, error: materialError, count: materialCount } = materialResult;\n            if (customerError) {\n                console.error('[SSR] Error fetching customer orders:', customerError);\n                logTiming('Orders Fetch Failed', startTime);\n                return {\n                    orders: [],\n                    totalCount: 0,\n                    totalPages: 0,\n                    currentPage: page\n                };\n            }\n            if (materialError) {\n                console.error('[SSR] Error fetching material orders:', materialError);\n                logTiming('Orders Fetch Failed', startTime);\n                return {\n                    orders: [],\n                    totalCount: 0,\n                    totalPages: 0,\n                    currentPage: page\n                };\n            }\n            // Combine and deduplicate results\n            const allOrders = [\n                ...customerOrders || [],\n                ...materialOrders || []\n            ];\n            const uniqueOrders = allOrders.filter((order, index, self)=>index === self.findIndex((o)=>o.id === order.id));\n            // Sort by updated_at descending\n            uniqueOrders.sort((a, b)=>new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n            // Apply pagination to combined results\n            const paginatedOrders = uniqueOrders.slice(0, limit);\n            const totalCount = uniqueOrders.length;\n            const totalPages = Math.ceil(totalCount / limit);\n            console.log(`[SSR] Combined results: ${uniqueOrders.length} total, ${paginatedOrders.length} on page`);\n            // Use the combined results as orders\n            const orders = paginatedOrders;\n            // Get payment totals for all orders (for payment modal)\n            const { data: paymentTotals } = await supabaseServer.from('quote_payments').select('quote_id, amount').in('quote_id', orders?.map((o)=>o.id) || []);\n            const totalPaidByOrder = (paymentTotals || []).reduce((acc, p)=>{\n                acc[p.quote_id] = (acc[p.quote_id] || 0) + p.amount;\n                return acc;\n            }, {});\n            // Transform the data\n            const transformedOrders = orders?.map((order)=>({\n                    id: order.id,\n                    order_number: order.order_number || 'N/A',\n                    status: order.status,\n                    payment_status: order.payment_status || 'not_paid',\n                    customer_name: order.customers?.name || 'Unknown Customer',\n                    customer_mobile: order.customers?.mobile || '',\n                    customer_email: order.customers?.email || '',\n                    final_total: order.final_total_after_discount || 0,\n                    total_paid: totalPaidByOrder[order.id] || 0,\n                    remaining_balance: (order.final_total_after_discount || 0) - (totalPaidByOrder[order.id] || 0),\n                    updated_at: order.updated_at,\n                    production_machine_id: order.production_machine_id || null,\n                    production_machine_name: order.production_machines?.machine_name || null,\n                    production_date: order.production_date || null,\n                    barcode: order.barcode || ''\n                })) || [];\n            return {\n                orders: transformedOrders,\n                totalCount,\n                totalPages,\n                currentPage: page\n            };\n        }\n        // No search term - regular query\n        let query = supabaseServer.from('quotes').select(`\n        id,\n        order_number,\n        status,\n        payment_status,\n        final_total_after_discount,\n        updated_at,\n        production_machine_id,\n        production_date,\n        barcode,\n        customers!inner(\n          id,\n          name,\n          mobile,\n          email\n        ),\n        production_machines(\n          id,\n          machine_name\n        )\n      `, {\n            count: 'exact'\n        }).in('status', [\n            'ordered',\n            'in_production',\n            'ready',\n            'finished',\n            'cancelled'\n        ]) // Show all order statuses including cancelled\n        .is('deleted_at', null).order('updated_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        const { data: orders, error: ordersError, count } = await query;\n        if (ordersError) {\n            console.error('[SSR] Error fetching orders:', ordersError);\n            console.error('[SSR] Error details:', JSON.stringify(ordersError, null, 2));\n            logTiming('Orders Fetch Failed', startTime);\n            return {\n                orders: [],\n                totalCount: 0,\n                totalPages: 0,\n                currentPage: page\n            };\n        }\n        // Get payment totals for all orders (for payment modal)\n        const { data: paymentTotals } = await supabaseServer.from('quote_payments').select('quote_id, amount').in('quote_id', orders?.map((o)=>o.id) || []);\n        const totalPaidByOrder = (paymentTotals || []).reduce((acc, p)=>{\n            acc[p.quote_id] = (acc[p.quote_id] || 0) + p.amount;\n            return acc;\n        }, {});\n        // Transform the data\n        const transformedOrders = orders?.map((order)=>({\n                id: order.id,\n                order_number: order.order_number || 'N/A',\n                status: order.status,\n                payment_status: order.payment_status || 'not_paid',\n                customer_name: order.customers?.name || 'Unknown Customer',\n                customer_mobile: order.customers?.mobile || '',\n                customer_email: order.customers?.email || '',\n                final_total: order.final_total_after_discount || 0,\n                total_paid: totalPaidByOrder[order.id] || 0,\n                remaining_balance: (order.final_total_after_discount || 0) - (totalPaidByOrder[order.id] || 0),\n                updated_at: order.updated_at,\n                production_machine_id: order.production_machine_id || null,\n                production_machine_name: order.production_machines?.machine_name || null,\n                production_date: order.production_date || null,\n                barcode: order.barcode || ''\n            })) || [];\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        logTiming('Orders Fetch Total', startTime, `returned ${transformedOrders.length} orders (page ${page}/${totalPages})`);\n        console.log(`[SSR] Orders fetched successfully: ${transformedOrders.length} orders, total: ${totalCount}`);\n        return {\n            orders: transformedOrders,\n            totalCount,\n            totalPages,\n            currentPage: page\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching orders:', error);\n        console.error('[SSR] Error details:', JSON.stringify(error, null, 2));\n        console.error('[SSR] Error message:', error instanceof Error ? error.message : 'Unknown error');\n        console.error('[SSR] Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n        logTiming('Orders Fetch Error', startTime);\n        return {\n            orders: [],\n            totalCount: 0,\n            totalPages: 0,\n            currentPage: page\n        };\n    }\n}\n// Accessories SSR functions\nasync function getAllAccessories() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Accessories DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching accessories:', error);\n        return [];\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((accessory)=>({\n            ...accessory,\n            vat_name: accessory.vat?.name || '',\n            vat_percent: accessory.vat?.kulcs || 0,\n            currency_name: accessory.currencies?.name || '',\n            unit_name: accessory.units?.name || '',\n            unit_shortform: accessory.units?.shortform || '',\n            partner_name: accessory.partners?.name || '',\n            vat_amount: accessory.net_price * (accessory.vat?.kulcs || 0) / 100,\n            gross_price: accessory.net_price + accessory.net_price * (accessory.vat?.kulcs || 0) / 100\n        })) || [];\n    logTiming('Accessories Total', startTime, `returned ${transformedData.length} records`);\n    return transformedData;\n}\n// Get accessories with pagination\nasync function getAccessoriesWithPagination(page = 1, limit = 100) {\n    const startTime = performance.now();\n    const offset = (page - 1) * limit;\n    // Get total count\n    const { count } = await supabaseServer.from('accessories').select('*', {\n        count: 'exact',\n        head: true\n    }).is('deleted_at', null);\n    // Get paginated data\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).is('deleted_at', null).order('name', {\n        ascending: true\n    }).range(offset, offset + limit - 1);\n    const queryTime = performance.now();\n    logTiming('Accessories Paginated DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching accessories:', error);\n        return {\n            accessories: [],\n            totalCount: 0,\n            totalPages: 0,\n            currentPage: page\n        };\n    }\n    // Transform the data to include calculated fields\n    const transformedData = data?.map((accessory)=>({\n            ...accessory,\n            vat_name: accessory.vat?.name || '',\n            vat_percent: accessory.vat?.kulcs || 0,\n            currency_name: accessory.currencies?.name || '',\n            unit_name: accessory.units?.name || '',\n            unit_shortform: accessory.units?.shortform || '',\n            partner_name: accessory.partners?.name || '',\n            vat_amount: accessory.net_price * (accessory.vat?.kulcs || 0) / 100,\n            gross_price: accessory.net_price + accessory.net_price * (accessory.vat?.kulcs || 0) / 100\n        })) || [];\n    const totalCount = count || 0;\n    const totalPages = Math.ceil(totalCount / limit);\n    logTiming('Accessories Paginated Total', startTime, `returned ${transformedData.length} of ${totalCount} records`);\n    return {\n        accessories: transformedData,\n        totalCount,\n        totalPages,\n        currentPage: page\n    };\n}\nasync function getAccessoryById(id) {\n    const { data, error } = await supabaseServer.from('accessories').select(`\n      id, \n      name, \n      sku, \n      base_price,\n      multiplier,\n      net_price, \n      created_at, \n      updated_at,\n      vat_id,\n      currency_id,\n      units_id,\n      partners_id,\n      vat (\n        id,\n        name,\n        kulcs\n      ),\n      currencies (\n        id,\n        name\n      ),\n      units (\n        id,\n        name,\n        shortform\n      ),\n      partners (\n        id,\n        name\n      )\n    `).eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching accessory:', error);\n        return null;\n    }\n    // Transform the data to include calculated fields\n    const transformedData = {\n        ...data,\n        vat_name: data.vat?.name || '',\n        vat_percent: data.vat?.kulcs || 0,\n        currency_name: data.currencies?.name || '',\n        unit_name: data.units?.name || '',\n        unit_shortform: data.units?.shortform || '',\n        partner_name: data.partners?.name || '',\n        vat_amount: data.net_price * (data.vat?.kulcs || 0) / 100,\n        gross_price: data.net_price + data.net_price * (data.vat?.kulcs || 0) / 100\n    };\n    return transformedData;\n}\n// Workers functions\nasync function getAllWorkers() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('workers').select('id, name, nickname, mobile, color, created_at, updated_at').is('deleted_at', null).order('name', {\n        ascending: true\n    });\n    const queryTime = performance.now();\n    logTiming('Workers DB Query', startTime, `fetched ${data?.length || 0} records`);\n    if (error) {\n        console.error('Error fetching workers:', error);\n        return [];\n    }\n    logTiming('Workers Total', startTime, `returned ${data?.length || 0} records`);\n    return data || [];\n}\nasync function getWorkerById(id) {\n    const { data, error } = await supabaseServer.from('workers').select('id, name, nickname, mobile, color, created_at, updated_at').eq('id', id).is('deleted_at', null).single();\n    if (error) {\n        console.error('Error fetching worker:', error);\n        return null;\n    }\n    return data;\n}\n// Shop Orders functions\nasync function getAllShopOrders() {\n    const startTime = performance.now();\n    const { data, error } = await supabaseServer.from('shop_orders').select(`\n      id,\n      order_number,\n      worker_id,\n      customer_name,\n      customer_email,\n      customer_mobile,\n      customer_discount,\n      billing_name,\n      billing_country,\n      billing_city,\n      billing_postal_code,\n      billing_street,\n      billing_house_number,\n      billing_tax_number,\n      billing_company_reg_number,\n      status,\n      created_at,\n      updated_at,\n      workers(name, nickname),\n      shop_order_items(\n        id,\n        product_name,\n        sku,\n        type,\n        quantity,\n        status,\n        base_price,\n        multiplier,\n        vat_id,\n        currency_id,\n        units(name, shortform),\n        partners(name)\n      )\n    `).is('deleted_at', null).order('created_at', {\n        ascending: false\n    });\n    const queryTime = performance.now();\n    logTiming('getAllShopOrders Query', startTime, `Found ${data?.length || 0} orders`);\n    if (error) {\n        console.error('Error fetching shop orders:', error);\n        return [];\n    }\n    // Transform data for better performance\n    const transformedOrders = data?.map((order)=>({\n            id: order.id,\n            order_number: order.order_number,\n            worker_id: order.worker_id,\n            worker_name: order.workers?.name || '',\n            worker_nickname: order.workers?.nickname || '',\n            customer_name: order.customer_name,\n            customer_email: order.customer_email,\n            customer_mobile: order.customer_mobile,\n            customer_discount: order.customer_discount,\n            billing_name: order.billing_name,\n            billing_country: order.billing_country,\n            billing_city: order.billing_city,\n            billing_postal_code: order.billing_postal_code,\n            billing_street: order.billing_street,\n            billing_house_number: order.billing_house_number,\n            billing_tax_number: order.billing_tax_number,\n            billing_company_reg_number: order.billing_company_reg_number,\n            status: order.status,\n            created_at: order.created_at,\n            updated_at: order.updated_at,\n            items_count: order.shop_order_items?.length || 0,\n            items: order.shop_order_items?.map((item)=>({\n                    id: item.id,\n                    product_name: item.product_name,\n                    sku: item.sku,\n                    type: item.type,\n                    quantity: item.quantity,\n                    status: item.status,\n                    base_price: item.base_price,\n                    multiplier: item.multiplier,\n                    vat_id: item.vat_id,\n                    currency_id: item.currency_id,\n                    unit_name: item.units?.name || '',\n                    unit_shortform: item.units?.shortform || '',\n                    partner_name: item.partners?.name || ''\n                })) || []\n        })) || [];\n    logTiming('getAllShopOrders Total', startTime, `Transformed ${transformedOrders.length} orders`);\n    return transformedOrders;\n}\n// Get single shop order by ID with all data (for detail page)\nasync function getShopOrderById(orderId) {\n    const startTime = performance.now();\n    console.log(`[SSR] Fetching shop order ${orderId}`);\n    try {\n        // Fetch all data in parallel\n        const parallelStartTime = performance.now();\n        const [orderResult, tenantCompany] = await Promise.all([\n            // 1. Shop order with worker data\n            supabaseServer.from('shop_orders').select(`\n          id,\n          order_number,\n          worker_id,\n          customer_name,\n          customer_email,\n          customer_mobile,\n          customer_discount,\n          billing_name,\n          billing_country,\n          billing_city,\n          billing_postal_code,\n          billing_street,\n          billing_house_number,\n          billing_tax_number,\n          billing_company_reg_number,\n          status,\n          created_at,\n          updated_at,\n          workers(\n            id,\n            name,\n            nickname,\n            mobile,\n            color\n          )\n        `).eq('id', orderId).is('deleted_at', null).single(),\n            // 2. Tenant company\n            getTenantCompany()\n        ]);\n        // 3. Shop order items with related data\n        const { data: itemsData, error: itemsError } = await supabaseServer.from('shop_order_items').select(`\n        id,\n        product_name,\n        sku,\n        type,\n        base_price,\n        multiplier,\n        quantity,\n        megjegyzes,\n        status,\n        created_at,\n        units(\n          id,\n          name,\n          shortform\n        ),\n        partners(\n          id,\n          name\n        ),\n        vat(\n          id,\n          kulcs\n        ),\n        currencies(\n          id,\n          name\n        )\n      `).eq('order_id', orderId).is('deleted_at', null).order('created_at', {\n            ascending: true\n        });\n        logTiming('Parallel Queries Complete', parallelStartTime, 'all queries executed in parallel');\n        // Extract data and errors from results\n        const { data: order, error: orderError } = orderResult;\n        // Handle errors\n        if (orderError) {\n            console.error('[SSR] Error fetching shop order:', orderError);\n            logTiming('Shop Order Fetch Failed', startTime);\n            return null;\n        }\n        if (itemsError) {\n            console.error('[SSR] Error fetching shop order items:', itemsError);\n            logTiming('Shop Order Items Fetch Failed', startTime);\n            return null;\n        }\n        if (!order) {\n            console.error('[SSR] Shop order not found:', orderId);\n            logTiming('Shop Order Not Found', startTime);\n            return null;\n        }\n        // Calculate totals\n        const items = itemsData || [];\n        const totals = items.reduce((acc, item)=>{\n            const netPrice = item.base_price * item.multiplier;\n            const grossPrice = netPrice * (1 + (item.vat?.kulcs || 0) / 100);\n            const itemTotal = grossPrice * item.quantity;\n            const discountAmount = itemTotal * (order.customer_discount / 100);\n            acc.total_net += netPrice * item.quantity;\n            acc.total_gross += itemTotal;\n            acc.final_total += itemTotal - discountAmount;\n            acc.discount_amount += discountAmount;\n            return acc;\n        }, {\n            total_net: 0,\n            total_gross: 0,\n            final_total: 0,\n            discount_amount: 0\n        });\n        // Transform the response\n        const transformedOrder = {\n            id: order.id,\n            order_number: order.order_number,\n            worker_id: order.worker_id,\n            worker: order.workers,\n            customer_name: order.customer_name,\n            customer_email: order.customer_email,\n            customer_mobile: order.customer_mobile,\n            customer_discount: order.customer_discount,\n            billing_name: order.billing_name,\n            billing_country: order.billing_country,\n            billing_city: order.billing_city,\n            billing_postal_code: order.billing_postal_code,\n            billing_street: order.billing_street,\n            billing_house_number: order.billing_house_number,\n            billing_tax_number: order.billing_tax_number,\n            billing_company_reg_number: order.billing_company_reg_number,\n            status: order.status,\n            items: items,\n            tenant_company: tenantCompany,\n            totals: totals,\n            created_at: order.created_at,\n            updated_at: order.updated_at\n        };\n        logTiming('Shop Order Fetch Total', startTime, `returned order ${order.order_number} with ${items.length} items`);\n        console.log(`[SSR] Shop order fetched successfully: ${order.order_number}`);\n        return transformedOrder;\n    } catch (error) {\n        console.error('[SSR] Error fetching shop order:', error);\n        logTiming('Shop Order Fetch Error', startTime);\n        return null;\n    }\n}\n// Fetch all shop order items for supplier orders page\nasync function getAllShopOrderItems(page = 1, limit = 50, search = '', status = '', partnerId = '') {\n    if (!checkSupabaseConfig()) return {\n        items: [],\n        totalCount: 0,\n        totalPages: 0\n    };\n    const startTime = performance.now();\n    const offset = (page - 1) * limit;\n    try {\n        console.log(`[SSR] Fetching shop order items page ${page}, limit ${limit}, search: \"${search}\", status: \"${status}\", partner: \"${partnerId}\"`);\n        // Build the query with joins to get all related data\n        let query = supabaseServer.from('shop_order_items').select(`\n        id,\n        product_name,\n        sku,\n        quantity,\n        base_price,\n        multiplier,\n        megjegyzes,\n        status,\n        created_at,\n        updated_at,\n        order_id,\n        units_id,\n        partner_id,\n        vat_id,\n        shop_orders!inner (\n          id,\n          customer_name,\n          order_number\n        ),\n        units (\n          id,\n          name,\n          shortform\n        ),\n        partners (\n          id,\n          name\n        ),\n        vat (\n          id,\n          name,\n          kulcs\n        )\n      `, {\n            count: 'exact'\n        }).is('shop_orders.deleted_at', null);\n        // Apply filters\n        if (search && search.length >= 2) {\n            query = query.or(`product_name.ilike.%${search}%,sku.ilike.%${search}%,shop_orders.customer_name.ilike.%${search}%`);\n        }\n        if (status) {\n            query = query.eq('status', status);\n        }\n        if (partnerId) {\n            query = query.eq('partner_id', partnerId);\n        }\n        const { data, error, count } = await query.order('created_at', {\n            ascending: false\n        }).range(offset, offset + limit - 1);\n        logTiming('Shop Order Items DB Query', startTime, `Found ${data?.length || 0} items`);\n        if (error) {\n            console.error('[SSR] Error fetching shop order items:', error);\n            return {\n                items: [],\n                totalCount: 0,\n                totalPages: 0\n            };\n        }\n        const totalCount = count || 0;\n        const totalPages = Math.ceil(totalCount / limit);\n        // Transform the data to include calculated fields\n        const items = data?.map((item)=>{\n            const grossUnitPrice = Math.round((item.base_price || 0) * (item.multiplier || 1) * (1 + (item.vat?.kulcs || 0) / 100));\n            return {\n                id: item.id,\n                product_name: item.product_name,\n                sku: item.sku,\n                quantity: item.quantity,\n                megjegyzes: item.megjegyzes,\n                status: item.status,\n                created_at: item.created_at,\n                updated_at: item.updated_at,\n                order_id: item.order_id,\n                customer_name: item.shop_orders?.customer_name,\n                order_number: item.shop_orders?.order_number,\n                unit_name: item.units?.name,\n                unit_shortform: item.units?.shortform,\n                partner_name: item.partners?.name,\n                partner_id: item.partner_id,\n                vat_name: item.vat?.name,\n                vat_percent: item.vat?.kulcs,\n                base_price: item.base_price,\n                multiplier: item.multiplier,\n                gross_unit_price: grossUnitPrice,\n                gross_total: Math.round(grossUnitPrice * item.quantity)\n            };\n        }) || [];\n        logTiming('Shop Order Items Total', startTime, `Transformed ${items.length} items`);\n        console.log(`[SSR] Shop order items fetched successfully: ${items.length} items, total: ${totalCount}`);\n        return {\n            items,\n            totalCount,\n            totalPages,\n            currentPage: page,\n            limit\n        };\n    } catch (error) {\n        console.error('[SSR] Error fetching shop order items:', error);\n        logTiming('Shop Order Items Fetch Error', startTime);\n        return {\n            items: [],\n            totalCount: 0,\n            totalPages: 0\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase-server.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/xlsx"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fcustomers%2Fimport%2Froute&page=%2Fapi%2Fcustomers%2Fimport%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcustomers%2Fimport%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();