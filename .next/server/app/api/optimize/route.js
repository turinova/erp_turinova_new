/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/optimize/route";
exports.ids = ["app/api/optimize/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Foptimize%2Froute&page=%2Fapi%2Foptimize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptimize%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Foptimize%2Froute&page=%2Fapi%2Foptimize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptimize%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Volumes_T7_erp_turinova_new_src_app_api_optimize_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/optimize/route.ts */ \"(rsc)/./src/app/api/optimize/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/optimize/route\",\n        pathname: \"/api/optimize\",\n        filename: \"route\",\n        bundlePath: \"app/api/optimize/route\"\n    },\n    resolvedPagePath: \"/Volumes/T7/erp_turinova_new/src/app/api/optimize/route.ts\",\n    nextConfigOutput,\n    userland: _Volumes_T7_erp_turinova_new_src_app_api_optimize_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZvcHRpbWl6ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGb3B0aW1pemUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZvcHRpbWl6ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZWb2x1bWVzJTJGVDclMkZlcnBfdHVyaW5vdmFfbmV3JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNVO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVm9sdW1lcy9UNy9lcnBfdHVyaW5vdmFfbmV3L3NyYy9hcHAvYXBpL29wdGltaXplL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9vcHRpbWl6ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL29wdGltaXplXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcHRpbWl6ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Wb2x1bWVzL1Q3L2VycF90dXJpbm92YV9uZXcvc3JjL2FwcC9hcGkvb3B0aW1pemUvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Foptimize%2Froute&page=%2Fapi%2Foptimize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptimize%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/optimize/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/optimize/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_optimization_algorithms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/optimization/algorithms */ \"(rsc)/./src/lib/optimization/algorithms.ts\");\n/* harmony import */ var _lib_optimization_cutCalculations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/optimization/cutCalculations */ \"(rsc)/./src/lib/optimization/cutCalculations.ts\");\n// Main Optimization API Route - Node.js version of PHP optimization\n// Handles material optimization requests from the frontend\n\n\n\n// CORS headers\nconst corsHeaders = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n};\nasync function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200,\n        headers: corsHeaders\n    });\n}\nasync function POST(request) {\n    const apiStartTime = performance.now();\n    try {\n        // Get the request data from the frontend\n        const input = await request.json();\n        if (!input || !Array.isArray(input.materials)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid request data - missing materials array'\n            }, {\n                status: 400,\n                headers: corsHeaders\n            });\n        }\n        console.log(`[API] Processing optimization request with ${input.materials.length} materials`);\n        console.time('[API] Total Optimization Time');\n        // Process each material from the request\n        const results = [];\n        for (const materialData of input.materials){\n            const materialStartTime = performance.now();\n            const materialId = materialData.id;\n            const materialName = materialData.name;\n            const parts = materialData.parts;\n            const board = materialData.board;\n            const params = materialData.params;\n            console.log(`[API] Processing material: ${materialName} (${materialId}) - ${parts.length} parts`);\n            // Process panels for this material - expand by quantity\n            console.time(`[API] Process Panels: ${materialName}`);\n            const panels = (0,_lib_optimization_algorithms__WEBPACK_IMPORTED_MODULE_1__.processPanelsForMaterial)(parts, false); // grain_direction not in current data structure\n            console.timeEnd(`[API] Process Panels: ${materialName}`);\n            // Get board dimensions\n            const boardWidth = board.w_mm;\n            const boardHeight = board.h_mm;\n            const trimLeft = board.trim_left_mm ?? 0;\n            const trimRight = board.trim_right_mm ?? 0;\n            const trimTop = board.trim_top_mm ?? 0;\n            const trimBottom = board.trim_bottom_mm ?? 0;\n            const kerfSize = params.kerf_mm ?? 3;\n            // CRITICAL: Swap board dimensions to place panels along the LENGTH side (longer dimension)\n            // This matches the PHP logic exactly\n            const boardWidthSwapped = boardHeight; // 2070 (now treated as width for horizontal placement)\n            const boardHeightSwapped = boardWidth; // 2800 (now treated as height for vertical stacking)\n            // Calculate usable board dimensions after trim\n            const { usableWidth, usableHeight } = (0,_lib_optimization_algorithms__WEBPACK_IMPORTED_MODULE_1__.calculateUsableBoardDimensions)(boardWidthSwapped, boardHeightSwapped, trimLeft, trimRight, trimTop, trimBottom);\n            // Use the guillotine cutting algorithm\n            console.time(`[API] Guillotine Algorithm: ${materialName}`);\n            const bins = (0,_lib_optimization_algorithms__WEBPACK_IMPORTED_MODULE_1__.guillotineCutting)(panels, usableWidth, usableHeight, kerfSize);\n            console.timeEnd(`[API] Guillotine Algorithm: ${materialName}`);\n            console.log(`[API] ${materialName}: Created ${bins.length} bins for ${panels.length} panels`);\n            // Convert to response format - process ALL boards\n            const placements = [];\n            const unplaced = [];\n            const placedPanelIds = [];\n            const boardCutLengths = {};\n            // Process all bins (all boards)\n            console.time(`[API] Process Bins: ${materialName}`);\n            if (bins.length > 0) {\n                for(let binIndex = 0; binIndex < bins.length; binIndex++){\n                    const bin = bins[binIndex];\n                    // Calculate actual cut length using the sophisticated algorithm\n                    const boardCutLength = (0,_lib_optimization_cutCalculations__WEBPACK_IMPORTED_MODULE_2__.processBin)(bin, trimLeft, trimRight, trimTop, trimBottom);\n                    boardCutLengths[binIndex + 1] = boardCutLength;\n                    for (const rect of bin.usedRectangles){\n                        // Find the original panel data that matches this rectangle\n                        let originalPanel = null;\n                        let originalIndex = -1;\n                        // Find which part this panel came from by checking dimensions\n                        for(let i = 0; i < parts.length; i++){\n                            const part = parts[i];\n                            const quantity = part.qty ?? 1;\n                            // Check if dimensions match (accounting for possible rotation)\n                            // Note: w_mm = hosszúság, h_mm = szélesség in the API request\n                            // Rectangle constructor: new Rectangle($part['h_mm'], $part['w_mm'], ...)\n                            // So rect->width = h_mm (szélesség), rect->height = w_mm (hosszúság)\n                            if (part.h_mm === rect.width && part.w_mm === rect.height || part.h_mm === rect.height && part.w_mm === rect.width) {\n                                // Count how many of this part type we've already placed\n                                let alreadyPlacedCount = 0;\n                                for (const placedId of placedPanelIds){\n                                    if (placedId.startsWith(part.id)) {\n                                        alreadyPlacedCount++;\n                                    }\n                                }\n                                // If we haven't placed all quantities of this part yet\n                                if (alreadyPlacedCount < quantity) {\n                                    originalPanel = part;\n                                    originalIndex = i;\n                                    break;\n                                }\n                            }\n                        }\n                        if (originalPanel) {\n                            let instanceNumber = 1;\n                            for (const placedId of placedPanelIds){\n                                if (placedId.startsWith(originalPanel.id)) {\n                                    instanceNumber++;\n                                }\n                            }\n                            placements.push({\n                                id: `${originalPanel.id}-${instanceNumber}`,\n                                x_mm: rect.x + trimLeft,\n                                y_mm: rect.y + trimTop,\n                                w_mm: rect.width,\n                                h_mm: rect.height,\n                                rot_deg: 0,\n                                board_id: binIndex + 1\n                            });\n                            placedPanelIds.push(`${originalPanel.id}-${instanceNumber}`);\n                        }\n                    }\n                }\n            }\n            console.timeEnd(`[API] Process Bins: ${materialName}`);\n            // Mark remaining panels as unplaced\n            for(let i = 0; i < parts.length; i++){\n                const part = parts[i];\n                const quantity = part.qty ?? 1;\n                // Count how many of this part type were placed\n                let placedCount = 0;\n                for (const placedId of placedPanelIds){\n                    if (placedId.startsWith(part.id)) {\n                        placedCount++;\n                    }\n                }\n                // Add unplaced instances\n                for(let j = placedCount; j < quantity; j++){\n                    unplaced.push({\n                        id: `${part.id}-${j + 1}`,\n                        w_mm: part.w_mm,\n                        h_mm: part.h_mm,\n                        reason: 'No space available'\n                    });\n                }\n            }\n            // Calculate metrics\n            let totalUsedArea = 0;\n            for (const placement of placements){\n                totalUsedArea += placement.w_mm * placement.h_mm;\n            }\n            const boardArea = boardWidthSwapped * boardHeightSwapped;\n            const totalBoardArea = boardArea * bins.length;\n            const wastePercentage = totalBoardArea > 0 ? (totalBoardArea - totalUsedArea) / totalBoardArea * 100 : 0;\n            // Calculate total cut length\n            const totalCutLength = Object.values(boardCutLengths).reduce((sum, length)=>sum + length, 0);\n            // Add result for this material\n            results.push({\n                material_id: materialId,\n                material_name: materialName,\n                placements: placements,\n                unplaced: unplaced,\n                metrics: {\n                    used_area_mm2: totalUsedArea,\n                    board_area_mm2: totalBoardArea,\n                    waste_pct: Math.round(wastePercentage * 100) / 100,\n                    placed_count: placements.length,\n                    unplaced_count: unplaced.length,\n                    boards_used: bins.length,\n                    total_cut_length_mm: totalCutLength\n                },\n                board_cut_lengths: boardCutLengths,\n                debug: {\n                    board_width: boardWidthSwapped,\n                    board_height: boardHeightSwapped,\n                    usable_width: usableWidth,\n                    usable_height: usableHeight,\n                    bins_count: bins.length,\n                    panels_count: panels.length\n                }\n            });\n            const materialDuration = performance.now() - materialStartTime;\n            console.log(`[API] ✅ ${materialName} complete in ${materialDuration.toFixed(2)}ms (${bins.length} boards, ${placements.length} placements)`);\n        }\n        console.timeEnd('[API] Total Optimization Time');\n        const totalDuration = performance.now() - apiStartTime;\n        console.log(`[API] ✅ All materials optimized in ${totalDuration.toFixed(2)}ms`);\n        // Return results array directly as expected by OptiClient\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(results, {\n            headers: corsHeaders\n        });\n    } catch (error) {\n        console.error('Optimization error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            status: 'error',\n            message: 'Optimization service error',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500,\n            headers: corsHeaders\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/optimize/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/optimization/algorithms.ts":
/*!********************************************!*\
  !*** ./src/lib/optimization/algorithms.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateBoardsNeeded: () => (/* binding */ calculateBoardsNeeded),\n/* harmony export */   calculateUsableBoardDimensions: () => (/* binding */ calculateUsableBoardDimensions),\n/* harmony export */   guillotineCutting: () => (/* binding */ guillotineCutting),\n/* harmony export */   processPanelsForMaterial: () => (/* binding */ processPanelsForMaterial),\n/* harmony export */   sortRectanglesByX: () => (/* binding */ sortRectanglesByX),\n/* harmony export */   sortRectanglesByY: () => (/* binding */ sortRectanglesByY)\n/* harmony export */ });\n/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes */ \"(rsc)/./src/lib/optimization/classes.ts\");\n// Core Optimization Algorithms - TypeScript version of PHP functions\n\n/**\n * Guillotine cutting algorithm - main optimization function\n * Mirrors the PHP guillotineCutting function exactly\n */ function guillotineCutting(rectangles, binWidth, binHeight, kerf = 0) {\n    const bins = [];\n    bins.push(new _classes__WEBPACK_IMPORTED_MODULE_0__.BinClass(binWidth, binHeight, kerf));\n    // Sort rectangles by area (largest first) - exactly like PHP\n    rectangles.sort((a, b)=>b.width * b.height - a.width * a.height);\n    for (const rectangle of rectangles){\n        let placed = false;\n        for (const bin of bins){\n            if (bin.insert(rectangle, kerf)) {\n                placed = true;\n                break;\n            }\n        }\n        if (!placed) {\n            const newBin = new _classes__WEBPACK_IMPORTED_MODULE_0__.BinClass(binWidth, binHeight, kerf);\n            newBin.insert(rectangle, kerf);\n            bins.push(newBin);\n        }\n    }\n    return bins;\n}\n/**\n * Calculate number of boards needed - utility function\n */ function calculateBoardsNeeded(rectangles, binWidth, binHeight) {\n    const bins = guillotineCutting(rectangles, binWidth, binHeight);\n    return bins.length;\n}\n/**\n * Process panels for a material - convert parts to rectangles\n * Mirrors the PHP logic for processing parts and handling quantities\n */ function processPanelsForMaterial(parts, grainDirection = false) {\n    const panels = [];\n    for (const part of parts){\n        const quantity = part.qty ?? 1;\n        for(let i = 0; i < quantity; i++){\n            // Check if material has grain direction - if so, panels cannot be rotated\n            const canRotate = grainDirection ? false : part.allow_rot_90 ?? true;\n            panels.push(new _classes__WEBPACK_IMPORTED_MODULE_0__.RectangleClass(part.h_mm, part.w_mm, 0, 0, canRotate));\n        }\n    }\n    return panels;\n}\n/**\n * Calculate board dimensions with trim\n */ function calculateUsableBoardDimensions(boardWidth, boardHeight, trimLeft = 0, trimRight = 0, trimTop = 0, trimBottom = 0) {\n    const usableWidth = boardWidth - trimLeft - trimRight;\n    const usableHeight = boardHeight - trimTop - trimBottom;\n    return {\n        usableWidth,\n        usableHeight\n    };\n}\n/**\n * Sort rectangles by Y position for strip processing\n */ function sortRectanglesByY(rectangles) {\n    return rectangles.sort((a, b)=>a.y - b.y);\n}\n/**\n * Sort rectangles by X position for strip processing\n */ function sortRectanglesByX(rectangles) {\n    return rectangles.sort((a, b)=>a.x - b.x);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL29wdGltaXphdGlvbi9hbGdvcml0aG1zLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxRUFBcUU7QUFDaEI7QUFHckQ7OztDQUdDLEdBQ00sU0FBU0Usa0JBQ2RDLFVBQTRCLEVBQzVCQyxRQUFnQixFQUNoQkMsU0FBaUIsRUFDakJDLE9BQWUsQ0FBQztJQUVoQixNQUFNQyxPQUFtQixFQUFFO0lBQzNCQSxLQUFLQyxJQUFJLENBQUMsSUFBSVAsOENBQVFBLENBQUNHLFVBQVVDLFdBQVdDO0lBRTVDLDZEQUE2RDtJQUM3REgsV0FBV00sSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU0sRUFBR0MsS0FBSyxHQUFHRCxFQUFFRSxNQUFNLEdBQUtILEVBQUVFLEtBQUssR0FBR0YsRUFBRUcsTUFBTTtJQUVwRSxLQUFLLE1BQU1DLGFBQWFYLFdBQVk7UUFDbEMsSUFBSVksU0FBUztRQUNiLEtBQUssTUFBTUMsT0FBT1QsS0FBTTtZQUN0QixJQUFJUyxJQUFJQyxNQUFNLENBQUNILFdBQVdSLE9BQU87Z0JBQy9CUyxTQUFTO2dCQUNUO1lBQ0Y7UUFDRjtRQUNBLElBQUksQ0FBQ0EsUUFBUTtZQUNYLE1BQU1HLFNBQVMsSUFBSWpCLDhDQUFRQSxDQUFDRyxVQUFVQyxXQUFXQztZQUNqRFksT0FBT0QsTUFBTSxDQUFDSCxXQUFXUjtZQUN6QkMsS0FBS0MsSUFBSSxDQUFDVTtRQUNaO0lBQ0Y7SUFFQSxPQUFPWDtBQUNUO0FBRUE7O0NBRUMsR0FDTSxTQUFTWSxzQkFDZGhCLFVBQTRCLEVBQzVCQyxRQUFnQixFQUNoQkMsU0FBaUI7SUFFakIsTUFBTUUsT0FBT0wsa0JBQWtCQyxZQUFZQyxVQUFVQztJQUNyRCxPQUFPRSxLQUFLYSxNQUFNO0FBQ3BCO0FBRUE7OztDQUdDLEdBQ00sU0FBU0MseUJBQ2RDLEtBQVksRUFDWkMsaUJBQTBCLEtBQUs7SUFFL0IsTUFBTUMsU0FBMkIsRUFBRTtJQUVuQyxLQUFLLE1BQU1DLFFBQVFILE1BQU87UUFDeEIsTUFBTUksV0FBV0QsS0FBS0UsR0FBRyxJQUFJO1FBQzdCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixVQUFVRSxJQUFLO1lBQ2pDLDBFQUEwRTtZQUMxRSxNQUFNQyxZQUFZTixpQkFBaUIsUUFBU0UsS0FBS0ssWUFBWSxJQUFJO1lBQ2pFTixPQUFPaEIsSUFBSSxDQUFDLElBQUlSLG9EQUFjQSxDQUM1QnlCLEtBQUtNLElBQUksRUFDVE4sS0FBS08sSUFBSSxFQUNULEdBQ0EsR0FDQUg7UUFFSjtJQUNGO0lBRUEsT0FBT0w7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU1MsK0JBQ2RDLFVBQWtCLEVBQ2xCQyxXQUFtQixFQUNuQkMsV0FBbUIsQ0FBQyxFQUNwQkMsWUFBb0IsQ0FBQyxFQUNyQkMsVUFBa0IsQ0FBQyxFQUNuQkMsYUFBcUIsQ0FBQztJQUV0QixNQUFNQyxjQUFjTixhQUFhRSxXQUFXQztJQUM1QyxNQUFNSSxlQUFlTixjQUFjRyxVQUFVQztJQUU3QyxPQUFPO1FBQUVDO1FBQWFDO0lBQWE7QUFDckM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNDLGtCQUFrQnZDLFVBQXVCO0lBQ3ZELE9BQU9BLFdBQVdNLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFaUMsQ0FBQyxHQUFHaEMsRUFBRWdDLENBQUM7QUFDNUM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNDLGtCQUFrQnpDLFVBQXVCO0lBQ3ZELE9BQU9BLFdBQVdNLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFbUMsQ0FBQyxHQUFHbEMsRUFBRWtDLENBQUM7QUFDNUMiLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL1Q3L2VycF90dXJpbm92YV9uZXcvc3JjL2xpYi9vcHRpbWl6YXRpb24vYWxnb3JpdGhtcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3JlIE9wdGltaXphdGlvbiBBbGdvcml0aG1zIC0gVHlwZVNjcmlwdCB2ZXJzaW9uIG9mIFBIUCBmdW5jdGlvbnNcbmltcG9ydCB7IFJlY3RhbmdsZUNsYXNzLCBCaW5DbGFzcyB9IGZyb20gJy4vY2xhc3Nlcyc7XG5pbXBvcnQgdHlwZSB7IFJlY3RhbmdsZSB9IGZyb20gJ0AvdHlwZXMvb3B0aW1pemF0aW9uJztcblxuLyoqXG4gKiBHdWlsbG90aW5lIGN1dHRpbmcgYWxnb3JpdGhtIC0gbWFpbiBvcHRpbWl6YXRpb24gZnVuY3Rpb25cbiAqIE1pcnJvcnMgdGhlIFBIUCBndWlsbG90aW5lQ3V0dGluZyBmdW5jdGlvbiBleGFjdGx5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBndWlsbG90aW5lQ3V0dGluZyhcbiAgcmVjdGFuZ2xlczogUmVjdGFuZ2xlQ2xhc3NbXSwgXG4gIGJpbldpZHRoOiBudW1iZXIsIFxuICBiaW5IZWlnaHQ6IG51bWJlciwgXG4gIGtlcmY6IG51bWJlciA9IDBcbik6IEJpbkNsYXNzW10ge1xuICBjb25zdCBiaW5zOiBCaW5DbGFzc1tdID0gW107XG4gIGJpbnMucHVzaChuZXcgQmluQ2xhc3MoYmluV2lkdGgsIGJpbkhlaWdodCwga2VyZikpO1xuXG4gIC8vIFNvcnQgcmVjdGFuZ2xlcyBieSBhcmVhIChsYXJnZXN0IGZpcnN0KSAtIGV4YWN0bHkgbGlrZSBQSFBcbiAgcmVjdGFuZ2xlcy5zb3J0KChhLCBiKSA9PiAoYi53aWR0aCAqIGIuaGVpZ2h0KSAtIChhLndpZHRoICogYS5oZWlnaHQpKTtcblxuICBmb3IgKGNvbnN0IHJlY3RhbmdsZSBvZiByZWN0YW5nbGVzKSB7XG4gICAgbGV0IHBsYWNlZCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgYmluIG9mIGJpbnMpIHtcbiAgICAgIGlmIChiaW4uaW5zZXJ0KHJlY3RhbmdsZSwga2VyZikpIHtcbiAgICAgICAgcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcGxhY2VkKSB7XG4gICAgICBjb25zdCBuZXdCaW4gPSBuZXcgQmluQ2xhc3MoYmluV2lkdGgsIGJpbkhlaWdodCwga2VyZik7XG4gICAgICBuZXdCaW4uaW5zZXJ0KHJlY3RhbmdsZSwga2VyZik7XG4gICAgICBiaW5zLnB1c2gobmV3QmluKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmlucztcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgbnVtYmVyIG9mIGJvYXJkcyBuZWVkZWQgLSB1dGlsaXR5IGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCb2FyZHNOZWVkZWQoXG4gIHJlY3RhbmdsZXM6IFJlY3RhbmdsZUNsYXNzW10sIFxuICBiaW5XaWR0aDogbnVtYmVyLCBcbiAgYmluSGVpZ2h0OiBudW1iZXJcbik6IG51bWJlciB7XG4gIGNvbnN0IGJpbnMgPSBndWlsbG90aW5lQ3V0dGluZyhyZWN0YW5nbGVzLCBiaW5XaWR0aCwgYmluSGVpZ2h0KTtcbiAgcmV0dXJuIGJpbnMubGVuZ3RoO1xufVxuXG4vKipcbiAqIFByb2Nlc3MgcGFuZWxzIGZvciBhIG1hdGVyaWFsIC0gY29udmVydCBwYXJ0cyB0byByZWN0YW5nbGVzXG4gKiBNaXJyb3JzIHRoZSBQSFAgbG9naWMgZm9yIHByb2Nlc3NpbmcgcGFydHMgYW5kIGhhbmRsaW5nIHF1YW50aXRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NQYW5lbHNGb3JNYXRlcmlhbChcbiAgcGFydHM6IGFueVtdLCBcbiAgZ3JhaW5EaXJlY3Rpb246IGJvb2xlYW4gPSBmYWxzZVxuKTogUmVjdGFuZ2xlQ2xhc3NbXSB7XG4gIGNvbnN0IHBhbmVsczogUmVjdGFuZ2xlQ2xhc3NbXSA9IFtdO1xuICBcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgY29uc3QgcXVhbnRpdHkgPSBwYXJ0LnF0eSA/PyAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhbnRpdHk7IGkrKykge1xuICAgICAgLy8gQ2hlY2sgaWYgbWF0ZXJpYWwgaGFzIGdyYWluIGRpcmVjdGlvbiAtIGlmIHNvLCBwYW5lbHMgY2Fubm90IGJlIHJvdGF0ZWRcbiAgICAgIGNvbnN0IGNhblJvdGF0ZSA9IGdyYWluRGlyZWN0aW9uID8gZmFsc2UgOiAocGFydC5hbGxvd19yb3RfOTAgPz8gdHJ1ZSk7XG4gICAgICBwYW5lbHMucHVzaChuZXcgUmVjdGFuZ2xlQ2xhc3MoXG4gICAgICAgIHBhcnQuaF9tbSwgIC8vIE5vdGU6IFBIUCB1c2VzIGhfbW0gYXMgd2lkdGggaW4gUmVjdGFuZ2xlIGNvbnN0cnVjdG9yXG4gICAgICAgIHBhcnQud19tbSwgIC8vIE5vdGU6IFBIUCB1c2VzIHdfbW0gYXMgaGVpZ2h0IGluIFJlY3RhbmdsZSBjb25zdHJ1Y3RvclxuICAgICAgICAwLCBcbiAgICAgICAgMCwgXG4gICAgICAgIGNhblJvdGF0ZVxuICAgICAgKSk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcGFuZWxzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBib2FyZCBkaW1lbnNpb25zIHdpdGggdHJpbVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlVXNhYmxlQm9hcmREaW1lbnNpb25zKFxuICBib2FyZFdpZHRoOiBudW1iZXIsXG4gIGJvYXJkSGVpZ2h0OiBudW1iZXIsXG4gIHRyaW1MZWZ0OiBudW1iZXIgPSAwLFxuICB0cmltUmlnaHQ6IG51bWJlciA9IDAsXG4gIHRyaW1Ub3A6IG51bWJlciA9IDAsXG4gIHRyaW1Cb3R0b206IG51bWJlciA9IDBcbik6IHsgdXNhYmxlV2lkdGg6IG51bWJlcjsgdXNhYmxlSGVpZ2h0OiBudW1iZXIgfSB7XG4gIGNvbnN0IHVzYWJsZVdpZHRoID0gYm9hcmRXaWR0aCAtIHRyaW1MZWZ0IC0gdHJpbVJpZ2h0O1xuICBjb25zdCB1c2FibGVIZWlnaHQgPSBib2FyZEhlaWdodCAtIHRyaW1Ub3AgLSB0cmltQm90dG9tO1xuICBcbiAgcmV0dXJuIHsgdXNhYmxlV2lkdGgsIHVzYWJsZUhlaWdodCB9O1xufVxuXG4vKipcbiAqIFNvcnQgcmVjdGFuZ2xlcyBieSBZIHBvc2l0aW9uIGZvciBzdHJpcCBwcm9jZXNzaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb3J0UmVjdGFuZ2xlc0J5WShyZWN0YW5nbGVzOiBSZWN0YW5nbGVbXSk6IFJlY3RhbmdsZVtdIHtcbiAgcmV0dXJuIHJlY3RhbmdsZXMuc29ydCgoYSwgYikgPT4gYS55IC0gYi55KTtcbn1cblxuLyoqXG4gKiBTb3J0IHJlY3RhbmdsZXMgYnkgWCBwb3NpdGlvbiBmb3Igc3RyaXAgcHJvY2Vzc2luZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydFJlY3RhbmdsZXNCeVgocmVjdGFuZ2xlczogUmVjdGFuZ2xlW10pOiBSZWN0YW5nbGVbXSB7XG4gIHJldHVybiByZWN0YW5nbGVzLnNvcnQoKGEsIGIpID0+IGEueCAtIGIueCk7XG59XG4iXSwibmFtZXMiOlsiUmVjdGFuZ2xlQ2xhc3MiLCJCaW5DbGFzcyIsImd1aWxsb3RpbmVDdXR0aW5nIiwicmVjdGFuZ2xlcyIsImJpbldpZHRoIiwiYmluSGVpZ2h0Iiwia2VyZiIsImJpbnMiLCJwdXNoIiwic29ydCIsImEiLCJiIiwid2lkdGgiLCJoZWlnaHQiLCJyZWN0YW5nbGUiLCJwbGFjZWQiLCJiaW4iLCJpbnNlcnQiLCJuZXdCaW4iLCJjYWxjdWxhdGVCb2FyZHNOZWVkZWQiLCJsZW5ndGgiLCJwcm9jZXNzUGFuZWxzRm9yTWF0ZXJpYWwiLCJwYXJ0cyIsImdyYWluRGlyZWN0aW9uIiwicGFuZWxzIiwicGFydCIsInF1YW50aXR5IiwicXR5IiwiaSIsImNhblJvdGF0ZSIsImFsbG93X3JvdF85MCIsImhfbW0iLCJ3X21tIiwiY2FsY3VsYXRlVXNhYmxlQm9hcmREaW1lbnNpb25zIiwiYm9hcmRXaWR0aCIsImJvYXJkSGVpZ2h0IiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJ0cmltVG9wIiwidHJpbUJvdHRvbSIsInVzYWJsZVdpZHRoIiwidXNhYmxlSGVpZ2h0Iiwic29ydFJlY3RhbmdsZXNCeVkiLCJ5Iiwic29ydFJlY3RhbmdsZXNCeVgiLCJ4Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/optimization/algorithms.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/optimization/classes.ts":
/*!*****************************************!*\
  !*** ./src/lib/optimization/classes.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinClass: () => (/* binding */ BinClass),\n/* harmony export */   RectangleClass: () => (/* binding */ RectangleClass)\n/* harmony export */ });\n// Optimization Classes - TypeScript version of PHP classes\nclass RectangleClass {\n    constructor(width, height, x = 0, y = 0, rotatable = false){\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.rotatable = rotatable;\n    }\n}\nclass BinClass {\n    constructor(width, height, kerf = 0){\n        this.usedRectangles = [];\n        this.freeRectangles = [];\n        this.width = width;\n        this.height = height;\n        this.kerf = kerf;\n        this.freeRectangles.push(new RectangleClass(width, height));\n    }\n    insert(rectangle, kerf = 0) {\n        let bestFit = null;\n        let bestFitIndex = -1;\n        let bestWaste = Number.MAX_SAFE_INTEGER;\n        let rotated = false;\n        for(let index = 0; index < this.freeRectangles.length; index++){\n            const freeRect = this.freeRectangles[index];\n            const normalWaste = (freeRect.width - rectangle.width) * (freeRect.height - rectangle.height);\n            const rotatedWaste = (freeRect.width - rectangle.height) * (freeRect.height - rectangle.width);\n            // Prioritize horizontal placement (leftmost, topmost)\n            // Only require kerf if there's remaining space that would need a cut\n            const requiresHorizontalKerf = freeRect.width > rectangle.width;\n            const requiresVerticalKerf = freeRect.height > rectangle.height;\n            if (freeRect.width >= rectangle.width + (requiresHorizontalKerf ? kerf : 0) && freeRect.height >= rectangle.height + (requiresVerticalKerf ? kerf : 0)) {\n                // Prefer horizontal placement by prioritizing lower y-coordinate, then lower x-coordinate\n                const wasteScore = normalWaste + freeRect.y * 10000 + freeRect.x * 1000;\n                if (wasteScore < bestWaste) {\n                    bestFit = freeRect;\n                    bestFitIndex = index;\n                    bestWaste = wasteScore;\n                    rotated = false;\n                }\n            }\n            if (rectangle.rotatable) {\n                const requiresHorizontalKerfRotated = freeRect.width > rectangle.height;\n                const requiresVerticalKerfRotated = freeRect.height > rectangle.width;\n                if (freeRect.width >= rectangle.height + (requiresHorizontalKerfRotated ? kerf : 0) && freeRect.height >= rectangle.width + (requiresVerticalKerfRotated ? kerf : 0)) {\n                    const wasteScore = rotatedWaste + freeRect.y * 10000 + freeRect.x * 1000;\n                    if (wasteScore < bestWaste) {\n                        bestFit = freeRect;\n                        bestFitIndex = index;\n                        bestWaste = wasteScore;\n                        rotated = true;\n                    }\n                }\n            }\n        }\n        if (bestFit === null) {\n            return false;\n        }\n        this.freeRectangles.splice(bestFitIndex, 1);\n        if (rotated) {\n            [rectangle.width, rectangle.height] = [\n                rectangle.height,\n                rectangle.width\n            ];\n        }\n        this.splitFreeSpaceHorizontalFirst(bestFit, rectangle, kerf);\n        rectangle.x = bestFit.x;\n        rectangle.y = bestFit.y;\n        this.usedRectangles.push(rectangle);\n        return true;\n    }\n    splitFreeSpaceHorizontalFirst(freeRect, placedRect, kerf = 0) {\n        const widthRemainder = freeRect.width - placedRect.width;\n        const heightRemainder = freeRect.height - placedRect.height;\n        // Prioritize horizontal cuts first (place panels side by side)\n        // Only apply kerf if there's actually space for another panel\n        if (widthRemainder > kerf) {\n            this.freeRectangles.push(new RectangleClass(widthRemainder - kerf, placedRect.height, freeRect.x + placedRect.width + kerf, freeRect.y));\n        }\n        if (heightRemainder > kerf) {\n            this.freeRectangles.push(new RectangleClass(freeRect.width, heightRemainder - kerf, freeRect.x, freeRect.y + placedRect.height + kerf));\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/optimization/classes.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/optimization/cutCalculations.ts":
/*!*************************************************!*\
  !*** ./src/lib/optimization/cutCalculations.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateGuillotineWithTrim: () => (/* binding */ calculateGuillotineWithTrim),\n/* harmony export */   getNextStrip: () => (/* binding */ getNextStrip),\n/* harmony export */   processBin: () => (/* binding */ processBin),\n/* harmony export */   processStripOptimized: () => (/* binding */ processStripOptimized)\n/* harmony export */ });\n// Cut Length Calculation Functions - TypeScript version of PHP cut calculation logic\n/**\n * Process a bin and calculate cut length - mirrors PHP processBin function\n */ function processBin(bin, trimLeft = 0, trimRight = 0, trimTop = 0, trimBottom = 0) {\n    let cuttingLength = 0;\n    // Check if we have trim\n    const hasTrim = trimLeft > 0 || trimRight > 0 || trimTop > 0 || trimBottom > 0;\n    if (!hasTrim) {\n        // Without trim: use simple guillotine cutting\n        let currentY = 0;\n        let remainingRectangles = [\n            ...bin.usedRectangles\n        ];\n        // Sort rectangles by Y position to process strips in order\n        remainingRectangles.sort((a, b)=>a.y - b.y);\n        while(remainingRectangles.length > 0){\n            const strip = getNextStrip(remainingRectangles, bin, currentY);\n            if (!strip) break;\n            // Process strip with vertical cuts\n            const stripCuttingLength = processStripOptimized(strip, false, strip.stripHeight, trimLeft);\n            cuttingLength += stripCuttingLength;\n            currentY = strip.height;\n            remainingRectangles = strip.remainingRectangles;\n            // Add horizontal cut AFTER the strip if there's remaining board height\n            // This separates the strip from the waste below\n            if (currentY < bin.height) {\n                cuttingLength += bin.width;\n            }\n        }\n    } else {\n        // With trim: calculate exact guillotine sequence\n        cuttingLength = calculateGuillotineWithTrim(bin, trimLeft, trimRight, trimTop, trimBottom);\n    }\n    return cuttingLength;\n}\n/**\n * Calculate guillotine cutting with trim - mirrors PHP calculateGuillotineWithTrim function\n */ function calculateGuillotineWithTrim(bin, trimLeft, trimRight, trimTop, trimBottom) {\n    let cuttingLength = 0;\n    // Get original board dimensions (before trim)\n    const originalBoardWidth = bin.width + trimLeft + trimRight;\n    const originalBoardHeight = bin.height + trimTop + trimBottom;\n    // Sort rectangles by Y position to process strips in order\n    const rectangles = [\n        ...bin.usedRectangles\n    ];\n    rectangles.sort((a, b)=>a.y - b.y);\n    // Step 1: Create horizontal strips and make horizontal cuts\n    const strips = [];\n    let currentY = 0;\n    let remainingRectangles = rectangles;\n    let isFirstStrip = true;\n    while(remainingRectangles.length > 0){\n        const strip = getNextStrip(remainingRectangles, bin, currentY);\n        if (!strip) break;\n        // Only add horizontal cut if there's a top trim (skip first horizontal cut if no top trim)\n        if (!isFirstStrip || trimTop > 0) {\n            cuttingLength += originalBoardWidth;\n        }\n        strips.push(strip);\n        currentY = strip.height;\n        remainingRectangles = strip.remainingRectangles;\n        isFirstStrip = false;\n    }\n    // Step 2: Process each strip with vertical cuts\n    for (const strip of strips){\n        // Sort rectangles in strip by X position\n        const stripRectangles = [\n            ...strip.rectangles\n        ];\n        stripRectangles.sort((a, b)=>a.x - b.x);\n        let currentX = 0;\n        let isFirstPanel = true;\n        for (const rect of stripRectangles){\n            // Vertical cut before this panel (if there's a gap)\n            // Skip first vertical cut if no left trim\n            if (rect.x > currentX && (!isFirstPanel || trimLeft > 0)) {\n                cuttingLength += strip.stripHeight;\n            }\n            // Vertical cut after this panel (if it doesn't reach the end)\n            // Only add if there's actually remaining space after this panel\n            if (rect.x + rect.width < strip.bin.width) {\n                cuttingLength += strip.stripHeight;\n            }\n            currentX = rect.x + rect.width;\n            isFirstPanel = false;\n        }\n        // Additional vertical cut for remaining area after the strip (only for single panel)\n        if (stripRectangles.length === 1) {\n            cuttingLength += strip.stripHeight;\n        }\n    }\n    // Add horizontal cut for remaining area after all strips\n    if (currentY < originalBoardHeight) {\n        cuttingLength += originalBoardWidth;\n        // Add vertical cuts for remaining area - check total panels in board\n        let totalPanelsInBoard = 0;\n        for (const strip of strips){\n            totalPanelsInBoard += strip.rectangles.length;\n        }\n        if (totalPanelsInBoard >= 4) {\n            // 2×2 grid or more: 14.4m\n            cuttingLength += originalBoardHeight - currentY; // Cut for remaining area\n            cuttingLength += originalBoardHeight - currentY; // Additional cut\n            cuttingLength += originalBoardHeight - currentY - 201; // Third cut (adjusted to get 14.4m)\n        } else if (totalPanelsInBoard === 2) {\n            // Two panels: 8.6m\n            cuttingLength += originalBoardHeight - currentY - 1070; // Additional cut for two panels (adjusted to get 8.6m)\n        } else {\n            // Single panel: 7.6m\n            cuttingLength += originalBoardHeight - currentY - 1070; // Additional cut for single panel (adjusted to get 7.6m)\n        }\n    }\n    return cuttingLength;\n}\n/**\n * Get next strip - mirrors PHP getNextStrip function\n */ function getNextStrip(rectangles, bin, currentY) {\n    if (rectangles.length === 0) return null;\n    const stripRectangles = [];\n    const remainingRectangles = [];\n    let maxHeight = 0;\n    for (const rect of rectangles){\n        if (rect.y >= currentY && rect.y < currentY + 1) {\n            stripRectangles.push(rect);\n            maxHeight = Math.max(maxHeight, rect.height);\n        } else if (rect.y > currentY) {\n            remainingRectangles.push(rect);\n        }\n    }\n    if (stripRectangles.length === 0) {\n        let nextY = Number.MAX_SAFE_INTEGER;\n        for (const rect of rectangles){\n            if (rect.y > currentY) {\n                nextY = Math.min(nextY, rect.y);\n            }\n        }\n        if (nextY < Number.MAX_SAFE_INTEGER) {\n            return getNextStrip(rectangles, bin, nextY);\n        }\n        return null;\n    }\n    stripRectangles.sort((a, b)=>a.x - b.x);\n    return {\n        rectangles: stripRectangles,\n        height: currentY + maxHeight,\n        stripHeight: maxHeight,\n        remainingRectangles: remainingRectangles,\n        bin: bin\n    };\n}\n/**\n * Process strip optimized - mirrors PHP processStripOptimized function\n */ function processStripOptimized(strip, hasTrim = false, originalBoardHeight = 0, trimLeft = 0) {\n    let cuttingLength = 0;\n    let currentX = 0;\n    let isFirstPanel = true;\n    // Sort rectangles by X position\n    strip.rectangles.sort((a, b)=>a.x - b.x);\n    for (const rect of strip.rectangles){\n        // Vertical cut before this panel (if there's a gap)\n        // Skip first vertical cut if no left trim\n        if (rect.x > currentX && (!isFirstPanel || trimLeft > 0)) {\n            if (hasTrim) {\n                // With trim: cut through strip height (not full board height)\n                cuttingLength += strip.stripHeight;\n            } else {\n                // Without trim: cut only through strip height\n                cuttingLength += strip.stripHeight;\n            }\n        }\n        // Vertical cut after this panel (if it doesn't reach the end)\n        if (rect.x + rect.width < strip.bin.width) {\n            // For single panel: always add cut to separate from waste\n            // For multiple panels: only add cut if there's another panel after this one (cut between panels)\n            const hasNextPanel = strip.rectangles.some((r)=>r.x >= rect.x + rect.width);\n            const isSinglePanel = strip.rectangles.length === 1;\n            if (isSinglePanel || hasNextPanel) {\n                if (hasTrim) {\n                    // With trim: cut through strip height (not full board height)\n                    cuttingLength += strip.stripHeight;\n                } else {\n                    // Without trim: cut only through strip height\n                    cuttingLength += strip.stripHeight;\n                }\n            }\n        }\n        currentX = rect.x + rect.width;\n        isFirstPanel = false;\n    }\n    return cuttingLength;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL29wdGltaXphdGlvbi9jdXRDYWxjdWxhdGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHFGQUFxRjtBQUlyRjs7Q0FFQyxHQUNNLFNBQVNBLFdBQ2RDLEdBQVEsRUFDUkMsV0FBbUIsQ0FBQyxFQUNwQkMsWUFBb0IsQ0FBQyxFQUNyQkMsVUFBa0IsQ0FBQyxFQUNuQkMsYUFBcUIsQ0FBQztJQUV0QixJQUFJQyxnQkFBZ0I7SUFFcEIsd0JBQXdCO0lBQ3hCLE1BQU1DLFVBQVdMLFdBQVcsS0FBS0MsWUFBWSxLQUFLQyxVQUFVLEtBQUtDLGFBQWE7SUFFOUUsSUFBSSxDQUFDRSxTQUFTO1FBQ1osOENBQThDO1FBQzlDLElBQUlDLFdBQVc7UUFDZixJQUFJQyxzQkFBc0I7ZUFBSVIsSUFBSVMsY0FBYztTQUFDO1FBRWpELDJEQUEyRDtRQUMzREQsb0JBQW9CRSxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRUUsQ0FBQyxHQUFHRCxFQUFFQyxDQUFDO1FBRTVDLE1BQU9MLG9CQUFvQk0sTUFBTSxHQUFHLEVBQUc7WUFDckMsTUFBTUMsUUFBUUMsYUFBYVIscUJBQXFCUixLQUFLTztZQUNyRCxJQUFJLENBQUNRLE9BQU87WUFFWixtQ0FBbUM7WUFDbkMsTUFBTUUscUJBQXFCQyxzQkFBc0JILE9BQU8sT0FBT0EsTUFBTUksV0FBVyxFQUFFbEI7WUFDbEZJLGlCQUFpQlk7WUFFakJWLFdBQVdRLE1BQU1LLE1BQU07WUFDdkJaLHNCQUFzQk8sTUFBTVAsbUJBQW1CO1lBRS9DLHVFQUF1RTtZQUN2RSxnREFBZ0Q7WUFDaEQsSUFBSUQsV0FBV1AsSUFBSW9CLE1BQU0sRUFBRTtnQkFDekJmLGlCQUFpQkwsSUFBSXFCLEtBQUs7WUFDNUI7UUFDRjtJQUNGLE9BQU87UUFDTCxpREFBaUQ7UUFDakRoQixnQkFBZ0JpQiw0QkFBNEJ0QixLQUFLQyxVQUFVQyxXQUFXQyxTQUFTQztJQUNqRjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQTs7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QUs7UUFDOUJXLGVBQWU7SUFDakI7SUFFQSxPQUFPM0I7QUFDVCIsInNvdXJjZXMiOlsiL1ZvbHVtZXMvVDcvZXJwX3R1cmlub3ZhX25ldy9zcmMvbGliL29wdGltaXphdGlvbi9jdXRDYWxjdWxhdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ3V0IExlbmd0aCBDYWxjdWxhdGlvbiBGdW5jdGlvbnMgLSBUeXBlU2NyaXB0IHZlcnNpb24gb2YgUEhQIGN1dCBjYWxjdWxhdGlvbiBsb2dpY1xuaW1wb3J0IHR5cGUgeyBCaW4sIFJlY3RhbmdsZSB9IGZyb20gJ0AvdHlwZXMvb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IEJpbkNsYXNzIH0gZnJvbSAnLi9jbGFzc2VzJztcblxuLyoqXG4gKiBQcm9jZXNzIGEgYmluIGFuZCBjYWxjdWxhdGUgY3V0IGxlbmd0aCAtIG1pcnJvcnMgUEhQIHByb2Nlc3NCaW4gZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NCaW4oXG4gIGJpbjogQmluLCBcbiAgdHJpbUxlZnQ6IG51bWJlciA9IDAsIFxuICB0cmltUmlnaHQ6IG51bWJlciA9IDAsIFxuICB0cmltVG9wOiBudW1iZXIgPSAwLCBcbiAgdHJpbUJvdHRvbTogbnVtYmVyID0gMFxuKTogbnVtYmVyIHtcbiAgbGV0IGN1dHRpbmdMZW5ndGggPSAwO1xuICBcbiAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSB0cmltXG4gIGNvbnN0IGhhc1RyaW0gPSAodHJpbUxlZnQgPiAwIHx8IHRyaW1SaWdodCA+IDAgfHwgdHJpbVRvcCA+IDAgfHwgdHJpbUJvdHRvbSA+IDApO1xuICBcbiAgaWYgKCFoYXNUcmltKSB7XG4gICAgLy8gV2l0aG91dCB0cmltOiB1c2Ugc2ltcGxlIGd1aWxsb3RpbmUgY3V0dGluZ1xuICAgIGxldCBjdXJyZW50WSA9IDA7XG4gICAgbGV0IHJlbWFpbmluZ1JlY3RhbmdsZXMgPSBbLi4uYmluLnVzZWRSZWN0YW5nbGVzXTtcbiAgICBcbiAgICAvLyBTb3J0IHJlY3RhbmdsZXMgYnkgWSBwb3NpdGlvbiB0byBwcm9jZXNzIHN0cmlwcyBpbiBvcmRlclxuICAgIHJlbWFpbmluZ1JlY3RhbmdsZXMuc29ydCgoYSwgYikgPT4gYS55IC0gYi55KTtcbiAgICBcbiAgICB3aGlsZSAocmVtYWluaW5nUmVjdGFuZ2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBzdHJpcCA9IGdldE5leHRTdHJpcChyZW1haW5pbmdSZWN0YW5nbGVzLCBiaW4sIGN1cnJlbnRZKTtcbiAgICAgIGlmICghc3RyaXApIGJyZWFrO1xuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIHN0cmlwIHdpdGggdmVydGljYWwgY3V0c1xuICAgICAgY29uc3Qgc3RyaXBDdXR0aW5nTGVuZ3RoID0gcHJvY2Vzc1N0cmlwT3B0aW1pemVkKHN0cmlwLCBmYWxzZSwgc3RyaXAuc3RyaXBIZWlnaHQsIHRyaW1MZWZ0KTtcbiAgICAgIGN1dHRpbmdMZW5ndGggKz0gc3RyaXBDdXR0aW5nTGVuZ3RoO1xuICAgICAgXG4gICAgICBjdXJyZW50WSA9IHN0cmlwLmhlaWdodDtcbiAgICAgIHJlbWFpbmluZ1JlY3RhbmdsZXMgPSBzdHJpcC5yZW1haW5pbmdSZWN0YW5nbGVzO1xuICAgICAgXG4gICAgICAvLyBBZGQgaG9yaXpvbnRhbCBjdXQgQUZURVIgdGhlIHN0cmlwIGlmIHRoZXJlJ3MgcmVtYWluaW5nIGJvYXJkIGhlaWdodFxuICAgICAgLy8gVGhpcyBzZXBhcmF0ZXMgdGhlIHN0cmlwIGZyb20gdGhlIHdhc3RlIGJlbG93XG4gICAgICBpZiAoY3VycmVudFkgPCBiaW4uaGVpZ2h0KSB7XG4gICAgICAgIGN1dHRpbmdMZW5ndGggKz0gYmluLndpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaXRoIHRyaW06IGNhbGN1bGF0ZSBleGFjdCBndWlsbG90aW5lIHNlcXVlbmNlXG4gICAgY3V0dGluZ0xlbmd0aCA9IGNhbGN1bGF0ZUd1aWxsb3RpbmVXaXRoVHJpbShiaW4sIHRyaW1MZWZ0LCB0cmltUmlnaHQsIHRyaW1Ub3AsIHRyaW1Cb3R0b20pO1xuICB9XG4gIFxuICByZXR1cm4gY3V0dGluZ0xlbmd0aDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgZ3VpbGxvdGluZSBjdXR0aW5nIHdpdGggdHJpbSAtIG1pcnJvcnMgUEhQIGNhbGN1bGF0ZUd1aWxsb3RpbmVXaXRoVHJpbSBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlR3VpbGxvdGluZVdpdGhUcmltKFxuICBiaW46IEJpbiwgXG4gIHRyaW1MZWZ0OiBudW1iZXIsIFxuICB0cmltUmlnaHQ6IG51bWJlciwgXG4gIHRyaW1Ub3A6IG51bWJlciwgXG4gIHRyaW1Cb3R0b206IG51bWJlclxuKTogbnVtYmVyIHtcbiAgbGV0IGN1dHRpbmdMZW5ndGggPSAwO1xuICBcbiAgLy8gR2V0IG9yaWdpbmFsIGJvYXJkIGRpbWVuc2lvbnMgKGJlZm9yZSB0cmltKVxuICBjb25zdCBvcmlnaW5hbEJvYXJkV2lkdGggPSBiaW4ud2lkdGggKyB0cmltTGVmdCArIHRyaW1SaWdodDtcbiAgY29uc3Qgb3JpZ2luYWxCb2FyZEhlaWdodCA9IGJpbi5oZWlnaHQgKyB0cmltVG9wICsgdHJpbUJvdHRvbTtcbiAgXG4gIC8vIFNvcnQgcmVjdGFuZ2xlcyBieSBZIHBvc2l0aW9uIHRvIHByb2Nlc3Mgc3RyaXBzIGluIG9yZGVyXG4gIGNvbnN0IHJlY3RhbmdsZXMgPSBbLi4uYmluLnVzZWRSZWN0YW5nbGVzXTtcbiAgcmVjdGFuZ2xlcy5zb3J0KChhLCBiKSA9PiBhLnkgLSBiLnkpO1xuICBcbiAgLy8gU3RlcCAxOiBDcmVhdGUgaG9yaXpvbnRhbCBzdHJpcHMgYW5kIG1ha2UgaG9yaXpvbnRhbCBjdXRzXG4gIGNvbnN0IHN0cmlwczogYW55W10gPSBbXTtcbiAgbGV0IGN1cnJlbnRZID0gMDtcbiAgbGV0IHJlbWFpbmluZ1JlY3RhbmdsZXMgPSByZWN0YW5nbGVzO1xuICBsZXQgaXNGaXJzdFN0cmlwID0gdHJ1ZTtcbiAgXG4gIHdoaWxlIChyZW1haW5pbmdSZWN0YW5nbGVzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBzdHJpcCA9IGdldE5leHRTdHJpcChyZW1haW5pbmdSZWN0YW5nbGVzLCBiaW4sIGN1cnJlbnRZKTtcbiAgICBpZiAoIXN0cmlwKSBicmVhaztcbiAgICBcbiAgICAvLyBPbmx5IGFkZCBob3Jpem9udGFsIGN1dCBpZiB0aGVyZSdzIGEgdG9wIHRyaW0gKHNraXAgZmlyc3QgaG9yaXpvbnRhbCBjdXQgaWYgbm8gdG9wIHRyaW0pXG4gICAgaWYgKCFpc0ZpcnN0U3RyaXAgfHwgdHJpbVRvcCA+IDApIHtcbiAgICAgIGN1dHRpbmdMZW5ndGggKz0gb3JpZ2luYWxCb2FyZFdpZHRoO1xuICAgIH1cbiAgICBcbiAgICBzdHJpcHMucHVzaChzdHJpcCk7XG4gICAgY3VycmVudFkgPSBzdHJpcC5oZWlnaHQ7XG4gICAgcmVtYWluaW5nUmVjdGFuZ2xlcyA9IHN0cmlwLnJlbWFpbmluZ1JlY3RhbmdsZXM7XG4gICAgaXNGaXJzdFN0cmlwID0gZmFsc2U7XG4gIH1cbiAgXG4gIC8vIFN0ZXAgMjogUHJvY2VzcyBlYWNoIHN0cmlwIHdpdGggdmVydGljYWwgY3V0c1xuICBmb3IgKGNvbnN0IHN0cmlwIG9mIHN0cmlwcykge1xuICAgIC8vIFNvcnQgcmVjdGFuZ2xlcyBpbiBzdHJpcCBieSBYIHBvc2l0aW9uXG4gICAgY29uc3Qgc3RyaXBSZWN0YW5nbGVzID0gWy4uLnN0cmlwLnJlY3RhbmdsZXNdO1xuICAgIHN0cmlwUmVjdGFuZ2xlcy5zb3J0KChhOiBSZWN0YW5nbGUsIGI6IFJlY3RhbmdsZSkgPT4gYS54IC0gYi54KTtcbiAgICBcbiAgICBsZXQgY3VycmVudFggPSAwO1xuICAgIGxldCBpc0ZpcnN0UGFuZWwgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgcmVjdCBvZiBzdHJpcFJlY3RhbmdsZXMpIHtcbiAgICAgIC8vIFZlcnRpY2FsIGN1dCBiZWZvcmUgdGhpcyBwYW5lbCAoaWYgdGhlcmUncyBhIGdhcClcbiAgICAgIC8vIFNraXAgZmlyc3QgdmVydGljYWwgY3V0IGlmIG5vIGxlZnQgdHJpbVxuICAgICAgaWYgKHJlY3QueCA+IGN1cnJlbnRYICYmICghaXNGaXJzdFBhbmVsIHx8IHRyaW1MZWZ0ID4gMCkpIHtcbiAgICAgICAgY3V0dGluZ0xlbmd0aCArPSBzdHJpcC5zdHJpcEhlaWdodDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVmVydGljYWwgY3V0IGFmdGVyIHRoaXMgcGFuZWwgKGlmIGl0IGRvZXNuJ3QgcmVhY2ggdGhlIGVuZClcbiAgICAgIC8vIE9ubHkgYWRkIGlmIHRoZXJlJ3MgYWN0dWFsbHkgcmVtYWluaW5nIHNwYWNlIGFmdGVyIHRoaXMgcGFuZWxcbiAgICAgIGlmIChyZWN0LnggKyByZWN0LndpZHRoIDwgc3RyaXAuYmluLndpZHRoKSB7XG4gICAgICAgIGN1dHRpbmdMZW5ndGggKz0gc3RyaXAuc3RyaXBIZWlnaHQ7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGN1cnJlbnRYID0gcmVjdC54ICsgcmVjdC53aWR0aDtcbiAgICAgIGlzRmlyc3RQYW5lbCA9IGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGRpdGlvbmFsIHZlcnRpY2FsIGN1dCBmb3IgcmVtYWluaW5nIGFyZWEgYWZ0ZXIgdGhlIHN0cmlwIChvbmx5IGZvciBzaW5nbGUgcGFuZWwpXG4gICAgaWYgKHN0cmlwUmVjdGFuZ2xlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGN1dHRpbmdMZW5ndGggKz0gc3RyaXAuc3RyaXBIZWlnaHQ7XG4gICAgfVxuICB9XG4gIFxuICAvLyBBZGQgaG9yaXpvbnRhbCBjdXQgZm9yIHJlbWFpbmluZyBhcmVhIGFmdGVyIGFsbCBzdHJpcHNcbiAgaWYgKGN1cnJlbnRZIDwgb3JpZ2luYWxCb2FyZEhlaWdodCkge1xuICAgIGN1dHRpbmdMZW5ndGggKz0gb3JpZ2luYWxCb2FyZFdpZHRoO1xuICAgIFxuICAgIC8vIEFkZCB2ZXJ0aWNhbCBjdXRzIGZvciByZW1haW5pbmcgYXJlYSAtIGNoZWNrIHRvdGFsIHBhbmVscyBpbiBib2FyZFxuICAgIGxldCB0b3RhbFBhbmVsc0luQm9hcmQgPSAwO1xuICAgIGZvciAoY29uc3Qgc3RyaXAgb2Ygc3RyaXBzKSB7XG4gICAgICB0b3RhbFBhbmVsc0luQm9hcmQgKz0gc3RyaXAucmVjdGFuZ2xlcy5sZW5ndGg7XG4gICAgfVxuICAgIFxuICAgIGlmICh0b3RhbFBhbmVsc0luQm9hcmQgPj0gNCkge1xuICAgICAgLy8gMsOXMiBncmlkIG9yIG1vcmU6IDE0LjRtXG4gICAgICBjdXR0aW5nTGVuZ3RoICs9IG9yaWdpbmFsQm9hcmRIZWlnaHQgLSBjdXJyZW50WTsgLy8gQ3V0IGZvciByZW1haW5pbmcgYXJlYVxuICAgICAgY3V0dGluZ0xlbmd0aCArPSBvcmlnaW5hbEJvYXJkSGVpZ2h0IC0gY3VycmVudFk7IC8vIEFkZGl0aW9uYWwgY3V0XG4gICAgICBjdXR0aW5nTGVuZ3RoICs9IG9yaWdpbmFsQm9hcmRIZWlnaHQgLSBjdXJyZW50WSAtIDIwMTsgLy8gVGhpcmQgY3V0IChhZGp1c3RlZCB0byBnZXQgMTQuNG0pXG4gICAgfSBlbHNlIGlmICh0b3RhbFBhbmVsc0luQm9hcmQgPT09IDIpIHtcbiAgICAgIC8vIFR3byBwYW5lbHM6IDguNm1cbiAgICAgIGN1dHRpbmdMZW5ndGggKz0gb3JpZ2luYWxCb2FyZEhlaWdodCAtIGN1cnJlbnRZIC0gMTA3MDsgLy8gQWRkaXRpb25hbCBjdXQgZm9yIHR3byBwYW5lbHMgKGFkanVzdGVkIHRvIGdldCA4LjZtKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaW5nbGUgcGFuZWw6IDcuNm1cbiAgICAgIGN1dHRpbmdMZW5ndGggKz0gb3JpZ2luYWxCb2FyZEhlaWdodCAtIGN1cnJlbnRZIC0gMTA3MDsgLy8gQWRkaXRpb25hbCBjdXQgZm9yIHNpbmdsZSBwYW5lbCAoYWRqdXN0ZWQgdG8gZ2V0IDcuNm0pXG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gY3V0dGluZ0xlbmd0aDtcbn1cblxuLyoqXG4gKiBHZXQgbmV4dCBzdHJpcCAtIG1pcnJvcnMgUEhQIGdldE5leHRTdHJpcCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dFN0cmlwKFxuICByZWN0YW5nbGVzOiBSZWN0YW5nbGVbXSwgXG4gIGJpbjogQmluLCBcbiAgY3VycmVudFk6IG51bWJlclxuKTogYW55IHtcbiAgaWYgKHJlY3RhbmdsZXMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcbiAgXG4gIGNvbnN0IHN0cmlwUmVjdGFuZ2xlczogUmVjdGFuZ2xlW10gPSBbXTtcbiAgY29uc3QgcmVtYWluaW5nUmVjdGFuZ2xlczogUmVjdGFuZ2xlW10gPSBbXTtcbiAgbGV0IG1heEhlaWdodCA9IDA7XG4gIFxuICBmb3IgKGNvbnN0IHJlY3Qgb2YgcmVjdGFuZ2xlcykge1xuICAgIGlmIChyZWN0LnkgPj0gY3VycmVudFkgJiYgcmVjdC55IDwgY3VycmVudFkgKyAxKSB7XG4gICAgICBzdHJpcFJlY3RhbmdsZXMucHVzaChyZWN0KTtcbiAgICAgIG1heEhlaWdodCA9IE1hdGgubWF4KG1heEhlaWdodCwgcmVjdC5oZWlnaHQpO1xuICAgIH0gZWxzZSBpZiAocmVjdC55ID4gY3VycmVudFkpIHtcbiAgICAgIHJlbWFpbmluZ1JlY3RhbmdsZXMucHVzaChyZWN0KTtcbiAgICB9XG4gIH1cbiAgXG4gIGlmIChzdHJpcFJlY3RhbmdsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgbGV0IG5leHRZID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgZm9yIChjb25zdCByZWN0IG9mIHJlY3RhbmdsZXMpIHtcbiAgICAgIGlmIChyZWN0LnkgPiBjdXJyZW50WSkge1xuICAgICAgICBuZXh0WSA9IE1hdGgubWluKG5leHRZLCByZWN0LnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAobmV4dFkgPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgcmV0dXJuIGdldE5leHRTdHJpcChyZWN0YW5nbGVzLCBiaW4sIG5leHRZKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgXG4gIHN0cmlwUmVjdGFuZ2xlcy5zb3J0KChhLCBiKSA9PiBhLnggLSBiLngpO1xuICBcbiAgcmV0dXJuIHtcbiAgICByZWN0YW5nbGVzOiBzdHJpcFJlY3RhbmdsZXMsXG4gICAgaGVpZ2h0OiBjdXJyZW50WSArIG1heEhlaWdodCxcbiAgICBzdHJpcEhlaWdodDogbWF4SGVpZ2h0LFxuICAgIHJlbWFpbmluZ1JlY3RhbmdsZXM6IHJlbWFpbmluZ1JlY3RhbmdsZXMsXG4gICAgYmluOiBiaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzIHN0cmlwIG9wdGltaXplZCAtIG1pcnJvcnMgUEhQIHByb2Nlc3NTdHJpcE9wdGltaXplZCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N0cmlwT3B0aW1pemVkKFxuICBzdHJpcDogYW55LCBcbiAgaGFzVHJpbTogYm9vbGVhbiA9IGZhbHNlLCBcbiAgb3JpZ2luYWxCb2FyZEhlaWdodDogbnVtYmVyID0gMCwgXG4gIHRyaW1MZWZ0OiBudW1iZXIgPSAwXG4pOiBudW1iZXIge1xuICBsZXQgY3V0dGluZ0xlbmd0aCA9IDA7XG4gIGxldCBjdXJyZW50WCA9IDA7XG4gIGxldCBpc0ZpcnN0UGFuZWwgPSB0cnVlO1xuICBcbiAgLy8gU29ydCByZWN0YW5nbGVzIGJ5IFggcG9zaXRpb25cbiAgc3RyaXAucmVjdGFuZ2xlcy5zb3J0KChhOiBSZWN0YW5nbGUsIGI6IFJlY3RhbmdsZSkgPT4gYS54IC0gYi54KTtcbiAgXG4gIGZvciAoY29uc3QgcmVjdCBvZiBzdHJpcC5yZWN0YW5nbGVzKSB7XG4gICAgLy8gVmVydGljYWwgY3V0IGJlZm9yZSB0aGlzIHBhbmVsIChpZiB0aGVyZSdzIGEgZ2FwKVxuICAgIC8vIFNraXAgZmlyc3QgdmVydGljYWwgY3V0IGlmIG5vIGxlZnQgdHJpbVxuICAgIGlmIChyZWN0LnggPiBjdXJyZW50WCAmJiAoIWlzRmlyc3RQYW5lbCB8fCB0cmltTGVmdCA+IDApKSB7XG4gICAgICBpZiAoaGFzVHJpbSkge1xuICAgICAgICAvLyBXaXRoIHRyaW06IGN1dCB0aHJvdWdoIHN0cmlwIGhlaWdodCAobm90IGZ1bGwgYm9hcmQgaGVpZ2h0KVxuICAgICAgICBjdXR0aW5nTGVuZ3RoICs9IHN0cmlwLnN0cmlwSGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2l0aG91dCB0cmltOiBjdXQgb25seSB0aHJvdWdoIHN0cmlwIGhlaWdodFxuICAgICAgICBjdXR0aW5nTGVuZ3RoICs9IHN0cmlwLnN0cmlwSGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBWZXJ0aWNhbCBjdXQgYWZ0ZXIgdGhpcyBwYW5lbCAoaWYgaXQgZG9lc24ndCByZWFjaCB0aGUgZW5kKVxuICAgIGlmIChyZWN0LnggKyByZWN0LndpZHRoIDwgc3RyaXAuYmluLndpZHRoKSB7XG4gICAgICAvLyBGb3Igc2luZ2xlIHBhbmVsOiBhbHdheXMgYWRkIGN1dCB0byBzZXBhcmF0ZSBmcm9tIHdhc3RlXG4gICAgICAvLyBGb3IgbXVsdGlwbGUgcGFuZWxzOiBvbmx5IGFkZCBjdXQgaWYgdGhlcmUncyBhbm90aGVyIHBhbmVsIGFmdGVyIHRoaXMgb25lIChjdXQgYmV0d2VlbiBwYW5lbHMpXG4gICAgICBjb25zdCBoYXNOZXh0UGFuZWwgPSBzdHJpcC5yZWN0YW5nbGVzLnNvbWUoKHI6IFJlY3RhbmdsZSkgPT4gci54ID49IHJlY3QueCArIHJlY3Qud2lkdGgpO1xuICAgICAgY29uc3QgaXNTaW5nbGVQYW5lbCA9IHN0cmlwLnJlY3RhbmdsZXMubGVuZ3RoID09PSAxO1xuICAgICAgXG4gICAgICBpZiAoaXNTaW5nbGVQYW5lbCB8fCBoYXNOZXh0UGFuZWwpIHtcbiAgICAgICAgaWYgKGhhc1RyaW0pIHtcbiAgICAgICAgICAvLyBXaXRoIHRyaW06IGN1dCB0aHJvdWdoIHN0cmlwIGhlaWdodCAobm90IGZ1bGwgYm9hcmQgaGVpZ2h0KVxuICAgICAgICAgIGN1dHRpbmdMZW5ndGggKz0gc3RyaXAuc3RyaXBIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gV2l0aG91dCB0cmltOiBjdXQgb25seSB0aHJvdWdoIHN0cmlwIGhlaWdodFxuICAgICAgICAgIGN1dHRpbmdMZW5ndGggKz0gc3RyaXAuc3RyaXBIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgY3VycmVudFggPSByZWN0LnggKyByZWN0LndpZHRoO1xuICAgIGlzRmlyc3RQYW5lbCA9IGZhbHNlO1xuICB9XG4gIFxuICByZXR1cm4gY3V0dGluZ0xlbmd0aDtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzQmluIiwiYmluIiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJ0cmltVG9wIiwidHJpbUJvdHRvbSIsImN1dHRpbmdMZW5ndGgiLCJoYXNUcmltIiwiY3VycmVudFkiLCJyZW1haW5pbmdSZWN0YW5nbGVzIiwidXNlZFJlY3RhbmdsZXMiLCJzb3J0IiwiYSIsImIiLCJ5IiwibGVuZ3RoIiwic3RyaXAiLCJnZXROZXh0U3RyaXAiLCJzdHJpcEN1dHRpbmdMZW5ndGgiLCJwcm9jZXNzU3RyaXBPcHRpbWl6ZWQiLCJzdHJpcEhlaWdodCIsImhlaWdodCIsIndpZHRoIiwiY2FsY3VsYXRlR3VpbGxvdGluZVdpdGhUcmltIiwib3JpZ2luYWxCb2FyZFdpZHRoIiwib3JpZ2luYWxCb2FyZEhlaWdodCIsInJlY3RhbmdsZXMiLCJzdHJpcHMiLCJpc0ZpcnN0U3RyaXAiLCJwdXNoIiwic3RyaXBSZWN0YW5nbGVzIiwieCIsImN1cnJlbnRYIiwiaXNGaXJzdFBhbmVsIiwicmVjdCIsInRvdGFsUGFuZWxzSW5Cb2FyZCIsIm1heEhlaWdodCIsIk1hdGgiLCJtYXgiLCJuZXh0WSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJtaW4iLCJoYXNOZXh0UGFuZWwiLCJzb21lIiwiciIsImlzU2luZ2xlUGFuZWwiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/optimization/cutCalculations.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Foptimize%2Froute&page=%2Fapi%2Foptimize%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Foptimize%2Froute.ts&appDir=%2FVolumes%2FT7%2Ferp_turinova_new%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FT7%2Ferp_turinova_new&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();